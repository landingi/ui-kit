/*! For license information please see main.js.LICENSE.txt */
!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("react")):"function"==typeof define&&define.amd?define(["react"],n):"object"==typeof exports?exports["@landingi/landingi_ui_kit"]=n(require("react")):t["@landingi/landingi_ui_kit"]=n(t.react)}(self,(function(t){return function(){var n={166:function(t,n){var e;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var t=[],n=0;n<arguments.length;n++){var e=arguments[n];if(e){var i=typeof e;if("string"===i||"number"===i)t.push(this&&this[e]||e);else if(Array.isArray(e))t.push(o.apply(this,e));else if("object"===i)if(e.toString===Object.prototype.toString)for(var a in e)r.call(e,a)&&e[a]&&t.push(this&&this[a]||a);else t.push(e.toString())}}return t.join(" ")}t.exports?(o.default=o,t.exports=o):void 0===(e=function(){return o}.apply(n,[]))||(t.exports=e)}()},703:function(t,n,e){"use strict";var r=e(414);function o(){}function i(){}i.resetWarningCache=o,t.exports=function(){function t(t,n,e,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function n(){return t}t.isRequired=t;var e={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:n,element:t,elementType:t,instanceOf:n,node:t,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:i,resetWarningCache:o};return e.PropTypes=e,e}},697:function(t,n,e){t.exports=e(703)()},414:function(t){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},954:function(t,n,e){"use strict";var r,o=(r=e(156))&&"object"==typeof r&&"default"in r?r.default:r,i=!1;"undefined"!=typeof window&&(i="ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch);var a=i,s={borderRadius:"inherit",height:"100%",left:0,position:"absolute",top:0,width:"100%"};function c(t,n,e,r){return e*((t=t/r-1)*t*t*t*t+1)+n}var l=Math.sqrt(2),f=Math.cos,u=Math.max,p=Math.min;function d(t){return p(t.duration,Date.now()-t.mouseDown)}function m(t){return 0<t.mouseUp?Date.now()-t.mouseUp:0}function h(t){var n=t.duration,e=t.radius,r=.85*c(d(t),0,e,n),o=.15*c(m(t),0,e,n),i=.02*e*f(Date.now()/n);return u(0,r+o+i)}function b(t,n,e){return e||p(.6*u(t,n))}function y(t,n){return c(m(t),n,-n,t.duration)}function g(t,n){return p(y(t,n),c(d(t),0,.3,3*t.duration))}function v(t,n,e){return p(1,h(t)/n*2/l)*(e/2-t.x)}function w(t,n,e){return p(1,h(t)/n*2/l)*(e/2-t.y)}function _(t){return h(t)/t.radius}var x=function(t){var n=t.mouseUp,e=t.duration;return!n||Date.now()-n<e};function k(t){var n,e=[],r=!1,o={each:function(t,n){for(var r=0,o=e.length;r<o;r++)t.call(n,e[r])},play:function(){r||(r=!0,o.update())},stop:function(){r=!1,cancelAnimationFrame(n)},getTotalOpacity:function(t){for(var n=0,r=0,o=e.length;r<o;r++)n+=g(e[r],t);return n},update:function(){(e=e.filter(x)).length?n=requestAnimationFrame(o.update):o.stop(),t()},add:function(t){e.push(t),o.play()},release:function(t){for(var n=e.length-1;0<=n;n--)if(!e[n].mouseUp)return e[n].mouseUp=t}};return o}function O(){for(var t=arguments,n={},e=0;e<arguments.length;e++){var r=t[e];if(r)for(var o in r)n[o]=r[o]}return n}var P=2*Math.PI,E={background:!0,className:"ink",duration:1e3,opacity:.25,recenter:!0,hasTouch:a},S=function(t){function n(n){t.apply(this,arguments),this.state={color:"transparent",density:1,height:0,store:k(this.tick.bind(this)),width:0},this.touchEvents=this.touchEvents()}return t&&(n.__proto__=t),((n.prototype=Object.create(t&&t.prototype)).constructor=n).prototype.touchEvents=function(){return this.props.hasTouch?{onTouchStart:this.t.bind(this),onTouchEnd:this.n.bind(this),onTouchCancel:this.n.bind(this)}:{onMouseDown:this.t.bind(this),onMouseUp:this.n.bind(this),onMouseLeave:this.n.bind(this)}},n.prototype.tick=function(){var t=this.state,n=t.ctx,e=t.color,r=t.density,o=t.height,i=t.width,a=t.store;n.save(),n.scale(r,r),n.clearRect(0,0,i,o),n.fillStyle=e,this.props.background&&(n.globalAlpha=a.getTotalOpacity(this.props.opacity),n.fillRect(0,0,i,o)),a.each(this.makeBlot,this),n.restore()},n.prototype.makeBlot=function(t){var n=this.state,e=n.ctx,r=n.height,o=n.width,i=t.x,a=t.y,s=t.radius;if(e.globalAlpha=y(t,this.props.opacity),e.beginPath(),this.props.recenter){var c=Math.max(r,o);i+=v(t,c,o),a+=w(t,c,r)}e.arc(i,a,s*_(t),0,P),e.closePath(),e.fill()},n.prototype.componentWillUnmount=function(){this.state.store.stop()},n.prototype.pushBlot=function(t,n,e){var r=this,o=this.canvas;o.getDOMNode&&"function"==typeof o.getDOMNode&&(o=o.getDOMNode());var i=o.getBoundingClientRect(),a=i.top,s=i.bottom,c=i.left,l=i.right,f=window.getComputedStyle(o).color,u=this.state.ctx||o.getContext("2d"),p=function(t){return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)}(u),d=s-a,m=l-c,h=b(d,m,this.props.radius);this.setState({color:f,ctx:u,density:p,height:d,width:m},(function(){r.state.store.add({duration:r.props.duration,mouseDown:t,mouseUp:0,radius:h,x:n-c,y:e-a})}))},n.prototype.setCanvas=function(t){this.canvas=t},n.prototype.render=function(){var t=this.state,n=t.density,e=t.height,r=t.width,i=this.props,a=i.className,c=i.style,l=O({className:a,ref:this.setCanvas.bind(this),height:e*n,width:r*n,onDragOver:this.n,style:O(s,c)},this.touchEvents);return o.createElement("canvas",l)},n.prototype.t=function(t){var n=t.button,e=t.ctrlKey,r=t.clientX,o=t.clientY,i=t.changedTouches,a=Date.now();if(i)for(var s=0;s<i.length;s++){var c=i[s],l=c.clientX,f=c.clientY;this.pushBlot(a,l,f)}else 0!==n||e||this.pushBlot(a,r,o)},n.prototype.n=function(){this.state.store.release(Date.now())},n}(o.PureComponent);S.defaultProps=E,t.exports=S},156:function(n){"use strict";n.exports=t}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={exports:{}};return n[t](i,i.exports,r),i.exports}r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,{a:n}),n},r.d=function(t,n){for(var e in n)r.o(n,e)&&!r.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};return function(){"use strict";r.r(o),r.d(o,{Button:function(){return Qt}});var t=r(156),n=r.n(t),e=r(954),i=r.n(e),a=r(697),s=r.n(a),c=r(166),l=r.n(c),f=function(t){return l().bind(t)};function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function p(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function d(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function m(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{},r=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(e).filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})))),r.forEach((function(n){d(t,n,e[n])}))}return t}function h(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var b=function(){},y={},g={},v={mark:b,measure:b};try{"undefined"!=typeof window&&(y=window),"undefined"!=typeof document&&(g=document),"undefined"!=typeof MutationObserver&&MutationObserver,"undefined"!=typeof performance&&(v=performance)}catch(t){}var w=(y.navigator||{}).userAgent,_=void 0===w?"":w,x=y,k=g,O=v,P=(x.document,!!k.documentElement&&!!k.head&&"function"==typeof k.addEventListener&&"function"==typeof k.createElement),E=(~_.indexOf("MSIE")||_.indexOf("Trident/"),"svg-inline--fa"),S=[1,2,3,4,5,6,7,8,9,10],j=S.concat([11,12,13,14,15,16,17,18,19,20]),M={GROUP:"group",SWAP_OPACITY:"swap-opacity",PRIMARY:"primary",SECONDARY:"secondary"},T=(["xs","sm","lg","fw","ul","li","border","pull-left","pull-right","spin","pulse","rotate-90","rotate-180","rotate-270","flip-horizontal","flip-vertical","flip-both","stack","stack-1x","stack-2x","inverse","layers","layers-text","layers-counter",M.GROUP,M.SWAP_OPACITY,M.PRIMARY,M.SECONDARY].concat(S.map((function(t){return"".concat(t,"x")}))).concat(j.map((function(t){return"w-".concat(t)}))),x.FontAwesomeConfig||{});k&&"function"==typeof k.querySelector&&[["data-family-prefix","familyPrefix"],["data-replacement-class","replacementClass"],["data-auto-replace-svg","autoReplaceSvg"],["data-auto-add-css","autoAddCss"],["data-auto-a11y","autoA11y"],["data-search-pseudo-elements","searchPseudoElements"],["data-observe-mutations","observeMutations"],["data-mutate-approach","mutateApproach"],["data-keep-original-source","keepOriginalSource"],["data-measure-performance","measurePerformance"],["data-show-missing-icons","showMissingIcons"]].forEach((function(t){var n=h(t,2),e=n[0],r=n[1],o=function(t){return""===t||"false"!==t&&("true"===t||t)}(function(t){var n=k.querySelector("script["+t+"]");if(n)return n.getAttribute(t)}(e));null!=o&&(T[r]=o)}));var A=m({},{familyPrefix:"fa",replacementClass:E,autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,mutateApproach:"async",keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0},T);A.autoReplaceSvg||(A.observeMutations=!1);var z=m({},A);x.FontAwesomeConfig=z;var C=x||{};C.___FONT_AWESOME___||(C.___FONT_AWESOME___={}),C.___FONT_AWESOME___.styles||(C.___FONT_AWESOME___.styles={}),C.___FONT_AWESOME___.hooks||(C.___FONT_AWESOME___.hooks={}),C.___FONT_AWESOME___.shims||(C.___FONT_AWESOME___.shims=[]);var N=C.___FONT_AWESOME___,I=[];P&&((k.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(k.readyState)||k.addEventListener("DOMContentLoaded",(function t(){k.removeEventListener("DOMContentLoaded",t),I.map((function(t){return t()}))})));var B,R="pending",D="settled",L="fulfilled",W="rejected",U=function(){},F=void 0!==r.g&&void 0!==r.g.process&&"function"==typeof r.g.process.emit,Y="undefined"==typeof setImmediate?setTimeout:setImmediate,X=[];function q(){for(var t=0;t<X.length;t++)X[t][0](X[t][1]);X=[],B=!1}function H(t,n){X.push([t,n]),B||(B=!0,Y(q,0))}function V(t){var n=t.owner,e=n._state,r=n._data,o=t[e],i=t.then;if("function"==typeof o){e=L;try{r=o(r)}catch(t){Q(i,t)}}G(i,r)||(e===L&&K(i,r),e===W&&Q(i,r))}function G(t,n){var e;try{if(t===n)throw new TypeError("A promises callback cannot return that same promise.");if(n&&("function"==typeof n||"object"===u(n))){var r=n.then;if("function"==typeof r)return r.call(n,(function(r){e||(e=!0,n===r?J(t,r):K(t,r))}),(function(n){e||(e=!0,Q(t,n))})),!0}}catch(n){return e||Q(t,n),!0}return!1}function K(t,n){t!==n&&G(t,n)||J(t,n)}function J(t,n){t._state===R&&(t._state=D,t._data=n,H($,t))}function Q(t,n){t._state===R&&(t._state=D,t._data=n,H(tt,t))}function Z(t){t._then=t._then.forEach(V)}function $(t){t._state=L,Z(t)}function tt(t){t._state=W,Z(t),!t._handled&&F&&r.g.process.emit("unhandledRejection",t._data,t)}function nt(t){r.g.process.emit("rejectionHandled",t)}function et(t){if("function"!=typeof t)throw new TypeError("Promise resolver "+t+" is not a function");if(this instanceof et==0)throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");this._then=[],function(t,n){function e(t){Q(n,t)}try{t((function(t){K(n,t)}),e)}catch(t){e(t)}}(t,this)}et.prototype={constructor:et,_state:R,_then:null,_data:void 0,_handled:!1,then:function(t,n){var e={owner:this,then:new this.constructor(U),fulfilled:t,rejected:n};return!n&&!t||this._handled||(this._handled=!0,this._state===W&&F&&H(nt,this)),this._state===L||this._state===W?H(V,e):this._then.push(e),e.then},catch:function(t){return this.then(null,t)}},et.all=function(t){if(!Array.isArray(t))throw new TypeError("You must pass an array to Promise.all().");return new et((function(n,e){var r=[],o=0;function i(t){return o++,function(e){r[t]=e,--o||n(r)}}for(var a,s=0;s<t.length;s++)(a=t[s])&&"function"==typeof a.then?a.then(i(s),e):r[s]=a;o||n(r)}))},et.race=function(t){if(!Array.isArray(t))throw new TypeError("You must pass an array to Promise.race().");return new et((function(n,e){for(var r,o=0;o<t.length;o++)(r=t[o])&&"function"==typeof r.then?r.then(n,e):n(r)}))},et.resolve=function(t){return t&&"object"===u(t)&&t.constructor===et?t:new et((function(n){n(t)}))},et.reject=function(t){return new et((function(n,e){e(t)}))};var rt={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function ot(){for(var t=12,n="";t-- >0;)n+="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[62*Math.random()|0];return n}function it(t){return"".concat(t).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function at(t){return Object.keys(t||{}).reduce((function(n,e){return n+"".concat(e,": ").concat(t[e],";")}),"")}function st(t){return t.size!==rt.size||t.x!==rt.x||t.y!==rt.y||t.rotate!==rt.rotate||t.flipX||t.flipY}function ct(t){var n=t.transform,e=t.containerWidth,r=t.iconWidth,o={transform:"translate(".concat(e/2," 256)")},i="translate(".concat(32*n.x,", ").concat(32*n.y,") "),a="scale(".concat(n.size/16*(n.flipX?-1:1),", ").concat(n.size/16*(n.flipY?-1:1),") "),s="rotate(".concat(n.rotate," 0 0)");return{outer:o,inner:{transform:"".concat(i," ").concat(a," ").concat(s)},path:{transform:"translate(".concat(r/2*-1," -256)")}}}var lt={x:0,y:0,width:"100%",height:"100%"};function ft(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return t.attributes&&(t.attributes.fill||n)&&(t.attributes.fill="black"),t}function ut(t){var n=t.icons,e=n.main,r=n.mask,o=t.prefix,i=t.iconName,a=t.transform,s=t.symbol,c=t.title,l=t.maskId,f=t.titleId,u=t.extra,p=t.watchable,d=void 0!==p&&p,h=r.found?r:e,b=h.width,y=h.height,g="fak"===o,v=g?"":"fa-w-".concat(Math.ceil(b/y*16)),w=[z.replacementClass,i?"".concat(z.familyPrefix,"-").concat(i):"",v].filter((function(t){return-1===u.classes.indexOf(t)})).filter((function(t){return""!==t||!!t})).concat(u.classes).join(" "),_={children:[],attributes:m({},u.attributes,{"data-prefix":o,"data-icon":i,class:w,role:u.attributes.role||"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 ".concat(b," ").concat(y)})},x=g&&!~u.classes.indexOf("fa-fw")?{width:"".concat(b/y*16*.0625,"em")}:{};d&&(_.attributes["data-fa-i2svg"]=""),c&&_.children.push({tag:"title",attributes:{id:_.attributes["aria-labelledby"]||"title-".concat(f||ot())},children:[c]});var k=m({},_,{prefix:o,iconName:i,main:e,mask:r,maskId:l,transform:a,symbol:s,styles:m({},x,u.styles)}),O=r.found&&e.found?function(t){var n,e=t.children,r=t.attributes,o=t.main,i=t.mask,a=t.maskId,s=t.transform,c=o.width,l=o.icon,f=i.width,u=i.icon,p=ct({transform:s,containerWidth:f,iconWidth:c}),d={tag:"rect",attributes:m({},lt,{fill:"white"})},h=l.children?{children:l.children.map(ft)}:{},b={tag:"g",attributes:m({},p.inner),children:[ft(m({tag:l.tag,attributes:m({},l.attributes,p.path)},h))]},y={tag:"g",attributes:m({},p.outer),children:[b]},g="mask-".concat(a||ot()),v="clip-".concat(a||ot()),w={tag:"mask",attributes:m({},lt,{id:g,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[d,y]},_={tag:"defs",children:[{tag:"clipPath",attributes:{id:v},children:(n=u,"g"===n.tag?n.children:[n])},w]};return e.push(_,{tag:"rect",attributes:m({fill:"currentColor","clip-path":"url(#".concat(v,")"),mask:"url(#".concat(g,")")},lt)}),{children:e,attributes:r}}(k):function(t){var n=t.children,e=t.attributes,r=t.main,o=t.transform,i=at(t.styles);if(i.length>0&&(e.style=i),st(o)){var a=ct({transform:o,containerWidth:r.width,iconWidth:r.width});n.push({tag:"g",attributes:m({},a.outer),children:[{tag:"g",attributes:m({},a.inner),children:[{tag:r.icon.tag,children:r.icon.children,attributes:m({},r.icon.attributes,a.path)}]}]})}else n.push(r.icon);return{children:n,attributes:e}}(k),P=O.children,E=O.attributes;return k.children=P,k.attributes=E,s?function(t){var n=t.prefix,e=t.iconName,r=t.children,o=t.attributes,i=t.symbol;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:m({},o,{id:!0===i?"".concat(n,"-").concat(z.familyPrefix,"-").concat(e):i}),children:r}]}]}(k):function(t){var n=t.children,e=t.main,r=t.mask,o=t.attributes,i=t.styles,a=t.transform;if(st(a)&&e.found&&!r.found){var s={x:e.width/e.height/2,y:.5};o.style=at(m({},i,{"transform-origin":"".concat(s.x+a.x/16,"em ").concat(s.y+a.y/16,"em")}))}return[{tag:"svg",attributes:o,children:n}]}(k)}var pt=(z.measurePerformance&&O&&O.mark&&O.measure,function(t,n,e,r){var o,i,a,s=Object.keys(t),c=s.length,l=void 0!==r?function(t,n){return function(e,r,o,i){return t.call(n,e,r,o,i)}}(n,r):n;for(void 0===e?(o=1,a=t[s[0]]):(o=0,a=e);o<c;o++)a=l(a,t[i=s[o]],i,t);return a});function dt(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=e.skipHooks,o=void 0!==r&&r,i=Object.keys(n).reduce((function(t,e){var r=n[e];return r.icon?t[r.iconName]=r.icon:t[e]=r,t}),{});"function"!=typeof N.hooks.addPack||o?N.styles[t]=m({},N.styles[t]||{},i):N.hooks.addPack(t,i),"fas"===t&&dt("fa",n)}var mt=N.styles,ht=N.shims,bt=function(){var t=function(t){return pt(mt,(function(n,e,r){return n[r]=pt(e,t,{}),n}),{})};t((function(t,n,e){return n[3]&&(t[n[3]]=e),t})),t((function(t,n,e){var r=n[2];return t[e]=e,r.forEach((function(n){t[n]=e})),t}));var n="far"in mt;pt(ht,(function(t,e){var r=e[0],o=e[1],i=e[2];return"far"!==o||n||(o="fas"),t[r]={prefix:o,iconName:i},t}),{})};function yt(t,n,e){if(t&&t[n]&&t[n][e])return{prefix:n,iconName:e,icon:t[n][e]}}function gt(t){var n=t.tag,e=t.attributes,r=void 0===e?{}:e,o=t.children,i=void 0===o?[]:o;return"string"==typeof t?it(t):"<".concat(n," ").concat(function(t){return Object.keys(t||{}).reduce((function(n,e){return n+"".concat(e,'="').concat(it(t[e]),'" ')}),"").trim()}(r),">").concat(i.map(gt).join(""),"</").concat(n,">")}bt(),N.styles;function vt(t){this.name="MissingIcon",this.message=t||"Icon unavailable",this.stack=(new Error).stack}vt.prototype=Object.create(Error.prototype),vt.prototype.constructor=vt;var wt={fill:"currentColor"},_t={attributeType:"XML",repeatCount:"indefinite",dur:"2s"},xt=(m({},wt,{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"}),m({},_t,{attributeName:"opacity"}));function kt(t){var n=t[0],e=t[1],r=h(t.slice(4),1)[0];return{found:!0,width:n,height:e,icon:Array.isArray(r)?{tag:"g",attributes:{class:"".concat(z.familyPrefix,"-").concat(M.GROUP)},children:[{tag:"path",attributes:{class:"".concat(z.familyPrefix,"-").concat(M.SECONDARY),fill:"currentColor",d:r[0]}},{tag:"path",attributes:{class:"".concat(z.familyPrefix,"-").concat(M.PRIMARY),fill:"currentColor",d:r[1]}}]}:{tag:"path",attributes:{fill:"currentColor",d:r}}}}m({},wt,{cx:"256",cy:"364",r:"28"}),m({},_t,{attributeName:"r",values:"28;14;28;28;14;28;"}),m({},xt,{values:"1;0;1;1;0;1;"}),m({},wt,{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),m({},xt,{values:"1;0;0;0;0;1;"}),m({},wt,{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),m({},xt,{values:"0;0;1;1;0;0;"}),N.styles,N.styles;var Ot=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.definitions={}}var n,e;return n=t,e=[{key:"add",value:function(){for(var t=this,n=arguments.length,e=new Array(n),r=0;r<n;r++)e[r]=arguments[r];var o=e.reduce(this._pullDefinitions,{});Object.keys(o).forEach((function(n){t.definitions[n]=m({},t.definitions[n]||{},o[n]),dt(n,o[n]),bt()}))}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(t,n){var e=n.prefix&&n.iconName&&n.icon?{0:n}:n;return Object.keys(e).map((function(n){var r=e[n],o=r.prefix,i=r.iconName,a=r.icon;t[o]||(t[o]={}),t[o][i]=a})),t}}],e&&p(n.prototype,e),t}();function Pt(){z.autoAddCss&&!Tt&&(function(t){if(t&&P){var n=k.createElement("style");n.setAttribute("type","text/css"),n.innerHTML=t;for(var e=k.head.childNodes,r=null,o=e.length-1;o>-1;o--){var i=e[o],a=(i.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(a)>-1&&(r=i)}k.head.insertBefore(n,r)}}(function(){var t="fa",n=E,e=z.familyPrefix,r=z.replacementClass,o='svg:not(:root).svg-inline--fa {\n  overflow: visible;\n}\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.225em;\n}\n.svg-inline--fa.fa-w-1 {\n  width: 0.0625em;\n}\n.svg-inline--fa.fa-w-2 {\n  width: 0.125em;\n}\n.svg-inline--fa.fa-w-3 {\n  width: 0.1875em;\n}\n.svg-inline--fa.fa-w-4 {\n  width: 0.25em;\n}\n.svg-inline--fa.fa-w-5 {\n  width: 0.3125em;\n}\n.svg-inline--fa.fa-w-6 {\n  width: 0.375em;\n}\n.svg-inline--fa.fa-w-7 {\n  width: 0.4375em;\n}\n.svg-inline--fa.fa-w-8 {\n  width: 0.5em;\n}\n.svg-inline--fa.fa-w-9 {\n  width: 0.5625em;\n}\n.svg-inline--fa.fa-w-10 {\n  width: 0.625em;\n}\n.svg-inline--fa.fa-w-11 {\n  width: 0.6875em;\n}\n.svg-inline--fa.fa-w-12 {\n  width: 0.75em;\n}\n.svg-inline--fa.fa-w-13 {\n  width: 0.8125em;\n}\n.svg-inline--fa.fa-w-14 {\n  width: 0.875em;\n}\n.svg-inline--fa.fa-w-15 {\n  width: 0.9375em;\n}\n.svg-inline--fa.fa-w-16 {\n  width: 1em;\n}\n.svg-inline--fa.fa-w-17 {\n  width: 1.0625em;\n}\n.svg-inline--fa.fa-w-18 {\n  width: 1.125em;\n}\n.svg-inline--fa.fa-w-19 {\n  width: 1.1875em;\n}\n.svg-inline--fa.fa-w-20 {\n  width: 1.25em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-border {\n  height: 1.5em;\n}\n.svg-inline--fa.fa-li {\n  width: 2em;\n}\n.svg-inline--fa.fa-fw {\n  width: 1.25em;\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: 0.25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-lg {\n  font-size: 1.3333333333em;\n  line-height: 0.75em;\n  vertical-align: -0.0667em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit;\n}\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: 0.1em;\n  padding: 0.2em 0.25em 0.15em;\n}\n\n.fa-pull-left {\n  float: left;\n}\n\n.fa-pull-right {\n  float: right;\n}\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: 0.3em;\n}\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: 0.3em;\n}\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8);\n}\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both, .fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical,\n:root .fa-flip-both {\n  -webkit-filter: none;\n          filter: none;\n}\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse {\n  color: #fff;\n}';if(e!==t||r!==n){var i=new RegExp("\\.".concat(t,"\\-"),"g"),a=new RegExp("\\--".concat(t,"\\-"),"g"),s=new RegExp("\\.".concat(n),"g");o=o.replace(i,".".concat(e,"-")).replace(a,"--".concat(e,"-")).replace(s,".".concat(r))}return o}()),Tt=!0)}function Et(t,n){return Object.defineProperty(t,"abstract",{get:n}),Object.defineProperty(t,"html",{get:function(){return t.abstract.map((function(t){return gt(t)}))}}),Object.defineProperty(t,"node",{get:function(){if(P){var n=k.createElement("div");return n.innerHTML=t.html,n.children}}}),t}function St(t){var n=t.prefix,e=void 0===n?"fa":n,r=t.iconName;if(r)return yt(Mt.definitions,e,r)||yt(N.styles,e,r)}var jt,Mt=new Ot,Tt=!1,At={transform:function(t){return function(t){var n={size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0};return t?t.toLowerCase().split(" ").reduce((function(t,n){var e=n.toLowerCase().split("-"),r=e[0],o=e.slice(1).join("-");if(r&&"h"===o)return t.flipX=!0,t;if(r&&"v"===o)return t.flipY=!0,t;if(o=parseFloat(o),isNaN(o))return t;switch(r){case"grow":t.size=t.size+o;break;case"shrink":t.size=t.size-o;break;case"left":t.x=t.x-o;break;case"right":t.x=t.x+o;break;case"up":t.y=t.y-o;break;case"down":t.y=t.y+o;break;case"rotate":t.rotate=t.rotate+o}return t}),n):n}(t)}},zt=(jt=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.transform,r=void 0===e?rt:e,o=n.symbol,i=void 0!==o&&o,a=n.mask,s=void 0===a?null:a,c=n.maskId,l=void 0===c?null:c,f=n.title,u=void 0===f?null:f,p=n.titleId,d=void 0===p?null:p,h=n.classes,b=void 0===h?[]:h,y=n.attributes,g=void 0===y?{}:y,v=n.styles,w=void 0===v?{}:v;if(t){var _=t.prefix,x=t.iconName,k=t.icon;return Et(m({type:"icon"},t),(function(){return Pt(),z.autoA11y&&(u?g["aria-labelledby"]="".concat(z.replacementClass,"-title-").concat(d||ot()):(g["aria-hidden"]="true",g.focusable="false")),ut({icons:{main:kt(k),mask:s?kt(s.icon):{found:!1,width:null,height:null,icon:{}}},prefix:_,iconName:x,transform:m({},rt,r),symbol:i,title:u,maskId:l,titleId:d,extra:{attributes:g,styles:w,classes:b}})}))}},function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=(t||{}).icon?t:St(t||{}),r=n.mask;return r&&(r=(r||{}).icon?r:St(r||{})),jt(e,m({},n,{mask:r}))});function Ct(t){return Ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ct(t)}function Nt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function It(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function Bt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?It(Object(e),!0).forEach((function(n){Nt(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):It(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function Rt(t,n){if(null==t)return{};var e,r,o=function(t,n){if(null==t)return{};var e,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)e=i[r],n.indexOf(e)>=0||(o[e]=t[e]);return o}(t,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)e=i[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(o[e]=t[e])}return o}function Dt(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Lt(t){return n=t,(n-=0)==n?t:(t=t.replace(/[\-_\s]+(.)?/g,(function(t,n){return n?n.toUpperCase():""}))).substr(0,1).toLowerCase()+t.substr(1);var n}function Wt(t){return t.split(";").map((function(t){return t.trim()})).filter((function(t){return t})).reduce((function(t,n){var e,r=n.indexOf(":"),o=Lt(n.slice(0,r)),i=n.slice(r+1).trim();return o.startsWith("webkit")?t[(e=o,e.charAt(0).toUpperCase()+e.slice(1))]=i:t[o]=i,t}),{})}var Ut=!1;try{Ut=!0}catch(t){}function Ft(t){return t&&"object"===Ct(t)&&t.prefix&&t.iconName&&t.icon?t:At.icon?At.icon(t):null===t?null:t&&"object"===Ct(t)&&t.prefix&&t.iconName?t:Array.isArray(t)&&2===t.length?{prefix:t[0],iconName:t[1]}:"string"==typeof t?{prefix:"fas",iconName:t}:void 0}function Yt(t,n){return Array.isArray(n)&&n.length>0||!Array.isArray(n)&&n?Nt({},t,n):{}}function Xt(t){var n=t.forwardedRef,e=Rt(t,["forwardedRef"]),r=e.icon,o=e.mask,i=e.symbol,a=e.className,s=e.title,c=e.titleId,l=Ft(r),f=Yt("classes",[].concat(Dt(function(t){var n,e=t.spin,r=t.pulse,o=t.fixedWidth,i=t.inverse,a=t.border,s=t.listItem,c=t.flip,l=t.size,f=t.rotation,u=t.pull,p=(Nt(n={"fa-spin":e,"fa-pulse":r,"fa-fw":o,"fa-inverse":i,"fa-border":a,"fa-li":s,"fa-flip-horizontal":"horizontal"===c||"both"===c,"fa-flip-vertical":"vertical"===c||"both"===c},"fa-".concat(l),null!=l),Nt(n,"fa-rotate-".concat(f),null!=f&&0!==f),Nt(n,"fa-pull-".concat(u),null!=u),Nt(n,"fa-swap-opacity",t.swapOpacity),n);return Object.keys(p).map((function(t){return p[t]?t:null})).filter((function(t){return t}))}(e)),Dt(a.split(" ")))),u=Yt("transform","string"==typeof e.transform?At.transform(e.transform):e.transform),p=Yt("mask",Ft(o)),d=zt(l,Bt({},f,{},u,{},p,{symbol:i,title:s,titleId:c}));if(!d)return function(){var t;!Ut&&console&&"function"==typeof console.error&&(t=console).error.apply(t,arguments)}("Could not find icon",l),null;var m=d.abstract,h={ref:n};return Object.keys(e).forEach((function(t){Xt.defaultProps.hasOwnProperty(t)||(h[t]=e[t])})),qt(m[0],h)}Xt.displayName="FontAwesomeIcon",Xt.propTypes={border:s().bool,className:s().string,mask:s().oneOfType([s().object,s().array,s().string]),fixedWidth:s().bool,inverse:s().bool,flip:s().oneOf(["horizontal","vertical","both"]),icon:s().oneOfType([s().object,s().array,s().string]),listItem:s().bool,pull:s().oneOf(["right","left"]),pulse:s().bool,rotation:s().oneOf([0,90,180,270]),size:s().oneOf(["lg","xs","sm","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:s().bool,symbol:s().oneOfType([s().bool,s().string]),title:s().string,transform:s().oneOfType([s().string,s().object]),swapOpacity:s().bool},Xt.defaultProps={border:!1,className:"",mask:null,fixedWidth:!1,inverse:!1,flip:null,icon:null,listItem:!1,pull:null,pulse:!1,rotation:null,size:null,spin:!1,symbol:!1,title:"",transform:null,swapOpacity:!1};var qt=function t(n,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("string"==typeof e)return e;var o=(e.children||[]).map((function(e){return t(n,e)})),i=Object.keys(e.attributes||{}).reduce((function(t,n){var r=e.attributes[n];switch(n){case"class":t.attrs.className=r,delete e.attributes.class;break;case"style":t.attrs.style=Wt(r);break;default:0===n.indexOf("aria-")||0===n.indexOf("data-")?t.attrs[n.toLowerCase()]=r:t.attrs[Lt(n)]=r}return t}),{attrs:{}}),a=r.style,s=void 0===a?{}:a,c=Rt(r,["style"]);return i.attrs.style=Bt({},i.attrs.style,{},s),n.apply(void 0,[e.tag,Bt({},i.attrs,{},c)].concat(Dt(o)))}.bind(null,n().createElement),Ht=f({"text--truncate":"Spinner__text--truncate"}),Vt=function(t){var e=t.className;return n().createElement("div",{className:Ht(e)},n().createElement(Xt,{icon:"spinner",spin:!0}))};Vt.displayName="Spinner",Vt.propTypes={className:s().oneOfType([s().string,s().array])},Vt.defaultProps={className:"spinner__spin"};var Gt=Vt,Kt=f({"text--truncate":"Button__text--truncate",button:"Button__button","button--primary":"Button__button--primary","button--alert":"Button__button--alert","button--secondary":"Button__button--secondary","button--hide":"Button__button--hide","button--tiny":"Button__button--tiny","button--small":"Button__button--small","button--medium":"Button__button--medium","button--large":"Button__button--large","button--fit-width":"Button__button--fit-width","button--dropdown":"Button__button--dropdown","button--dropdown-element":"Button__button--dropdown-element","button--transparent":"Button__button--transparent","button--transparent-blue":"Button__button--transparent-blue","button--tabs":"Button__button--tabs","button--icon":"Button__button--icon","button--svg":"Button__button--svg","button--switcher":"Button__button--switcher","button--center":"Button__button--center","button--left":"Button__button--left","button--right":"Button__button--right","button--input":"Button__button--input","button--action":"Button__button--action",link:"Button__link"}),Jt=function(t){var e=t.className,r=t.tag,o=t.title,a=t.type,s=t.href,c=t.size,l=t.variant,f=t.align,u=t.target,p=t.children,d=t.onClick,m=t.isLoading,h=t.isDisabled,b=t.hasBackgoundRipple,y=t.hasIcon,g=t.hide,v=t.buttonStyle,w=(t.id,t.fitWidth),_=Kt({"button--primary":"primary"===l,"button--secondary":"secondary"===l,"button--dropdown":"dropdown"===l,"button--transparent":"transparent"===l,"button--transparent-blue":"transparent-blue"===l,"button--dropdown-element":"dropdown-element"===l,"dropdown button--switcher":"switcher"===l,"button--switcher-brand":"switcher-brand"===l,"button--tabs":"tabs"===l,"button--alert":"alert"===l,"button--icon":"icon"===l,"button--action":"action"===l,"button--tiny":"tiny"===c,"button--small":"small"===c,"button--medium":"medium"===c,"button--large":"large"===c,"button--input":"input"===c,"button--center":"center"===f,"button--left":"left"===f,"button--right":"right"===f,"button--svg":!0===y,"button--hide":!0===g,"button--fit-width":!0===w});return n().createElement(r,{className:"button"===r?Kt("button",_,e):Kt(v?["button",_]:"link",e),disabled:h?"disabled":void 0,href:"a"===r?s:void 0,onClick:d,target:"a"===r?u:void 0,title:"a"===r?o:void 0,type:"button"===r?a:void 0},m&&n().createElement(Gt,null),!m&&n().createElement(n().Fragment,null,p),b&&n().createElement(i(),null))};Jt.displayName="Button",Jt.propTypes={tag:s().oneOfType([s().string,s().element]),children:s().node.isRequired,type:s().oneOf(["button","submit","reset"]),title:s().oneOfType([s().string,s().object]),target:s().oneOf(["_self","_blank","_parent","_top"]),size:s().oneOf(["tiny","small","medium","large","input"]),variant:s().oneOf(["primary","secondary","dropdown","transparent","icon","alert","clean","tabs","transparent-blue","dropdown-element","switcher-brand","switcher"]),align:s().oneOf(["left","center","right"]),className:s().oneOfType([s().string,s().array]),href:s().string,isDisabled:s().bool,isLoading:s().bool,onClick:s().func,hasBackgoundRipple:s().bool,hasIcon:s().bool,hide:s().bool,buttonStyle:s().bool,id:s().string},Jt.defaultProps={tag:"button",title:void 0,type:"button",href:void 0,target:void 0,className:"button",size:"medium",align:null,variant:"primary",isLoading:!1,isDisabled:!1,onClick:function(){},hasBackgoundRipple:!0,hasIcon:!1,hide:!1,buttonStyle:!1,fitWidth:!1,id:null};var Qt=Jt}(),o}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,