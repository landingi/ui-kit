import crypto from 'crypto';

var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  var f = n.default;
	if (typeof f == "function") {
		var a = function () {
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var bind = {exports: {}};

/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

(function (module) {
	/* global define */
	(function () {

	  var hasOwn = {}.hasOwnProperty;

	  function classNames() {
	    var classes = [];

	    for (var i = 0; i < arguments.length; i++) {
	      var arg = arguments[i];
	      if (!arg) continue;
	      var argType = typeof arg;

	      if (argType === 'string' || argType === 'number') {
	        classes.push(this && this[arg] || arg);
	      } else if (Array.isArray(arg)) {
	        classes.push(classNames.apply(this, arg));
	      } else if (argType === 'object') {
	        if (arg.toString === Object.prototype.toString) {
	          for (var key in arg) {
	            if (hasOwn.call(arg, key) && arg[key]) {
	              classes.push(this && this[key] || key);
	            }
	          }
	        } else {
	          classes.push(arg.toString());
	        }
	      }
	    }

	    return classes.join(' ');
	  }

	  if (module.exports) {
	    classNames.default = classNames;
	    module.exports = classNames;
	  } else {
	    window.classNames = classNames;
	  }
	})();
} (bind));

var classnames$1 = bind.exports;

/**
 * Exports styles from SCSS file
 * @param {object} styles
 * @return {object} An object of styles
 */

const styles$1b = styles => classnames$1.bind(styles);

var propTypes = {exports: {}};

var reactIs = {exports: {}};

var reactIs_production_min = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min;

function requireReactIs_production_min () {
	if (hasRequiredReactIs_production_min) return reactIs_production_min;
	hasRequiredReactIs_production_min = 1;

	var b = "function" === typeof Symbol && Symbol.for,
	    c = b ? Symbol.for("react.element") : 60103,
	    d = b ? Symbol.for("react.portal") : 60106,
	    e = b ? Symbol.for("react.fragment") : 60107,
	    f = b ? Symbol.for("react.strict_mode") : 60108,
	    g = b ? Symbol.for("react.profiler") : 60114,
	    h = b ? Symbol.for("react.provider") : 60109,
	    k = b ? Symbol.for("react.context") : 60110,
	    l = b ? Symbol.for("react.async_mode") : 60111,
	    m = b ? Symbol.for("react.concurrent_mode") : 60111,
	    n = b ? Symbol.for("react.forward_ref") : 60112,
	    p = b ? Symbol.for("react.suspense") : 60113,
	    q = b ? Symbol.for("react.suspense_list") : 60120,
	    r = b ? Symbol.for("react.memo") : 60115,
	    t = b ? Symbol.for("react.lazy") : 60116,
	    v = b ? Symbol.for("react.block") : 60121,
	    w = b ? Symbol.for("react.fundamental") : 60117,
	    x = b ? Symbol.for("react.responder") : 60118,
	    y = b ? Symbol.for("react.scope") : 60119;

	function z(a) {
	  if ("object" === typeof a && null !== a) {
	    var u = a.$$typeof;

	    switch (u) {
	      case c:
	        switch (a = a.type, a) {
	          case l:
	          case m:
	          case e:
	          case g:
	          case f:
	          case p:
	            return a;

	          default:
	            switch (a = a && a.$$typeof, a) {
	              case k:
	              case n:
	              case t:
	              case r:
	              case h:
	                return a;

	              default:
	                return u;
	            }

	        }

	      case d:
	        return u;
	    }
	  }
	}

	function A(a) {
	  return z(a) === m;
	}

	reactIs_production_min.AsyncMode = l;
	reactIs_production_min.ConcurrentMode = m;
	reactIs_production_min.ContextConsumer = k;
	reactIs_production_min.ContextProvider = h;
	reactIs_production_min.Element = c;
	reactIs_production_min.ForwardRef = n;
	reactIs_production_min.Fragment = e;
	reactIs_production_min.Lazy = t;
	reactIs_production_min.Memo = r;
	reactIs_production_min.Portal = d;
	reactIs_production_min.Profiler = g;
	reactIs_production_min.StrictMode = f;
	reactIs_production_min.Suspense = p;

	reactIs_production_min.isAsyncMode = function (a) {
	  return A(a) || z(a) === l;
	};

	reactIs_production_min.isConcurrentMode = A;

	reactIs_production_min.isContextConsumer = function (a) {
	  return z(a) === k;
	};

	reactIs_production_min.isContextProvider = function (a) {
	  return z(a) === h;
	};

	reactIs_production_min.isElement = function (a) {
	  return "object" === typeof a && null !== a && a.$$typeof === c;
	};

	reactIs_production_min.isForwardRef = function (a) {
	  return z(a) === n;
	};

	reactIs_production_min.isFragment = function (a) {
	  return z(a) === e;
	};

	reactIs_production_min.isLazy = function (a) {
	  return z(a) === t;
	};

	reactIs_production_min.isMemo = function (a) {
	  return z(a) === r;
	};

	reactIs_production_min.isPortal = function (a) {
	  return z(a) === d;
	};

	reactIs_production_min.isProfiler = function (a) {
	  return z(a) === g;
	};

	reactIs_production_min.isStrictMode = function (a) {
	  return z(a) === f;
	};

	reactIs_production_min.isSuspense = function (a) {
	  return z(a) === p;
	};

	reactIs_production_min.isValidElementType = function (a) {
	  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
	};

	reactIs_production_min.typeOf = z;
	return reactIs_production_min;
}

var reactIs_development = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function () {
	    // nor polyfill, then a plain number is used for performance.

	    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	    // (unstable) APIs that have been removed. Can we remove the symbols?

	    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	    function isValidElementType(type) {
	      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	    }

	    function typeOf(object) {
	      if (typeof object === 'object' && object !== null) {
	        var $$typeof = object.$$typeof;

	        switch ($$typeof) {
	          case REACT_ELEMENT_TYPE:
	            var type = object.type;

	            switch (type) {
	              case REACT_ASYNC_MODE_TYPE:
	              case REACT_CONCURRENT_MODE_TYPE:
	              case REACT_FRAGMENT_TYPE:
	              case REACT_PROFILER_TYPE:
	              case REACT_STRICT_MODE_TYPE:
	              case REACT_SUSPENSE_TYPE:
	                return type;

	              default:
	                var $$typeofType = type && type.$$typeof;

	                switch ($$typeofType) {
	                  case REACT_CONTEXT_TYPE:
	                  case REACT_FORWARD_REF_TYPE:
	                  case REACT_LAZY_TYPE:
	                  case REACT_MEMO_TYPE:
	                  case REACT_PROVIDER_TYPE:
	                    return $$typeofType;

	                  default:
	                    return $$typeof;
	                }

	            }

	          case REACT_PORTAL_TYPE:
	            return $$typeof;
	        }
	      }

	      return undefined;
	    } // AsyncMode is deprecated along with isAsyncMode


	    var AsyncMode = REACT_ASYNC_MODE_TYPE;
	    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	    var ContextConsumer = REACT_CONTEXT_TYPE;
	    var ContextProvider = REACT_PROVIDER_TYPE;
	    var Element = REACT_ELEMENT_TYPE;
	    var ForwardRef = REACT_FORWARD_REF_TYPE;
	    var Fragment = REACT_FRAGMENT_TYPE;
	    var Lazy = REACT_LAZY_TYPE;
	    var Memo = REACT_MEMO_TYPE;
	    var Portal = REACT_PORTAL_TYPE;
	    var Profiler = REACT_PROFILER_TYPE;
	    var StrictMode = REACT_STRICT_MODE_TYPE;
	    var Suspense = REACT_SUSPENSE_TYPE;
	    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	    function isAsyncMode(object) {
	      {
	        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	        }
	      }
	      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	    }

	    function isConcurrentMode(object) {
	      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	    }

	    function isContextConsumer(object) {
	      return typeOf(object) === REACT_CONTEXT_TYPE;
	    }

	    function isContextProvider(object) {
	      return typeOf(object) === REACT_PROVIDER_TYPE;
	    }

	    function isElement(object) {
	      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	    }

	    function isForwardRef(object) {
	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
	    }

	    function isFragment(object) {
	      return typeOf(object) === REACT_FRAGMENT_TYPE;
	    }

	    function isLazy(object) {
	      return typeOf(object) === REACT_LAZY_TYPE;
	    }

	    function isMemo(object) {
	      return typeOf(object) === REACT_MEMO_TYPE;
	    }

	    function isPortal(object) {
	      return typeOf(object) === REACT_PORTAL_TYPE;
	    }

	    function isProfiler(object) {
	      return typeOf(object) === REACT_PROFILER_TYPE;
	    }

	    function isStrictMode(object) {
	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
	    }

	    function isSuspense(object) {
	      return typeOf(object) === REACT_SUSPENSE_TYPE;
	    }

	    reactIs_development.AsyncMode = AsyncMode;
	    reactIs_development.ConcurrentMode = ConcurrentMode;
	    reactIs_development.ContextConsumer = ContextConsumer;
	    reactIs_development.ContextProvider = ContextProvider;
	    reactIs_development.Element = Element;
	    reactIs_development.ForwardRef = ForwardRef;
	    reactIs_development.Fragment = Fragment;
	    reactIs_development.Lazy = Lazy;
	    reactIs_development.Memo = Memo;
	    reactIs_development.Portal = Portal;
	    reactIs_development.Profiler = Profiler;
	    reactIs_development.StrictMode = StrictMode;
	    reactIs_development.Suspense = Suspense;
	    reactIs_development.isAsyncMode = isAsyncMode;
	    reactIs_development.isConcurrentMode = isConcurrentMode;
	    reactIs_development.isContextConsumer = isContextConsumer;
	    reactIs_development.isContextProvider = isContextProvider;
	    reactIs_development.isElement = isElement;
	    reactIs_development.isForwardRef = isForwardRef;
	    reactIs_development.isFragment = isFragment;
	    reactIs_development.isLazy = isLazy;
	    reactIs_development.isMemo = isMemo;
	    reactIs_development.isPortal = isPortal;
	    reactIs_development.isProfiler = isProfiler;
	    reactIs_development.isStrictMode = isStrictMode;
	    reactIs_development.isSuspense = isSuspense;
	    reactIs_development.isValidElementType = isValidElementType;
	    reactIs_development.typeOf = typeOf;
	  })();
	}
	return reactIs_development;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs.exports;
	hasRequiredReactIs = 1;
	(function (module) {

		if (process.env.NODE_ENV === 'production') {
		  module.exports = requireReactIs_production_min();
		} else {
		  module.exports = requireReactIs_development();
		}
} (reactIs));
	return reactIs.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;
	/* eslint-disable no-unused-vars */

	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
	  if (val === null || val === undefined) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }

	  return Object(val);
	}

	function shouldUseNative() {
	  try {
	    if (!Object.assign) {
	      return false;
	    } // Detect buggy property enumeration order in older V8 versions.
	    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


	    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

	    test1[5] = 'de';

	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
	      return false;
	    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


	    var test2 = {};

	    for (var i = 0; i < 10; i++) {
	      test2['_' + String.fromCharCode(i)] = i;
	    }

	    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
	      return test2[n];
	    });

	    if (order2.join('') !== '0123456789') {
	      return false;
	    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


	    var test3 = {};
	    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
	      test3[letter] = letter;
	    });

	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
	      return false;
	    }

	    return true;
	  } catch (err) {
	    // We don't expect any of the above to throw, but better to be safe.
	    return false;
	  }
	}

	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	  var from;
	  var to = toObject(target);
	  var symbols;

	  for (var s = 1; s < arguments.length; s++) {
	    from = Object(arguments[s]);

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }

	    if (getOwnPropertySymbols) {
	      symbols = getOwnPropertySymbols(from);

	      for (var i = 0; i < symbols.length; i++) {
	        if (propIsEnumerable.call(from, symbols[i])) {
	          to[symbols[i]] = from[symbols[i]];
	        }
	      }
	    }
	  }

	  return to;
	};
	return objectAssign;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

var has$2;
var hasRequiredHas;

function requireHas () {
	if (hasRequiredHas) return has$2;
	hasRequiredHas = 1;
	has$2 = Function.call.bind(Object.prototype.hasOwnProperty);
	return has$2;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var checkPropTypes_1;
var hasRequiredCheckPropTypes;

function requireCheckPropTypes () {
	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
	hasRequiredCheckPropTypes = 1;

	var printWarning = function () {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = requireReactPropTypesSecret();

	  var loggedTypeFailures = {};

	  var has = requireHas();

	  printWarning = function (text) {
	    var message = 'Warning: ' + text;

	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {
	      /**/
	    }
	  };
	}
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */


	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }

	        if (error && !(error instanceof Error)) {
	          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
	        }

	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	          var stack = getStack ? getStack() : '';
	          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
	        }
	      }
	    }
	  }
	}
	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */


	checkPropTypes.resetWarningCache = function () {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	};

	checkPropTypes_1 = checkPropTypes;
	return checkPropTypes_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;

function requireFactoryWithTypeCheckers () {
	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
	hasRequiredFactoryWithTypeCheckers = 1;

	var ReactIs = requireReactIs();

	var assign = requireObjectAssign();

	var ReactPropTypesSecret = requireReactPropTypesSecret();

	var has = requireHas();

	var checkPropTypes = requireCheckPropTypes();

	var printWarning = function () {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function (text) {
	    var message = 'Warning: ' + text;

	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */

	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */


	  var ANONYMOUS = '<<anonymous>>'; // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker
	  };
	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */

	  /*eslint-disable no-self-compare*/

	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */


	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data : {};
	    this.stack = '';
	  } // Make `instanceof Error` still work for returned errors.


	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }

	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;

	          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
	          manualPropTypeWarningCount < 3) {
	            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }

	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }

	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }

	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);

	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
	          expectedType: expectedType
	        });
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }

	      var propValue = props[propName];

	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }

	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

	        if (error instanceof Error) {
	          return error;
	        }
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];

	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];

	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }

	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];

	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);

	        if (type === 'symbol') {
	          return String(value);
	        }

	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }

	      var propValue = props[propName];
	      var propType = getPropType(propValue);

	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }

	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];

	      if (typeof checker !== 'function') {
	        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];

	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);

	        if (checkerResult == null) {
	          return null;
	        }

	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }

	      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);

	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }

	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];

	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }

	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

	        if (error) {
	          return error;
	        }
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);

	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      } // We need to check all keys in case some are required but missing from props.


	      var allKeys = assign({}, props[propName], shapeTypes);

	      for (var key in allKeys) {
	        var checker = shapeTypes[key];

	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }

	        if (!checker) {
	          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
	        }

	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

	        if (error) {
	          return error;
	        }
	      }

	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;

	      case 'boolean':
	        return !propValue;

	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }

	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);

	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;

	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;

	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;

	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    } // falsy value can't be a Symbol


	    if (!propValue) {
	      return false;
	    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    } // Fallback for non-spec compliant Symbols which are polyfilled.


	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  } // Equivalent of `typeof` but with special handling for array and regexp.


	  function getPropType(propValue) {
	    var propType = typeof propValue;

	    if (Array.isArray(propValue)) {
	      return 'array';
	    }

	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }

	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }

	    return propType;
	  } // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.


	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }

	    var propType = getPropType(propValue);

	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }

	    return propType;
	  } // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"


	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);

	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;

	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;

	      default:
	        return type;
	    }
	  } // Returns class name of the object, if any.


	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }

	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	  return ReactPropTypes;
	};
	return factoryWithTypeCheckers;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;

function requireFactoryWithThrowingShims () {
	if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
	hasRequiredFactoryWithThrowingShims = 1;

	var ReactPropTypesSecret = requireReactPropTypesSecret();

	function emptyFunction() {}

	function emptyFunctionWithReset() {}

	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	factoryWithThrowingShims = function () {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }

	    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	    err.name = 'Invariant Violation';
	    throw err;
	  }
	  shim.isRequired = shim;

	  function getShim() {
	    return shim;
	  }
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

	  var ReactPropTypes = {
	    array: shim,
	    bigint: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,
	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,
	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };
	  ReactPropTypes.PropTypes = ReactPropTypes;
	  return ReactPropTypes;
	};
	return factoryWithThrowingShims;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = requireReactIs(); // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod


  var throwOnDirectAccess = true;
  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  propTypes.exports = requireFactoryWithThrowingShims()();
}

var react = {exports: {}};

var react_production_min = {};

/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_production_min;

function requireReact_production_min () {
	if (hasRequiredReact_production_min) return react_production_min;
	hasRequiredReact_production_min = 1;

	var l = requireObjectAssign(),
	    n = 60103,
	    p = 60106;

	react_production_min.Fragment = 60107;
	react_production_min.StrictMode = 60108;
	react_production_min.Profiler = 60114;
	var q = 60109,
	    r = 60110,
	    t = 60112;
	react_production_min.Suspense = 60113;
	var u = 60115,
	    v = 60116;

	if ("function" === typeof Symbol && Symbol.for) {
	  var w = Symbol.for;
	  n = w("react.element");
	  p = w("react.portal");
	  react_production_min.Fragment = w("react.fragment");
	  react_production_min.StrictMode = w("react.strict_mode");
	  react_production_min.Profiler = w("react.profiler");
	  q = w("react.provider");
	  r = w("react.context");
	  t = w("react.forward_ref");
	  react_production_min.Suspense = w("react.suspense");
	  u = w("react.memo");
	  v = w("react.lazy");
	}

	var x = "function" === typeof Symbol && Symbol.iterator;

	function y(a) {
	  if (null === a || "object" !== typeof a) return null;
	  a = x && a[x] || a["@@iterator"];
	  return "function" === typeof a ? a : null;
	}

	function z(a) {
	  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);

	  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
	}

	var A = {
	  isMounted: function () {
	    return !1;
	  },
	  enqueueForceUpdate: function () {},
	  enqueueReplaceState: function () {},
	  enqueueSetState: function () {}
	},
	    B = {};

	function C(a, b, c) {
	  this.props = a;
	  this.context = b;
	  this.refs = B;
	  this.updater = c || A;
	}

	C.prototype.isReactComponent = {};

	C.prototype.setState = function (a, b) {
	  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(z(85));
	  this.updater.enqueueSetState(this, a, b, "setState");
	};

	C.prototype.forceUpdate = function (a) {
	  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
	};

	function D() {}

	D.prototype = C.prototype;

	function E(a, b, c) {
	  this.props = a;
	  this.context = b;
	  this.refs = B;
	  this.updater = c || A;
	}

	var F = E.prototype = new D();
	F.constructor = E;
	l(F, C.prototype);
	F.isPureReactComponent = !0;
	var G = {
	  current: null
	},
	    H = Object.prototype.hasOwnProperty,
	    I = {
	  key: !0,
	  ref: !0,
	  __self: !0,
	  __source: !0
	};

	function J(a, b, c) {
	  var e,
	      d = {},
	      k = null,
	      h = null;
	  if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);
	  var g = arguments.length - 2;
	  if (1 === g) d.children = c;else if (1 < g) {
	    for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];

	    d.children = f;
	  }
	  if (a && a.defaultProps) for (e in g = a.defaultProps, g) void 0 === d[e] && (d[e] = g[e]);
	  return {
	    $$typeof: n,
	    type: a,
	    key: k,
	    ref: h,
	    props: d,
	    _owner: G.current
	  };
	}

	function K(a, b) {
	  return {
	    $$typeof: n,
	    type: a.type,
	    key: b,
	    ref: a.ref,
	    props: a.props,
	    _owner: a._owner
	  };
	}

	function L(a) {
	  return "object" === typeof a && null !== a && a.$$typeof === n;
	}

	function escape(a) {
	  var b = {
	    "=": "=0",
	    ":": "=2"
	  };
	  return "$" + a.replace(/[=:]/g, function (a) {
	    return b[a];
	  });
	}

	var M = /\/+/g;

	function N(a, b) {
	  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
	}

	function O(a, b, c, e, d) {
	  var k = typeof a;
	  if ("undefined" === k || "boolean" === k) a = null;
	  var h = !1;
	  if (null === a) h = !0;else switch (k) {
	    case "string":
	    case "number":
	      h = !0;
	      break;

	    case "object":
	      switch (a.$$typeof) {
	        case n:
	        case p:
	          h = !0;
	      }

	  }
	  if (h) return h = a, d = d(h), a = "" === e ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", null != a && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function (a) {
	    return a;
	  })) : null != d && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;
	  h = 0;
	  e = "" === e ? "." : e + ":";
	  if (Array.isArray(a)) for (var g = 0; g < a.length; g++) {
	    k = a[g];
	    var f = e + N(k, g);
	    h += O(k, b, c, f, d);
	  } else if (f = y(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);else if ("object" === k) throw b = "" + a, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
	  return h;
	}

	function P(a, b, c) {
	  if (null == a) return a;
	  var e = [],
	      d = 0;
	  O(a, e, "", "", function (a) {
	    return b.call(c, a, d++);
	  });
	  return e;
	}

	function Q(a) {
	  if (-1 === a._status) {
	    var b = a._result;
	    b = b();
	    a._status = 0;
	    a._result = b;
	    b.then(function (b) {
	      0 === a._status && (b = b.default, a._status = 1, a._result = b);
	    }, function (b) {
	      0 === a._status && (a._status = 2, a._result = b);
	    });
	  }

	  if (1 === a._status) return a._result;
	  throw a._result;
	}

	var R = {
	  current: null
	};

	function S() {
	  var a = R.current;
	  if (null === a) throw Error(z(321));
	  return a;
	}

	var T = {
	  ReactCurrentDispatcher: R,
	  ReactCurrentBatchConfig: {
	    transition: 0
	  },
	  ReactCurrentOwner: G,
	  IsSomeRendererActing: {
	    current: !1
	  },
	  assign: l
	};
	react_production_min.Children = {
	  map: P,
	  forEach: function (a, b, c) {
	    P(a, function () {
	      b.apply(this, arguments);
	    }, c);
	  },
	  count: function (a) {
	    var b = 0;
	    P(a, function () {
	      b++;
	    });
	    return b;
	  },
	  toArray: function (a) {
	    return P(a, function (a) {
	      return a;
	    }) || [];
	  },
	  only: function (a) {
	    if (!L(a)) throw Error(z(143));
	    return a;
	  }
	};
	react_production_min.Component = C;
	react_production_min.PureComponent = E;
	react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;

	react_production_min.cloneElement = function (a, b, c) {
	  if (null === a || void 0 === a) throw Error(z(267, a));
	  var e = l({}, a.props),
	      d = a.key,
	      k = a.ref,
	      h = a._owner;

	  if (null != b) {
	    void 0 !== b.ref && (k = b.ref, h = G.current);
	    void 0 !== b.key && (d = "" + b.key);
	    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

	    for (f in b) H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
	  }

	  var f = arguments.length - 2;
	  if (1 === f) e.children = c;else if (1 < f) {
	    g = Array(f);

	    for (var m = 0; m < f; m++) g[m] = arguments[m + 2];

	    e.children = g;
	  }
	  return {
	    $$typeof: n,
	    type: a.type,
	    key: d,
	    ref: k,
	    props: e,
	    _owner: h
	  };
	};

	react_production_min.createContext = function (a, b) {
	  void 0 === b && (b = null);
	  a = {
	    $$typeof: r,
	    _calculateChangedBits: b,
	    _currentValue: a,
	    _currentValue2: a,
	    _threadCount: 0,
	    Provider: null,
	    Consumer: null
	  };
	  a.Provider = {
	    $$typeof: q,
	    _context: a
	  };
	  return a.Consumer = a;
	};

	react_production_min.createElement = J;

	react_production_min.createFactory = function (a) {
	  var b = J.bind(null, a);
	  b.type = a;
	  return b;
	};

	react_production_min.createRef = function () {
	  return {
	    current: null
	  };
	};

	react_production_min.forwardRef = function (a) {
	  return {
	    $$typeof: t,
	    render: a
	  };
	};

	react_production_min.isValidElement = L;

	react_production_min.lazy = function (a) {
	  return {
	    $$typeof: v,
	    _payload: {
	      _status: -1,
	      _result: a
	    },
	    _init: Q
	  };
	};

	react_production_min.memo = function (a, b) {
	  return {
	    $$typeof: u,
	    type: a,
	    compare: void 0 === b ? null : b
	  };
	};

	react_production_min.useCallback = function (a, b) {
	  return S().useCallback(a, b);
	};

	react_production_min.useContext = function (a, b) {
	  return S().useContext(a, b);
	};

	react_production_min.useDebugValue = function () {};

	react_production_min.useEffect = function (a, b) {
	  return S().useEffect(a, b);
	};

	react_production_min.useImperativeHandle = function (a, b, c) {
	  return S().useImperativeHandle(a, b, c);
	};

	react_production_min.useLayoutEffect = function (a, b) {
	  return S().useLayoutEffect(a, b);
	};

	react_production_min.useMemo = function (a, b) {
	  return S().useMemo(a, b);
	};

	react_production_min.useReducer = function (a, b, c) {
	  return S().useReducer(a, b, c);
	};

	react_production_min.useRef = function (a) {
	  return S().useRef(a);
	};

	react_production_min.useState = function (a) {
	  return S().useState(a);
	};

	react_production_min.version = "17.0.2";
	return react_production_min;
}

var react_development = {};

/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_development;

function requireReact_development () {
	if (hasRequiredReact_development) return react_development;
	hasRequiredReact_development = 1;
	(function (exports) {

		if (process.env.NODE_ENV !== "production") {
		  (function () {

		    var _assign = requireObjectAssign(); // TODO: this is special because it gets imported during build.


		    var ReactVersion = '17.0.2'; // ATTENTION
		    // When adding new symbols to this file,
		    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
		    // nor polyfill, then a plain number is used for performance.

		    var REACT_ELEMENT_TYPE = 0xeac7;
		    var REACT_PORTAL_TYPE = 0xeaca;
		    exports.Fragment = 0xeacb;
		    exports.StrictMode = 0xeacc;
		    exports.Profiler = 0xead2;
		    var REACT_PROVIDER_TYPE = 0xeacd;
		    var REACT_CONTEXT_TYPE = 0xeace;
		    var REACT_FORWARD_REF_TYPE = 0xead0;
		    exports.Suspense = 0xead1;
		    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
		    var REACT_MEMO_TYPE = 0xead3;
		    var REACT_LAZY_TYPE = 0xead4;
		    var REACT_BLOCK_TYPE = 0xead9;
		    var REACT_SERVER_BLOCK_TYPE = 0xeada;
		    var REACT_FUNDAMENTAL_TYPE = 0xead5;
		    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
		    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

		    if (typeof Symbol === 'function' && Symbol.for) {
		      var symbolFor = Symbol.for;
		      REACT_ELEMENT_TYPE = symbolFor('react.element');
		      REACT_PORTAL_TYPE = symbolFor('react.portal');
		      exports.Fragment = symbolFor('react.fragment');
		      exports.StrictMode = symbolFor('react.strict_mode');
		      exports.Profiler = symbolFor('react.profiler');
		      REACT_PROVIDER_TYPE = symbolFor('react.provider');
		      REACT_CONTEXT_TYPE = symbolFor('react.context');
		      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
		      exports.Suspense = symbolFor('react.suspense');
		      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
		      REACT_MEMO_TYPE = symbolFor('react.memo');
		      REACT_LAZY_TYPE = symbolFor('react.lazy');
		      REACT_BLOCK_TYPE = symbolFor('react.block');
		      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
		      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
		      symbolFor('react.scope');
		      symbolFor('react.opaque.id');
		      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
		      symbolFor('react.offscreen');
		      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
		    }

		    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		    var FAUX_ITERATOR_SYMBOL = '@@iterator';

		    function getIteratorFn(maybeIterable) {
		      if (maybeIterable === null || typeof maybeIterable !== 'object') {
		        return null;
		      }

		      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

		      if (typeof maybeIterator === 'function') {
		        return maybeIterator;
		      }

		      return null;
		    }
		    /**
		     * Keeps track of the current dispatcher.
		     */


		    var ReactCurrentDispatcher = {
		      /**
		       * @internal
		       * @type {ReactComponent}
		       */
		      current: null
		    };
		    /**
		     * Keeps track of the current batch's configuration such as how long an update
		     * should suspend for if it needs to.
		     */

		    var ReactCurrentBatchConfig = {
		      transition: 0
		    };
		    /**
		     * Keeps track of the current owner.
		     *
		     * The current owner is the component who should own any components that are
		     * currently being constructed.
		     */

		    var ReactCurrentOwner = {
		      /**
		       * @internal
		       * @type {ReactComponent}
		       */
		      current: null
		    };
		    var ReactDebugCurrentFrame = {};
		    var currentExtraStackFrame = null;

		    function setExtraStackFrame(stack) {
		      {
		        currentExtraStackFrame = stack;
		      }
		    }

		    {
		      ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
		        {
		          currentExtraStackFrame = stack;
		        }
		      }; // Stack implementation injected by the current renderer.


		      ReactDebugCurrentFrame.getCurrentStack = null;

		      ReactDebugCurrentFrame.getStackAddendum = function () {
		        var stack = ''; // Add an extra top frame while an element is being validated

		        if (currentExtraStackFrame) {
		          stack += currentExtraStackFrame;
		        } // Delegate to the injected renderer-specific implementation


		        var impl = ReactDebugCurrentFrame.getCurrentStack;

		        if (impl) {
		          stack += impl() || '';
		        }

		        return stack;
		      };
		    }
		    /**
		     * Used by act() to track whether you're inside an act() scope.
		     */

		    var IsSomeRendererActing = {
		      current: false
		    };
		    var ReactSharedInternals = {
		      ReactCurrentDispatcher: ReactCurrentDispatcher,
		      ReactCurrentBatchConfig: ReactCurrentBatchConfig,
		      ReactCurrentOwner: ReactCurrentOwner,
		      IsSomeRendererActing: IsSomeRendererActing,
		      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
		      assign: _assign
		    };
		    {
		      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
		    } // by calls to these methods by a Babel plugin.
		    //
		    // In PROD (or in packages without access to React internals),
		    // they are left as they are instead.

		    function warn(format) {
		      {
		        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		          args[_key - 1] = arguments[_key];
		        }

		        printWarning('warn', format, args);
		      }
		    }

		    function error(format) {
		      {
		        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		          args[_key2 - 1] = arguments[_key2];
		        }

		        printWarning('error', format, args);
		      }
		    }

		    function printWarning(level, format, args) {
		      // When changing this logic, you might want to also
		      // update consoleWithStackDev.www.js as well.
		      {
		        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		        var stack = ReactDebugCurrentFrame.getStackAddendum();

		        if (stack !== '') {
		          format += '%s';
		          args = args.concat([stack]);
		        }

		        var argsWithFormat = args.map(function (item) {
		          return '' + item;
		        }); // Careful: RN currently depends on this prefix

		        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		        // breaks IE9: https://github.com/facebook/react/issues/13610
		        // eslint-disable-next-line react-internal/no-production-logging

		        Function.prototype.apply.call(console[level], console, argsWithFormat);
		      }
		    }

		    var didWarnStateUpdateForUnmountedComponent = {};

		    function warnNoop(publicInstance, callerName) {
		      {
		        var _constructor = publicInstance.constructor;
		        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
		        var warningKey = componentName + "." + callerName;

		        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
		          return;
		        }

		        error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
		        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
		      }
		    }
		    /**
		     * This is the abstract API for an update queue.
		     */


		    var ReactNoopUpdateQueue = {
		      /**
		       * Checks whether or not this composite component is mounted.
		       * @param {ReactClass} publicInstance The instance we want to test.
		       * @return {boolean} True if mounted, false otherwise.
		       * @protected
		       * @final
		       */
		      isMounted: function (publicInstance) {
		        return false;
		      },

		      /**
		       * Forces an update. This should only be invoked when it is known with
		       * certainty that we are **not** in a DOM transaction.
		       *
		       * You may want to call this when you know that some deeper aspect of the
		       * component's state has changed but `setState` was not called.
		       *
		       * This will not invoke `shouldComponentUpdate`, but it will invoke
		       * `componentWillUpdate` and `componentDidUpdate`.
		       *
		       * @param {ReactClass} publicInstance The instance that should rerender.
		       * @param {?function} callback Called after component is updated.
		       * @param {?string} callerName name of the calling function in the public API.
		       * @internal
		       */
		      enqueueForceUpdate: function (publicInstance, callback, callerName) {
		        warnNoop(publicInstance, 'forceUpdate');
		      },

		      /**
		       * Replaces all of the state. Always use this or `setState` to mutate state.
		       * You should treat `this.state` as immutable.
		       *
		       * There is no guarantee that `this.state` will be immediately updated, so
		       * accessing `this.state` after calling this method may return the old value.
		       *
		       * @param {ReactClass} publicInstance The instance that should rerender.
		       * @param {object} completeState Next state.
		       * @param {?function} callback Called after component is updated.
		       * @param {?string} callerName name of the calling function in the public API.
		       * @internal
		       */
		      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
		        warnNoop(publicInstance, 'replaceState');
		      },

		      /**
		       * Sets a subset of the state. This only exists because _pendingState is
		       * internal. This provides a merging strategy that is not available to deep
		       * properties which is confusing. TODO: Expose pendingState or don't use it
		       * during the merge.
		       *
		       * @param {ReactClass} publicInstance The instance that should rerender.
		       * @param {object} partialState Next partial state to be merged with state.
		       * @param {?function} callback Called after component is updated.
		       * @param {?string} Name of the calling function in the public API.
		       * @internal
		       */
		      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
		        warnNoop(publicInstance, 'setState');
		      }
		    };
		    var emptyObject = {};
		    {
		      Object.freeze(emptyObject);
		    }
		    /**
		     * Base class helpers for the updating state of a component.
		     */

		    function Component(props, context, updater) {
		      this.props = props;
		      this.context = context; // If a component has string refs, we will assign a different object later.

		      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
		      // renderer.

		      this.updater = updater || ReactNoopUpdateQueue;
		    }

		    Component.prototype.isReactComponent = {};
		    /**
		     * Sets a subset of the state. Always use this to mutate
		     * state. You should treat `this.state` as immutable.
		     *
		     * There is no guarantee that `this.state` will be immediately updated, so
		     * accessing `this.state` after calling this method may return the old value.
		     *
		     * There is no guarantee that calls to `setState` will run synchronously,
		     * as they may eventually be batched together.  You can provide an optional
		     * callback that will be executed when the call to setState is actually
		     * completed.
		     *
		     * When a function is provided to setState, it will be called at some point in
		     * the future (not synchronously). It will be called with the up to date
		     * component arguments (state, props, context). These values can be different
		     * from this.* because your function may be called after receiveProps but before
		     * shouldComponentUpdate, and this new state, props, and context will not yet be
		     * assigned to this.
		     *
		     * @param {object|function} partialState Next partial state or function to
		     *        produce next partial state to be merged with current state.
		     * @param {?function} callback Called after state is updated.
		     * @final
		     * @protected
		     */

		    Component.prototype.setState = function (partialState, callback) {
		      if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
		        {
		          throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
		        }
		      }

		      this.updater.enqueueSetState(this, partialState, callback, 'setState');
		    };
		    /**
		     * Forces an update. This should only be invoked when it is known with
		     * certainty that we are **not** in a DOM transaction.
		     *
		     * You may want to call this when you know that some deeper aspect of the
		     * component's state has changed but `setState` was not called.
		     *
		     * This will not invoke `shouldComponentUpdate`, but it will invoke
		     * `componentWillUpdate` and `componentDidUpdate`.
		     *
		     * @param {?function} callback Called after update is complete.
		     * @final
		     * @protected
		     */


		    Component.prototype.forceUpdate = function (callback) {
		      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
		    };
		    /**
		     * Deprecated APIs. These APIs used to exist on classic React classes but since
		     * we would like to deprecate them, we're not going to move them over to this
		     * modern base class. Instead, we define a getter that warns if it's accessed.
		     */


		    {
		      var deprecatedAPIs = {
		        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
		        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
		      };

		      var defineDeprecationWarning = function (methodName, info) {
		        Object.defineProperty(Component.prototype, methodName, {
		          get: function () {
		            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
		            return undefined;
		          }
		        });
		      };

		      for (var fnName in deprecatedAPIs) {
		        if (deprecatedAPIs.hasOwnProperty(fnName)) {
		          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
		        }
		      }
		    }

		    function ComponentDummy() {}

		    ComponentDummy.prototype = Component.prototype;
		    /**
		     * Convenience component with default shallow equality check for sCU.
		     */

		    function PureComponent(props, context, updater) {
		      this.props = props;
		      this.context = context; // If a component has string refs, we will assign a different object later.

		      this.refs = emptyObject;
		      this.updater = updater || ReactNoopUpdateQueue;
		    }

		    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
		    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

		    _assign(pureComponentPrototype, Component.prototype);

		    pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

		    function createRef() {
		      var refObject = {
		        current: null
		      };
		      {
		        Object.seal(refObject);
		      }
		      return refObject;
		    }

		    function getWrappedName(outerType, innerType, wrapperName) {
		      var functionName = innerType.displayName || innerType.name || '';
		      return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
		    }

		    function getContextName(type) {
		      return type.displayName || 'Context';
		    }

		    function getComponentName(type) {
		      if (type == null) {
		        // Host root, text node or just invalid type.
		        return null;
		      }

		      {
		        if (typeof type.tag === 'number') {
		          error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
		        }
		      }

		      if (typeof type === 'function') {
		        return type.displayName || type.name || null;
		      }

		      if (typeof type === 'string') {
		        return type;
		      }

		      switch (type) {
		        case exports.Fragment:
		          return 'Fragment';

		        case REACT_PORTAL_TYPE:
		          return 'Portal';

		        case exports.Profiler:
		          return 'Profiler';

		        case exports.StrictMode:
		          return 'StrictMode';

		        case exports.Suspense:
		          return 'Suspense';

		        case REACT_SUSPENSE_LIST_TYPE:
		          return 'SuspenseList';
		      }

		      if (typeof type === 'object') {
		        switch (type.$$typeof) {
		          case REACT_CONTEXT_TYPE:
		            var context = type;
		            return getContextName(context) + '.Consumer';

		          case REACT_PROVIDER_TYPE:
		            var provider = type;
		            return getContextName(provider._context) + '.Provider';

		          case REACT_FORWARD_REF_TYPE:
		            return getWrappedName(type, type.render, 'ForwardRef');

		          case REACT_MEMO_TYPE:
		            return getComponentName(type.type);

		          case REACT_BLOCK_TYPE:
		            return getComponentName(type._render);

		          case REACT_LAZY_TYPE:
		            {
		              var lazyComponent = type;
		              var payload = lazyComponent._payload;
		              var init = lazyComponent._init;

		              try {
		                return getComponentName(init(payload));
		              } catch (x) {
		                return null;
		              }
		            }
		        }
		      }

		      return null;
		    }

		    var hasOwnProperty = Object.prototype.hasOwnProperty;
		    var RESERVED_PROPS = {
		      key: true,
		      ref: true,
		      __self: true,
		      __source: true
		    };
		    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
		    {
		      didWarnAboutStringRefs = {};
		    }

		    function hasValidRef(config) {
		      {
		        if (hasOwnProperty.call(config, 'ref')) {
		          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

		          if (getter && getter.isReactWarning) {
		            return false;
		          }
		        }
		      }
		      return config.ref !== undefined;
		    }

		    function hasValidKey(config) {
		      {
		        if (hasOwnProperty.call(config, 'key')) {
		          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

		          if (getter && getter.isReactWarning) {
		            return false;
		          }
		        }
		      }
		      return config.key !== undefined;
		    }

		    function defineKeyPropWarningGetter(props, displayName) {
		      var warnAboutAccessingKey = function () {
		        {
		          if (!specialPropKeyWarningShown) {
		            specialPropKeyWarningShown = true;
		            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		          }
		        }
		      };

		      warnAboutAccessingKey.isReactWarning = true;
		      Object.defineProperty(props, 'key', {
		        get: warnAboutAccessingKey,
		        configurable: true
		      });
		    }

		    function defineRefPropWarningGetter(props, displayName) {
		      var warnAboutAccessingRef = function () {
		        {
		          if (!specialPropRefWarningShown) {
		            specialPropRefWarningShown = true;
		            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		          }
		        }
		      };

		      warnAboutAccessingRef.isReactWarning = true;
		      Object.defineProperty(props, 'ref', {
		        get: warnAboutAccessingRef,
		        configurable: true
		      });
		    }

		    function warnIfStringRefCannotBeAutoConverted(config) {
		      {
		        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
		          var componentName = getComponentName(ReactCurrentOwner.current.type);

		          if (!didWarnAboutStringRefs[componentName]) {
		            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
		            didWarnAboutStringRefs[componentName] = true;
		          }
		        }
		      }
		    }
		    /**
		     * Factory method to create a new React element. This no longer adheres to
		     * the class pattern, so do not use new to call it. Also, instanceof check
		     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
		     * if something is a React Element.
		     *
		     * @param {*} type
		     * @param {*} props
		     * @param {*} key
		     * @param {string|object} ref
		     * @param {*} owner
		     * @param {*} self A *temporary* helper to detect places where `this` is
		     * different from the `owner` when React.createElement is called, so that we
		     * can warn. We want to get rid of owner and replace string `ref`s with arrow
		     * functions, and as long as `this` and owner are the same, there will be no
		     * change in behavior.
		     * @param {*} source An annotation object (added by a transpiler or otherwise)
		     * indicating filename, line number, and/or other information.
		     * @internal
		     */


		    var ReactElement = function (type, key, ref, self, source, owner, props) {
		      var element = {
		        // This tag allows us to uniquely identify this as a React Element
		        $$typeof: REACT_ELEMENT_TYPE,
		        // Built-in properties that belong on the element
		        type: type,
		        key: key,
		        ref: ref,
		        props: props,
		        // Record the component responsible for creating this element.
		        _owner: owner
		      };
		      {
		        // The validation flag is currently mutative. We put it on
		        // an external backing store so that we can freeze the whole object.
		        // This can be replaced with a WeakMap once they are implemented in
		        // commonly used development environments.
		        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
		        // the validation flag non-enumerable (where possible, which should
		        // include every environment we run tests in), so the test framework
		        // ignores it.

		        Object.defineProperty(element._store, 'validated', {
		          configurable: false,
		          enumerable: false,
		          writable: true,
		          value: false
		        }); // self and source are DEV only properties.

		        Object.defineProperty(element, '_self', {
		          configurable: false,
		          enumerable: false,
		          writable: false,
		          value: self
		        }); // Two elements created in two different places should be considered
		        // equal for testing purposes and therefore we hide it from enumeration.

		        Object.defineProperty(element, '_source', {
		          configurable: false,
		          enumerable: false,
		          writable: false,
		          value: source
		        });

		        if (Object.freeze) {
		          Object.freeze(element.props);
		          Object.freeze(element);
		        }
		      }
		      return element;
		    };
		    /**
		     * Create and return a new ReactElement of the given type.
		     * See https://reactjs.org/docs/react-api.html#createelement
		     */


		    function createElement(type, config, children) {
		      var propName; // Reserved names are extracted

		      var props = {};
		      var key = null;
		      var ref = null;
		      var self = null;
		      var source = null;

		      if (config != null) {
		        if (hasValidRef(config)) {
		          ref = config.ref;
		          {
		            warnIfStringRefCannotBeAutoConverted(config);
		          }
		        }

		        if (hasValidKey(config)) {
		          key = '' + config.key;
		        }

		        self = config.__self === undefined ? null : config.__self;
		        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

		        for (propName in config) {
		          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		            props[propName] = config[propName];
		          }
		        }
		      } // Children can be more than one argument, and those are transferred onto
		      // the newly allocated props object.


		      var childrenLength = arguments.length - 2;

		      if (childrenLength === 1) {
		        props.children = children;
		      } else if (childrenLength > 1) {
		        var childArray = Array(childrenLength);

		        for (var i = 0; i < childrenLength; i++) {
		          childArray[i] = arguments[i + 2];
		        }

		        {
		          if (Object.freeze) {
		            Object.freeze(childArray);
		          }
		        }
		        props.children = childArray;
		      } // Resolve default props


		      if (type && type.defaultProps) {
		        var defaultProps = type.defaultProps;

		        for (propName in defaultProps) {
		          if (props[propName] === undefined) {
		            props[propName] = defaultProps[propName];
		          }
		        }
		      }

		      {
		        if (key || ref) {
		          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

		          if (key) {
		            defineKeyPropWarningGetter(props, displayName);
		          }

		          if (ref) {
		            defineRefPropWarningGetter(props, displayName);
		          }
		        }
		      }
		      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
		    }

		    function cloneAndReplaceKey(oldElement, newKey) {
		      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
		      return newElement;
		    }
		    /**
		     * Clone and return a new ReactElement using element as the starting point.
		     * See https://reactjs.org/docs/react-api.html#cloneelement
		     */


		    function cloneElement(element, config, children) {
		      if (!!(element === null || element === undefined)) {
		        {
		          throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
		        }
		      }

		      var propName; // Original props are copied

		      var props = _assign({}, element.props); // Reserved names are extracted


		      var key = element.key;
		      var ref = element.ref; // Self is preserved since the owner is preserved.

		      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
		      // transpiler, and the original source is probably a better indicator of the
		      // true owner.

		      var source = element._source; // Owner will be preserved, unless ref is overridden

		      var owner = element._owner;

		      if (config != null) {
		        if (hasValidRef(config)) {
		          // Silently steal the ref from the parent.
		          ref = config.ref;
		          owner = ReactCurrentOwner.current;
		        }

		        if (hasValidKey(config)) {
		          key = '' + config.key;
		        } // Remaining properties override existing props


		        var defaultProps;

		        if (element.type && element.type.defaultProps) {
		          defaultProps = element.type.defaultProps;
		        }

		        for (propName in config) {
		          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		            if (config[propName] === undefined && defaultProps !== undefined) {
		              // Resolve default props
		              props[propName] = defaultProps[propName];
		            } else {
		              props[propName] = config[propName];
		            }
		          }
		        }
		      } // Children can be more than one argument, and those are transferred onto
		      // the newly allocated props object.


		      var childrenLength = arguments.length - 2;

		      if (childrenLength === 1) {
		        props.children = children;
		      } else if (childrenLength > 1) {
		        var childArray = Array(childrenLength);

		        for (var i = 0; i < childrenLength; i++) {
		          childArray[i] = arguments[i + 2];
		        }

		        props.children = childArray;
		      }

		      return ReactElement(element.type, key, ref, self, source, owner, props);
		    }
		    /**
		     * Verifies the object is a ReactElement.
		     * See https://reactjs.org/docs/react-api.html#isvalidelement
		     * @param {?object} object
		     * @return {boolean} True if `object` is a ReactElement.
		     * @final
		     */


		    function isValidElement(object) {
		      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		    }

		    var SEPARATOR = '.';
		    var SUBSEPARATOR = ':';
		    /**
		     * Escape and wrap key so it is safe to use as a reactid
		     *
		     * @param {string} key to be escaped.
		     * @return {string} the escaped key.
		     */

		    function escape(key) {
		      var escapeRegex = /[=:]/g;
		      var escaperLookup = {
		        '=': '=0',
		        ':': '=2'
		      };
		      var escapedString = key.replace(escapeRegex, function (match) {
		        return escaperLookup[match];
		      });
		      return '$' + escapedString;
		    }
		    /**
		     * TODO: Test that a single child and an array with one item have the same key
		     * pattern.
		     */


		    var didWarnAboutMaps = false;
		    var userProvidedKeyEscapeRegex = /\/+/g;

		    function escapeUserProvidedKey(text) {
		      return text.replace(userProvidedKeyEscapeRegex, '$&/');
		    }
		    /**
		     * Generate a key string that identifies a element within a set.
		     *
		     * @param {*} element A element that could contain a manual key.
		     * @param {number} index Index that is used if a manual key is not provided.
		     * @return {string}
		     */


		    function getElementKey(element, index) {
		      // Do some typechecking here since we call this blindly. We want to ensure
		      // that we don't block potential future ES APIs.
		      if (typeof element === 'object' && element !== null && element.key != null) {
		        // Explicit key
		        return escape('' + element.key);
		      } // Implicit key determined by the index in the set


		      return index.toString(36);
		    }

		    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
		      var type = typeof children;

		      if (type === 'undefined' || type === 'boolean') {
		        // All of the above are perceived as null.
		        children = null;
		      }

		      var invokeCallback = false;

		      if (children === null) {
		        invokeCallback = true;
		      } else {
		        switch (type) {
		          case 'string':
		          case 'number':
		            invokeCallback = true;
		            break;

		          case 'object':
		            switch (children.$$typeof) {
		              case REACT_ELEMENT_TYPE:
		              case REACT_PORTAL_TYPE:
		                invokeCallback = true;
		            }

		        }
		      }

		      if (invokeCallback) {
		        var _child = children;
		        var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
		        // so that it's consistent if the number of children grows:

		        var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

		        if (Array.isArray(mappedChild)) {
		          var escapedChildKey = '';

		          if (childKey != null) {
		            escapedChildKey = escapeUserProvidedKey(childKey) + '/';
		          }

		          mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
		            return c;
		          });
		        } else if (mappedChild != null) {
		          if (isValidElement(mappedChild)) {
		            mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
		            // traverseAllChildren used to do for objects as children
		            escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
		            mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
		            escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
		          }

		          array.push(mappedChild);
		        }

		        return 1;
		      }

		      var child;
		      var nextName;
		      var subtreeCount = 0; // Count of children found in the current subtree.

		      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

		      if (Array.isArray(children)) {
		        for (var i = 0; i < children.length; i++) {
		          child = children[i];
		          nextName = nextNamePrefix + getElementKey(child, i);
		          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		        }
		      } else {
		        var iteratorFn = getIteratorFn(children);

		        if (typeof iteratorFn === 'function') {
		          var iterableChildren = children;
		          {
		            // Warn about using Maps as children
		            if (iteratorFn === iterableChildren.entries) {
		              if (!didWarnAboutMaps) {
		                warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
		              }

		              didWarnAboutMaps = true;
		            }
		          }
		          var iterator = iteratorFn.call(iterableChildren);
		          var step;
		          var ii = 0;

		          while (!(step = iterator.next()).done) {
		            child = step.value;
		            nextName = nextNamePrefix + getElementKey(child, ii++);
		            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		          }
		        } else if (type === 'object') {
		          var childrenString = '' + children;
		          {
		            {
		              throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
		            }
		          }
		        }
		      }

		      return subtreeCount;
		    }
		    /**
		     * Maps children that are typically specified as `props.children`.
		     *
		     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
		     *
		     * The provided mapFunction(child, index) will be called for each
		     * leaf child.
		     *
		     * @param {?*} children Children tree container.
		     * @param {function(*, int)} func The map function.
		     * @param {*} context Context for mapFunction.
		     * @return {object} Object containing the ordered map of results.
		     */


		    function mapChildren(children, func, context) {
		      if (children == null) {
		        return children;
		      }

		      var result = [];
		      var count = 0;
		      mapIntoArray(children, result, '', '', function (child) {
		        return func.call(context, child, count++);
		      });
		      return result;
		    }
		    /**
		     * Count the number of children that are typically specified as
		     * `props.children`.
		     *
		     * See https://reactjs.org/docs/react-api.html#reactchildrencount
		     *
		     * @param {?*} children Children tree container.
		     * @return {number} The number of children.
		     */


		    function countChildren(children) {
		      var n = 0;
		      mapChildren(children, function () {
		        n++; // Don't return anything
		      });
		      return n;
		    }
		    /**
		     * Iterates through children that are typically specified as `props.children`.
		     *
		     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
		     *
		     * The provided forEachFunc(child, index) will be called for each
		     * leaf child.
		     *
		     * @param {?*} children Children tree container.
		     * @param {function(*, int)} forEachFunc
		     * @param {*} forEachContext Context for forEachContext.
		     */


		    function forEachChildren(children, forEachFunc, forEachContext) {
		      mapChildren(children, function () {
		        forEachFunc.apply(this, arguments); // Don't return anything.
		      }, forEachContext);
		    }
		    /**
		     * Flatten a children object (typically specified as `props.children`) and
		     * return an array with appropriately re-keyed children.
		     *
		     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
		     */


		    function toArray(children) {
		      return mapChildren(children, function (child) {
		        return child;
		      }) || [];
		    }
		    /**
		     * Returns the first child in a collection of children and verifies that there
		     * is only one child in the collection.
		     *
		     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
		     *
		     * The current implementation of this function assumes that a single child gets
		     * passed without a wrapper, but the purpose of this helper function is to
		     * abstract away the particular structure of children.
		     *
		     * @param {?object} children Child collection structure.
		     * @return {ReactElement} The first and only `ReactElement` contained in the
		     * structure.
		     */


		    function onlyChild(children) {
		      if (!isValidElement(children)) {
		        {
		          throw Error("React.Children.only expected to receive a single React element child.");
		        }
		      }

		      return children;
		    }

		    function createContext(defaultValue, calculateChangedBits) {
		      if (calculateChangedBits === undefined) {
		        calculateChangedBits = null;
		      } else {
		        {
		          if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
		            error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
		          }
		        }
		      }

		      var context = {
		        $$typeof: REACT_CONTEXT_TYPE,
		        _calculateChangedBits: calculateChangedBits,
		        // As a workaround to support multiple concurrent renderers, we categorize
		        // some renderers as primary and others as secondary. We only expect
		        // there to be two concurrent renderers at most: React Native (primary) and
		        // Fabric (secondary); React DOM (primary) and React ART (secondary).
		        // Secondary renderers store their context values on separate fields.
		        _currentValue: defaultValue,
		        _currentValue2: defaultValue,
		        // Used to track how many concurrent renderers this context currently
		        // supports within in a single renderer. Such as parallel server rendering.
		        _threadCount: 0,
		        // These are circular
		        Provider: null,
		        Consumer: null
		      };
		      context.Provider = {
		        $$typeof: REACT_PROVIDER_TYPE,
		        _context: context
		      };
		      var hasWarnedAboutUsingNestedContextConsumers = false;
		      var hasWarnedAboutUsingConsumerProvider = false;
		      var hasWarnedAboutDisplayNameOnConsumer = false;
		      {
		        // A separate object, but proxies back to the original context object for
		        // backwards compatibility. It has a different $$typeof, so we can properly
		        // warn for the incorrect usage of Context as a Consumer.
		        var Consumer = {
		          $$typeof: REACT_CONTEXT_TYPE,
		          _context: context,
		          _calculateChangedBits: context._calculateChangedBits
		        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

		        Object.defineProperties(Consumer, {
		          Provider: {
		            get: function () {
		              if (!hasWarnedAboutUsingConsumerProvider) {
		                hasWarnedAboutUsingConsumerProvider = true;
		                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
		              }

		              return context.Provider;
		            },
		            set: function (_Provider) {
		              context.Provider = _Provider;
		            }
		          },
		          _currentValue: {
		            get: function () {
		              return context._currentValue;
		            },
		            set: function (_currentValue) {
		              context._currentValue = _currentValue;
		            }
		          },
		          _currentValue2: {
		            get: function () {
		              return context._currentValue2;
		            },
		            set: function (_currentValue2) {
		              context._currentValue2 = _currentValue2;
		            }
		          },
		          _threadCount: {
		            get: function () {
		              return context._threadCount;
		            },
		            set: function (_threadCount) {
		              context._threadCount = _threadCount;
		            }
		          },
		          Consumer: {
		            get: function () {
		              if (!hasWarnedAboutUsingNestedContextConsumers) {
		                hasWarnedAboutUsingNestedContextConsumers = true;
		                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
		              }

		              return context.Consumer;
		            }
		          },
		          displayName: {
		            get: function () {
		              return context.displayName;
		            },
		            set: function (displayName) {
		              if (!hasWarnedAboutDisplayNameOnConsumer) {
		                warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
		                hasWarnedAboutDisplayNameOnConsumer = true;
		              }
		            }
		          }
		        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

		        context.Consumer = Consumer;
		      }
		      {
		        context._currentRenderer = null;
		        context._currentRenderer2 = null;
		      }
		      return context;
		    }

		    var Uninitialized = -1;
		    var Pending = 0;
		    var Resolved = 1;
		    var Rejected = 2;

		    function lazyInitializer(payload) {
		      if (payload._status === Uninitialized) {
		        var ctor = payload._result;
		        var thenable = ctor(); // Transition to the next state.

		        var pending = payload;
		        pending._status = Pending;
		        pending._result = thenable;
		        thenable.then(function (moduleObject) {
		          if (payload._status === Pending) {
		            var defaultExport = moduleObject.default;
		            {
		              if (defaultExport === undefined) {
		                error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
		                'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
		              }
		            } // Transition to the next state.

		            var resolved = payload;
		            resolved._status = Resolved;
		            resolved._result = defaultExport;
		          }
		        }, function (error) {
		          if (payload._status === Pending) {
		            // Transition to the next state.
		            var rejected = payload;
		            rejected._status = Rejected;
		            rejected._result = error;
		          }
		        });
		      }

		      if (payload._status === Resolved) {
		        return payload._result;
		      } else {
		        throw payload._result;
		      }
		    }

		    function lazy(ctor) {
		      var payload = {
		        // We use these fields to store the result.
		        _status: -1,
		        _result: ctor
		      };
		      var lazyType = {
		        $$typeof: REACT_LAZY_TYPE,
		        _payload: payload,
		        _init: lazyInitializer
		      };
		      {
		        // In production, this would just set it on the object.
		        var defaultProps;
		        var propTypes; // $FlowFixMe

		        Object.defineProperties(lazyType, {
		          defaultProps: {
		            configurable: true,
		            get: function () {
		              return defaultProps;
		            },
		            set: function (newDefaultProps) {
		              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
		              defaultProps = newDefaultProps; // Match production behavior more closely:
		              // $FlowFixMe

		              Object.defineProperty(lazyType, 'defaultProps', {
		                enumerable: true
		              });
		            }
		          },
		          propTypes: {
		            configurable: true,
		            get: function () {
		              return propTypes;
		            },
		            set: function (newPropTypes) {
		              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
		              propTypes = newPropTypes; // Match production behavior more closely:
		              // $FlowFixMe

		              Object.defineProperty(lazyType, 'propTypes', {
		                enumerable: true
		              });
		            }
		          }
		        });
		      }
		      return lazyType;
		    }

		    function forwardRef(render) {
		      {
		        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
		          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
		        } else if (typeof render !== 'function') {
		          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
		        } else {
		          if (render.length !== 0 && render.length !== 2) {
		            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
		          }
		        }

		        if (render != null) {
		          if (render.defaultProps != null || render.propTypes != null) {
		            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
		          }
		        }
		      }
		      var elementType = {
		        $$typeof: REACT_FORWARD_REF_TYPE,
		        render: render
		      };
		      {
		        var ownName;
		        Object.defineProperty(elementType, 'displayName', {
		          enumerable: false,
		          configurable: true,
		          get: function () {
		            return ownName;
		          },
		          set: function (name) {
		            ownName = name;

		            if (render.displayName == null) {
		              render.displayName = name;
		            }
		          }
		        });
		      }
		      return elementType;
		    } // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.


		    var enableScopeAPI = false; // Experimental Create Event Handle API.

		    function isValidElementType(type) {
		      if (typeof type === 'string' || typeof type === 'function') {
		        return true;
		      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


		      if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
		        return true;
		      }

		      if (typeof type === 'object' && type !== null) {
		        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
		          return true;
		        }
		      }

		      return false;
		    }

		    function memo(type, compare) {
		      {
		        if (!isValidElementType(type)) {
		          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
		        }
		      }
		      var elementType = {
		        $$typeof: REACT_MEMO_TYPE,
		        type: type,
		        compare: compare === undefined ? null : compare
		      };
		      {
		        var ownName;
		        Object.defineProperty(elementType, 'displayName', {
		          enumerable: false,
		          configurable: true,
		          get: function () {
		            return ownName;
		          },
		          set: function (name) {
		            ownName = name;

		            if (type.displayName == null) {
		              type.displayName = name;
		            }
		          }
		        });
		      }
		      return elementType;
		    }

		    function resolveDispatcher() {
		      var dispatcher = ReactCurrentDispatcher.current;

		      if (!(dispatcher !== null)) {
		        {
		          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
		        }
		      }

		      return dispatcher;
		    }

		    function useContext(Context, unstable_observedBits) {
		      var dispatcher = resolveDispatcher();
		      {
		        if (unstable_observedBits !== undefined) {
		          error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
		        } // TODO: add a more generic warning for invalid values.


		        if (Context._context !== undefined) {
		          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
		          // and nobody should be using this in existing code.

		          if (realContext.Consumer === Context) {
		            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
		          } else if (realContext.Provider === Context) {
		            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
		          }
		        }
		      }
		      return dispatcher.useContext(Context, unstable_observedBits);
		    }

		    function useState(initialState) {
		      var dispatcher = resolveDispatcher();
		      return dispatcher.useState(initialState);
		    }

		    function useReducer(reducer, initialArg, init) {
		      var dispatcher = resolveDispatcher();
		      return dispatcher.useReducer(reducer, initialArg, init);
		    }

		    function useRef(initialValue) {
		      var dispatcher = resolveDispatcher();
		      return dispatcher.useRef(initialValue);
		    }

		    function useEffect(create, deps) {
		      var dispatcher = resolveDispatcher();
		      return dispatcher.useEffect(create, deps);
		    }

		    function useLayoutEffect(create, deps) {
		      var dispatcher = resolveDispatcher();
		      return dispatcher.useLayoutEffect(create, deps);
		    }

		    function useCallback(callback, deps) {
		      var dispatcher = resolveDispatcher();
		      return dispatcher.useCallback(callback, deps);
		    }

		    function useMemo(create, deps) {
		      var dispatcher = resolveDispatcher();
		      return dispatcher.useMemo(create, deps);
		    }

		    function useImperativeHandle(ref, create, deps) {
		      var dispatcher = resolveDispatcher();
		      return dispatcher.useImperativeHandle(ref, create, deps);
		    }

		    function useDebugValue(value, formatterFn) {
		      {
		        var dispatcher = resolveDispatcher();
		        return dispatcher.useDebugValue(value, formatterFn);
		      }
		    } // Helpers to patch console.logs to avoid logging during side-effect free
		    // replaying on render function. This currently only patches the object
		    // lazily which won't cover if the log function was extracted eagerly.
		    // We could also eagerly patch the method.


		    var disabledDepth = 0;
		    var prevLog;
		    var prevInfo;
		    var prevWarn;
		    var prevError;
		    var prevGroup;
		    var prevGroupCollapsed;
		    var prevGroupEnd;

		    function disabledLog() {}

		    disabledLog.__reactDisabledLog = true;

		    function disableLogs() {
		      {
		        if (disabledDepth === 0) {
		          /* eslint-disable react-internal/no-production-logging */
		          prevLog = console.log;
		          prevInfo = console.info;
		          prevWarn = console.warn;
		          prevError = console.error;
		          prevGroup = console.group;
		          prevGroupCollapsed = console.groupCollapsed;
		          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		          var props = {
		            configurable: true,
		            enumerable: true,
		            value: disabledLog,
		            writable: true
		          }; // $FlowFixMe Flow thinks console is immutable.

		          Object.defineProperties(console, {
		            info: props,
		            log: props,
		            warn: props,
		            error: props,
		            group: props,
		            groupCollapsed: props,
		            groupEnd: props
		          });
		          /* eslint-enable react-internal/no-production-logging */
		        }

		        disabledDepth++;
		      }
		    }

		    function reenableLogs() {
		      {
		        disabledDepth--;

		        if (disabledDepth === 0) {
		          /* eslint-disable react-internal/no-production-logging */
		          var props = {
		            configurable: true,
		            enumerable: true,
		            writable: true
		          }; // $FlowFixMe Flow thinks console is immutable.

		          Object.defineProperties(console, {
		            log: _assign({}, props, {
		              value: prevLog
		            }),
		            info: _assign({}, props, {
		              value: prevInfo
		            }),
		            warn: _assign({}, props, {
		              value: prevWarn
		            }),
		            error: _assign({}, props, {
		              value: prevError
		            }),
		            group: _assign({}, props, {
		              value: prevGroup
		            }),
		            groupCollapsed: _assign({}, props, {
		              value: prevGroupCollapsed
		            }),
		            groupEnd: _assign({}, props, {
		              value: prevGroupEnd
		            })
		          });
		          /* eslint-enable react-internal/no-production-logging */
		        }

		        if (disabledDepth < 0) {
		          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		        }
		      }
		    }

		    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
		    var prefix;

		    function describeBuiltInComponentFrame(name, source, ownerFn) {
		      {
		        if (prefix === undefined) {
		          // Extract the VM specific prefix used by each line.
		          try {
		            throw Error();
		          } catch (x) {
		            var match = x.stack.trim().match(/\n( *(at )?)/);
		            prefix = match && match[1] || '';
		          }
		        } // We use the prefix to ensure our stacks line up with native stack frames.


		        return '\n' + prefix + name;
		      }
		    }

		    var reentry = false;
		    var componentFrameCache;
		    {
		      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
		      componentFrameCache = new PossiblyWeakMap();
		    }

		    function describeNativeComponentFrame(fn, construct) {
		      // If something asked for a stack inside a fake render, it should get ignored.
		      if (!fn || reentry) {
		        return '';
		      }

		      {
		        var frame = componentFrameCache.get(fn);

		        if (frame !== undefined) {
		          return frame;
		        }
		      }
		      var control;
		      reentry = true;
		      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		      Error.prepareStackTrace = undefined;
		      var previousDispatcher;
		      {
		        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
		        // for warnings.

		        ReactCurrentDispatcher$1.current = null;
		        disableLogs();
		      }

		      try {
		        // This should throw.
		        if (construct) {
		          // Something should be setting the props in the constructor.
		          var Fake = function () {
		            throw Error();
		          }; // $FlowFixMe


		          Object.defineProperty(Fake.prototype, 'props', {
		            set: function () {
		              // We use a throwing setter instead of frozen or non-writable props
		              // because that won't throw in a non-strict mode function.
		              throw Error();
		            }
		          });

		          if (typeof Reflect === 'object' && Reflect.construct) {
		            // We construct a different control for this case to include any extra
		            // frames added by the construct call.
		            try {
		              Reflect.construct(Fake, []);
		            } catch (x) {
		              control = x;
		            }

		            Reflect.construct(fn, [], Fake);
		          } else {
		            try {
		              Fake.call();
		            } catch (x) {
		              control = x;
		            }

		            fn.call(Fake.prototype);
		          }
		        } else {
		          try {
		            throw Error();
		          } catch (x) {
		            control = x;
		          }

		          fn();
		        }
		      } catch (sample) {
		        // This is inlined manually because closure doesn't do it for us.
		        if (sample && control && typeof sample.stack === 'string') {
		          // This extracts the first frame from the sample that isn't also in the control.
		          // Skipping one frame that we assume is the frame that calls the two.
		          var sampleLines = sample.stack.split('\n');
		          var controlLines = control.stack.split('\n');
		          var s = sampleLines.length - 1;
		          var c = controlLines.length - 1;

		          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		            // We expect at least one stack frame to be shared.
		            // Typically this will be the root most one. However, stack frames may be
		            // cut off due to maximum stack limits. In this case, one maybe cut off
		            // earlier than the other. We assume that the sample is longer or the same
		            // and there for cut off earlier. So we should find the root most frame in
		            // the sample somewhere in the control.
		            c--;
		          }

		          for (; s >= 1 && c >= 0; s--, c--) {
		            // Next we find the first one that isn't the same which should be the
		            // frame that called our sample function and the control.
		            if (sampleLines[s] !== controlLines[c]) {
		              // In V8, the first line is describing the message but other VMs don't.
		              // If we're about to return the first line, and the control is also on the same
		              // line, that's a pretty good indicator that our sample threw at same line as
		              // the control. I.e. before we entered the sample frame. So we ignore this result.
		              // This can happen if you passed a class to function component, or non-function.
		              if (s !== 1 || c !== 1) {
		                do {
		                  s--;
		                  c--; // We may still have similar intermediate frames from the construct call.
		                  // The next one that isn't the same should be our match though.

		                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

		                    {
		                      if (typeof fn === 'function') {
		                        componentFrameCache.set(fn, _frame);
		                      }
		                    } // Return the line we found.

		                    return _frame;
		                  }
		                } while (s >= 1 && c >= 0);
		              }

		              break;
		            }
		          }
		        }
		      } finally {
		        reentry = false;
		        {
		          ReactCurrentDispatcher$1.current = previousDispatcher;
		          reenableLogs();
		        }
		        Error.prepareStackTrace = previousPrepareStackTrace;
		      } // Fallback to just using the name if we couldn't make it throw.


		      var name = fn ? fn.displayName || fn.name : '';
		      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
		      {
		        if (typeof fn === 'function') {
		          componentFrameCache.set(fn, syntheticFrame);
		        }
		      }
		      return syntheticFrame;
		    }

		    function describeFunctionComponentFrame(fn, source, ownerFn) {
		      {
		        return describeNativeComponentFrame(fn, false);
		      }
		    }

		    function shouldConstruct(Component) {
		      var prototype = Component.prototype;
		      return !!(prototype && prototype.isReactComponent);
		    }

		    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
		      if (type == null) {
		        return '';
		      }

		      if (typeof type === 'function') {
		        {
		          return describeNativeComponentFrame(type, shouldConstruct(type));
		        }
		      }

		      if (typeof type === 'string') {
		        return describeBuiltInComponentFrame(type);
		      }

		      switch (type) {
		        case exports.Suspense:
		          return describeBuiltInComponentFrame('Suspense');

		        case REACT_SUSPENSE_LIST_TYPE:
		          return describeBuiltInComponentFrame('SuspenseList');
		      }

		      if (typeof type === 'object') {
		        switch (type.$$typeof) {
		          case REACT_FORWARD_REF_TYPE:
		            return describeFunctionComponentFrame(type.render);

		          case REACT_MEMO_TYPE:
		            // Memo may contain any component type so we recursively resolve it.
		            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

		          case REACT_BLOCK_TYPE:
		            return describeFunctionComponentFrame(type._render);

		          case REACT_LAZY_TYPE:
		            {
		              var lazyComponent = type;
		              var payload = lazyComponent._payload;
		              var init = lazyComponent._init;

		              try {
		                // Lazy may contain any component type so we recursively resolve it.
		                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
		              } catch (x) {}
		            }
		        }
		      }

		      return '';
		    }

		    var loggedTypeFailures = {};
		    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

		    function setCurrentlyValidatingElement(element) {
		      {
		        if (element) {
		          var owner = element._owner;
		          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
		        } else {
		          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
		        }
		      }
		    }

		    function checkPropTypes(typeSpecs, values, location, componentName, element) {
		      {
		        // $FlowFixMe This is okay but Flow doesn't know it.
		        var has = Function.call.bind(Object.prototype.hasOwnProperty);

		        for (var typeSpecName in typeSpecs) {
		          if (has(typeSpecs, typeSpecName)) {
		            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
		            // fail the render phase where it didn't fail before. So we log it.
		            // After these have been cleaned up, we'll let them throw.

		            try {
		              // This is intentionally an invariant that gets caught. It's the same
		              // behavior as without this statement except with a better message.
		              if (typeof typeSpecs[typeSpecName] !== 'function') {
		                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		                err.name = 'Invariant Violation';
		                throw err;
		              }

		              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
		            } catch (ex) {
		              error$1 = ex;
		            }

		            if (error$1 && !(error$1 instanceof Error)) {
		              setCurrentlyValidatingElement(element);
		              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
		              setCurrentlyValidatingElement(null);
		            }

		            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
		              // Only monitor this failure once because there tends to be a lot of the
		              // same error.
		              loggedTypeFailures[error$1.message] = true;
		              setCurrentlyValidatingElement(element);
		              error('Failed %s type: %s', location, error$1.message);
		              setCurrentlyValidatingElement(null);
		            }
		          }
		        }
		      }
		    }

		    function setCurrentlyValidatingElement$1(element) {
		      {
		        if (element) {
		          var owner = element._owner;
		          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		          setExtraStackFrame(stack);
		        } else {
		          setExtraStackFrame(null);
		        }
		      }
		    }

		    var propTypesMisspellWarningShown;
		    {
		      propTypesMisspellWarningShown = false;
		    }

		    function getDeclarationErrorAddendum() {
		      if (ReactCurrentOwner.current) {
		        var name = getComponentName(ReactCurrentOwner.current.type);

		        if (name) {
		          return '\n\nCheck the render method of `' + name + '`.';
		        }
		      }

		      return '';
		    }

		    function getSourceInfoErrorAddendum(source) {
		      if (source !== undefined) {
		        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
		        var lineNumber = source.lineNumber;
		        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
		      }

		      return '';
		    }

		    function getSourceInfoErrorAddendumForProps(elementProps) {
		      if (elementProps !== null && elementProps !== undefined) {
		        return getSourceInfoErrorAddendum(elementProps.__source);
		      }

		      return '';
		    }
		    /**
		     * Warn if there's no key explicitly set on dynamic arrays of children or
		     * object keys are not valid. This allows us to keep track of children between
		     * updates.
		     */


		    var ownerHasKeyUseWarning = {};

		    function getCurrentComponentErrorInfo(parentType) {
		      var info = getDeclarationErrorAddendum();

		      if (!info) {
		        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

		        if (parentName) {
		          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
		        }
		      }

		      return info;
		    }
		    /**
		     * Warn if the element doesn't have an explicit key assigned to it.
		     * This element is in an array. The array could grow and shrink or be
		     * reordered. All children that haven't already been validated are required to
		     * have a "key" property assigned to it. Error statuses are cached so a warning
		     * will only be shown once.
		     *
		     * @internal
		     * @param {ReactElement} element Element that requires a key.
		     * @param {*} parentType element's parent's type.
		     */


		    function validateExplicitKey(element, parentType) {
		      if (!element._store || element._store.validated || element.key != null) {
		        return;
		      }

		      element._store.validated = true;
		      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

		      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
		        return;
		      }

		      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
		      // property, it may be the creator of the child that's responsible for
		      // assigning it a key.

		      var childOwner = '';

		      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
		        // Give the component that originally created this child.
		        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
		      }

		      {
		        setCurrentlyValidatingElement$1(element);
		        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
		        setCurrentlyValidatingElement$1(null);
		      }
		    }
		    /**
		     * Ensure that every element either is passed in a static location, in an
		     * array with an explicit keys property defined, or in an object literal
		     * with valid key property.
		     *
		     * @internal
		     * @param {ReactNode} node Statically passed child of any type.
		     * @param {*} parentType node's parent's type.
		     */


		    function validateChildKeys(node, parentType) {
		      if (typeof node !== 'object') {
		        return;
		      }

		      if (Array.isArray(node)) {
		        for (var i = 0; i < node.length; i++) {
		          var child = node[i];

		          if (isValidElement(child)) {
		            validateExplicitKey(child, parentType);
		          }
		        }
		      } else if (isValidElement(node)) {
		        // This element was passed in a valid location.
		        if (node._store) {
		          node._store.validated = true;
		        }
		      } else if (node) {
		        var iteratorFn = getIteratorFn(node);

		        if (typeof iteratorFn === 'function') {
		          // Entry iterators used to provide implicit keys,
		          // but now we print a separate warning for them later.
		          if (iteratorFn !== node.entries) {
		            var iterator = iteratorFn.call(node);
		            var step;

		            while (!(step = iterator.next()).done) {
		              if (isValidElement(step.value)) {
		                validateExplicitKey(step.value, parentType);
		              }
		            }
		          }
		        }
		      }
		    }
		    /**
		     * Given an element, validate that its props follow the propTypes definition,
		     * provided by the type.
		     *
		     * @param {ReactElement} element
		     */


		    function validatePropTypes(element) {
		      {
		        var type = element.type;

		        if (type === null || type === undefined || typeof type === 'string') {
		          return;
		        }

		        var propTypes;

		        if (typeof type === 'function') {
		          propTypes = type.propTypes;
		        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
		        // Inner props are checked in the reconciler.
		        type.$$typeof === REACT_MEMO_TYPE)) {
		          propTypes = type.propTypes;
		        } else {
		          return;
		        }

		        if (propTypes) {
		          // Intentionally inside to avoid triggering lazy initializers:
		          var name = getComponentName(type);
		          checkPropTypes(propTypes, element.props, 'prop', name, element);
		        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
		          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

		          var _name = getComponentName(type);

		          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
		        }

		        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
		          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
		        }
		      }
		    }
		    /**
		     * Given a fragment, validate that it can only be provided with fragment props
		     * @param {ReactElement} fragment
		     */


		    function validateFragmentProps(fragment) {
		      {
		        var keys = Object.keys(fragment.props);

		        for (var i = 0; i < keys.length; i++) {
		          var key = keys[i];

		          if (key !== 'children' && key !== 'key') {
		            setCurrentlyValidatingElement$1(fragment);
		            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
		            setCurrentlyValidatingElement$1(null);
		            break;
		          }
		        }

		        if (fragment.ref !== null) {
		          setCurrentlyValidatingElement$1(fragment);
		          error('Invalid attribute `ref` supplied to `React.Fragment`.');
		          setCurrentlyValidatingElement$1(null);
		        }
		      }
		    }

		    function createElementWithValidation(type, props, children) {
		      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
		      // succeed and there will likely be errors in render.

		      if (!validType) {
		        var info = '';

		        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
		          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
		        }

		        var sourceInfo = getSourceInfoErrorAddendumForProps(props);

		        if (sourceInfo) {
		          info += sourceInfo;
		        } else {
		          info += getDeclarationErrorAddendum();
		        }

		        var typeString;

		        if (type === null) {
		          typeString = 'null';
		        } else if (Array.isArray(type)) {
		          typeString = 'array';
		        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
		          typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
		          info = ' Did you accidentally export a JSX literal instead of a component?';
		        } else {
		          typeString = typeof type;
		        }

		        {
		          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
		        }
		      }

		      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
		      // TODO: Drop this when these are no longer allowed as the type argument.

		      if (element == null) {
		        return element;
		      } // Skip key warning if the type isn't valid since our key validation logic
		      // doesn't expect a non-string/function type and can throw confusing errors.
		      // We don't want exception behavior to differ between dev and prod.
		      // (Rendering will throw with a helpful message and as soon as the type is
		      // fixed, the key warnings will appear.)


		      if (validType) {
		        for (var i = 2; i < arguments.length; i++) {
		          validateChildKeys(arguments[i], type);
		        }
		      }

		      if (type === exports.Fragment) {
		        validateFragmentProps(element);
		      } else {
		        validatePropTypes(element);
		      }

		      return element;
		    }

		    var didWarnAboutDeprecatedCreateFactory = false;

		    function createFactoryWithValidation(type) {
		      var validatedFactory = createElementWithValidation.bind(null, type);
		      validatedFactory.type = type;
		      {
		        if (!didWarnAboutDeprecatedCreateFactory) {
		          didWarnAboutDeprecatedCreateFactory = true;
		          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
		        } // Legacy hook: remove it


		        Object.defineProperty(validatedFactory, 'type', {
		          enumerable: false,
		          get: function () {
		            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
		            Object.defineProperty(this, 'type', {
		              value: type
		            });
		            return type;
		          }
		        });
		      }
		      return validatedFactory;
		    }

		    function cloneElementWithValidation(element, props, children) {
		      var newElement = cloneElement.apply(this, arguments);

		      for (var i = 2; i < arguments.length; i++) {
		        validateChildKeys(arguments[i], newElement.type);
		      }

		      validatePropTypes(newElement);
		      return newElement;
		    }

		    {
		      try {
		        var frozenObject = Object.freeze({});
		        /* eslint-disable no-new */

		        new Map([[frozenObject, null]]);
		        new Set([frozenObject]);
		        /* eslint-enable no-new */
		      } catch (e) {}
		    }
		    var createElement$1 = createElementWithValidation;
		    var cloneElement$1 = cloneElementWithValidation;
		    var createFactory = createFactoryWithValidation;
		    var Children = {
		      map: mapChildren,
		      forEach: forEachChildren,
		      count: countChildren,
		      toArray: toArray,
		      only: onlyChild
		    };
		    exports.Children = Children;
		    exports.Component = Component;
		    exports.PureComponent = PureComponent;
		    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
		    exports.cloneElement = cloneElement$1;
		    exports.createContext = createContext;
		    exports.createElement = createElement$1;
		    exports.createFactory = createFactory;
		    exports.createRef = createRef;
		    exports.forwardRef = forwardRef;
		    exports.isValidElement = isValidElement;
		    exports.lazy = lazy;
		    exports.memo = memo;
		    exports.useCallback = useCallback;
		    exports.useContext = useContext;
		    exports.useDebugValue = useDebugValue;
		    exports.useEffect = useEffect;
		    exports.useImperativeHandle = useImperativeHandle;
		    exports.useLayoutEffect = useLayoutEffect;
		    exports.useMemo = useMemo;
		    exports.useReducer = useReducer;
		    exports.useRef = useRef;
		    exports.useState = useState;
		    exports.version = ReactVersion;
		  })();
		}
} (react_development));
	return react_development;
}

(function (module) {

	if (process.env.NODE_ENV === 'production') {
	  module.exports = requireReact_production_min();
	} else {
	  module.exports = requireReact_development();
	}
} (react));

var React = /*@__PURE__*/getDefaultExportFromCjs(react.exports);

/**
 * useStyles - hook to extract classes from CSS modules object or provide custom one's
 * @param {object} styles - object with CSS modules styles
 * @param {string | array} classNames - custom classes from outside of component
 * @returns {string} An string with extracted class names
 */
const useStyles = (styles, classNames = '') => {
  let classes = '';

  for (const [key, value] of Object.entries(styles)) {
    if (value) {
      classes += `${key} `;
    }
  }

  Array.isArray(classNames) ? classNames.forEach(className => {
    classes += `${className} `;
  }) : classes += `${classNames} `;
  return classes.trim();
};

var styles$1a = {"text--truncate":"Heading-module_text--truncate__M7l2Z","h1":"Heading-module_h1__TsuVw","h2":"Heading-module_h2__nvr-4","h3":"Heading-module_h3__cayyr","h4":"Heading-module_h4__BpRZb","h5":"Heading-module_h5__I8haX","h6":"Heading-module_h6__Qklc8","hlarge":"Heading-module_hlarge__guIve","heading--left":"Heading-module_heading--left__M0c9-","heading--center":"Heading-module_heading--center__azkpB","heading--right":"Heading-module_heading--right__cj5xv","heading--no-margin":"Heading-module_heading--no-margin__-wthh","heading--bold":"Heading-module_heading--bold__rAjdQ","heading__color--white":"Heading-module_heading__color--white__x-WI-","heading__color--brand":"Heading-module_heading__color--brand__ls-iy"};

/**
 * Heading - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {number} props.level - level size, one of: 1, 2, 3, 4, 5, 6, large. Adds css class based on provided level ex. .h1, .h2 etc
 * @param {string|array} props.className- a list of class names
 * @param {string} props.align - align text `left, center, right`
 * @param {string} props.margin - margin bottom
 * @param {bool} props.bold - bold text
 * @param {string} props.color - text color
 * @return {object} An object of children element
 */

const Heading = ({
  className,
  children,
  level,
  align,
  margin,
  bold,
  color
}) => {
  const elementClasses = useStyles({
    [styles$1a['heading']]: true,
    [styles$1a[`h${level}`]]: level,
    [styles$1a['heading--bold']]: bold,
    [styles$1a[`heading--${align}`]]: align,
    [styles$1a['heading--no-margin']]: margin === 'none',
    [styles$1a[`heading__color--${color}`]]: color
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    className: elementClasses
  }, children);
};

Heading.displayName = 'Heading';
Heading.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  align: propTypes.exports.string,
  bold: propTypes.exports.bool,
  children: propTypes.exports.node.isRequired,
  color: propTypes.exports.string,
  level: propTypes.exports.oneOf([1, 2, 3, 4, 5, 6, 'large']).isRequired,
  margin: propTypes.exports.string
};
Heading.defaultProps = {
  className: '',
  align: '',
  margin: '',
  color: undefined,
  bold: false
};

var scss$4 = {"text--truncate":"Headline_text--truncate__Qk116","page__headline":"Headline_page__headline__kD-8W"};

const cssClass$4 = styles$1b(scss$4); //TODO Headline css, mdx, test

/**
 * Headline - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: page__headline
 * @param {string} props.title - data
 * @return {object} An object of children element
 */

const Headline = ({
  className,
  title
}) => /*#__PURE__*/React.createElement("div", {
  className: cssClass$4(className)
}, /*#__PURE__*/React.createElement(Heading, {
  className: "text--truncate",
  level: 1
}, title));

Headline.displayName = 'Headline';
Headline.defaultProps = {
  className: 'page__headline'
};
Headline.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  title: propTypes.exports.string.isRequired
};

/*! @license DOMPurify 2.3.8 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.8/LICENSE */
function _typeof$8(obj) {
  "@babel/helpers - typeof";

  return _typeof$8 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof$8(obj);
}

function _setPrototypeOf$9(o, p) {
  _setPrototypeOf$9 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$9(o, p);
}

function _isNativeReflectConstruct$8() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct$8()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf$9(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _toConsumableArray$2(arr) {
  return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread$2();
}

function _arrayWithoutHoles$2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$2(arr);
}

function _iterableToArray$2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray$2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
}

function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread$2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var hasOwnProperty$1 = Object.hasOwnProperty,
    setPrototypeOf = Object.setPrototypeOf,
    isFrozen = Object.isFrozen,
    getPrototypeOf = Object.getPrototypeOf,
    getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
var freeze = Object.freeze,
    seal = Object.seal,
    create = Object.create; // eslint-disable-line import/no-mutable-exports

var _ref = typeof Reflect !== 'undefined' && Reflect,
    apply = _ref.apply,
    construct = _ref.construct;

if (!apply) {
  apply = function apply(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}

if (!freeze) {
  freeze = function freeze(x) {
    return x;
  };
}

if (!seal) {
  seal = function seal(x) {
    return x;
  };
}

if (!construct) {
  construct = function construct(Func, args) {
    return _construct(Func, _toConsumableArray$2(args));
  };
}

var arrayForEach = unapply(Array.prototype.forEach);
var arrayPop = unapply(Array.prototype.pop);
var arrayPush = unapply(Array.prototype.push);
var stringToLowerCase = unapply(String.prototype.toLowerCase);
var stringMatch = unapply(String.prototype.match);
var stringReplace = unapply(String.prototype.replace);
var stringIndexOf = unapply(String.prototype.indexOf);
var stringTrim = unapply(String.prototype.trim);
var regExpTest = unapply(RegExp.prototype.test);
var typeErrorCreate = unconstruct(TypeError);

function unapply(func) {
  return function (thisArg) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return apply(func, thisArg, args);
  };
}

function unconstruct(func) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return construct(func, args);
  };
}
/* Add properties to a lookup table */


function addToSet(set, array) {
  if (setPrototypeOf) {
    // Make 'in' and truthy checks like Boolean(set.constructor)
    // independent of any properties defined on Object.prototype.
    // Prevent prototype setters from intercepting set as a this value.
    setPrototypeOf(set, null);
  }

  var l = array.length;

  while (l--) {
    var element = array[l];

    if (typeof element === 'string') {
      var lcElement = stringToLowerCase(element);

      if (lcElement !== element) {
        // Config presets (e.g. tags.js, attrs.js) are immutable.
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }

        element = lcElement;
      }
    }

    set[element] = true;
  }

  return set;
}
/* Shallow clone an object */


function clone(object) {
  var newObject = create(null);
  var property;

  for (property in object) {
    if (apply(hasOwnProperty$1, object, [property])) {
      newObject[property] = object[property];
    }
  }

  return newObject;
}
/* IE10 doesn't support __lookupGetter__ so lets'
 * simulate it. It also automatically checks
 * if the prop is function or getter and behaves
 * accordingly. */


function lookupGetter(object, prop) {
  while (object !== null) {
    var desc = getOwnPropertyDescriptor$2(object, prop);

    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }

      if (typeof desc.value === 'function') {
        return unapply(desc.value);
      }
    }

    object = getPrototypeOf(object);
  }

  function fallbackValue(element) {
    console.warn('fallback value for', element);
    return null;
  }

  return fallbackValue;
}

var html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG

var svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.
// We still need to know them so that we can do namespace
// checks properly in case one wants to add them to
// allow-list.

var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
var mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']); // Similarly to SVG, we want to know all MathML elements,
// even those that we disallow by default.

var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
var text = freeze(['#text']);
var html$2 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);
var svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
var mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);
var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode

var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape

var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape

var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
);
var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
);
var DOCTYPE_NAME = seal(/^html$/i);

var getGlobal = function getGlobal() {
  return typeof window === 'undefined' ? null : window;
};
/**
 * Creates a no-op policy for internal use only.
 * Don't export this function outside this module!
 * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
 * @param {Document} document The document object (to determine policy name suffix)
 * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
 * are not supported).
 */


var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
  if (_typeof$8(trustedTypes) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
    return null;
  } // Allow the callers to control the unique policy name
  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
  // Policy creation with duplicate names throws in Trusted Types.


  var suffix = null;
  var ATTR_NAME = 'data-tt-policy-suffix';

  if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
    suffix = document.currentScript.getAttribute(ATTR_NAME);
  }

  var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML: function createHTML(html) {
        return html;
      }
    });
  } catch (_) {
    // Policy creation failed (most likely another DOMPurify script has
    // already run). Skip creating the policy, as this will only cause errors
    // if TT are enforced.
    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
    return null;
  }
};

function createDOMPurify() {
  var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

  var DOMPurify = function DOMPurify(root) {
    return createDOMPurify(root);
  };
  /**
   * Version label, exposed for easier checks
   * if DOMPurify is up to date or not
   */


  DOMPurify.version = '2.3.8';
  /**
   * Array of elements that DOMPurify removed during sanitation.
   * Empty if nothing was removed.
   */

  DOMPurify.removed = [];

  if (!window || !window.document || window.document.nodeType !== 9) {
    // Not running in a browser, provide a factory function
    // so that you can pass your own Window
    DOMPurify.isSupported = false;
    return DOMPurify;
  }

  var originalDocument = window.document;
  var document = window.document;
  var DocumentFragment = window.DocumentFragment,
      HTMLTemplateElement = window.HTMLTemplateElement,
      Node = window.Node,
      Element = window.Element,
      NodeFilter = window.NodeFilter,
      _window$NamedNodeMap = window.NamedNodeMap,
      NamedNodeMap = _window$NamedNodeMap === void 0 ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
      HTMLFormElement = window.HTMLFormElement,
      DOMParser = window.DOMParser,
      trustedTypes = window.trustedTypes;
  var ElementPrototype = Element.prototype;
  var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
  var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
  var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
  var getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a
  // new document created via createHTMLDocument. As per the spec
  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
  // a new empty registry is used when creating a template contents owner
  // document, so we use that as our parent document to ensure nothing
  // is inherited.

  if (typeof HTMLTemplateElement === 'function') {
    var template = document.createElement('template');

    if (template.content && template.content.ownerDocument) {
      document = template.content.ownerDocument;
    }
  }

  var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);

  var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';
  var _document = document,
      implementation = _document.implementation,
      createNodeIterator = _document.createNodeIterator,
      createDocumentFragment = _document.createDocumentFragment,
      getElementsByTagName = _document.getElementsByTagName;
  var importNode = originalDocument.importNode;
  var documentMode = {};

  try {
    documentMode = clone(document).documentMode ? document.documentMode : {};
  } catch (_) {}

  var hooks = {};
  /**
   * Expose whether this browser supports running the full DOMPurify.
   */

  DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;
  var MUSTACHE_EXPR$1 = MUSTACHE_EXPR,
      ERB_EXPR$1 = ERB_EXPR,
      DATA_ATTR$1 = DATA_ATTR,
      ARIA_ATTR$1 = ARIA_ATTR,
      IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA,
      ATTR_WHITESPACE$1 = ATTR_WHITESPACE;
  var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;
  /**
   * We consider the elements and attributes below to be safe. Ideally
   * don't add any new ones but feel free to remove unwanted ones.
   */

  /* allowed element names */

  var ALLOWED_TAGS = null;
  var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$2(html$1), _toConsumableArray$2(svg$1), _toConsumableArray$2(svgFilters), _toConsumableArray$2(mathMl$1), _toConsumableArray$2(text)));
  /* Allowed attribute names */

  var ALLOWED_ATTR = null;
  var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$2(html$2), _toConsumableArray$2(svg), _toConsumableArray$2(mathMl), _toConsumableArray$2(xml)));
  /*
   * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.
   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
   */

  var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */

  var FORBID_TAGS = null;
  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */

  var FORBID_ATTR = null;
  /* Decide if ARIA attributes are okay */

  var ALLOW_ARIA_ATTR = true;
  /* Decide if custom data attributes are okay */

  var ALLOW_DATA_ATTR = true;
  /* Decide if unknown protocols are okay */

  var ALLOW_UNKNOWN_PROTOCOLS = false;
  /* Output should be safe for common template engines.
   * This means, DOMPurify removes data attributes, mustaches and ERB
   */

  var SAFE_FOR_TEMPLATES = false;
  /* Decide if document with <html>... should be returned */

  var WHOLE_DOCUMENT = false;
  /* Track whether config is already set on this instance of DOMPurify. */

  var SET_CONFIG = false;
  /* Decide if all elements (e.g. style, script) must be children of
   * document.body. By default, browsers might move them to document.head */

  var FORCE_BODY = false;
  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
   * string (or a TrustedHTML object if Trusted Types are supported).
   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
   */

  var RETURN_DOM = false;
  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
   * string  (or a TrustedHTML object if Trusted Types are supported) */

  var RETURN_DOM_FRAGMENT = false;
  /* Try to return a Trusted Type object instead of a string, return a string in
   * case Trusted Types are not supported  */

  var RETURN_TRUSTED_TYPE = false;
  /* Output should be free from DOM clobbering attacks? */

  var SANITIZE_DOM = true;
  /* Keep element content when removing element? */

  var KEEP_CONTENT = true;
  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
   * of importing it into a new Document and returning a sanitized copy */

  var IN_PLACE = false;
  /* Allow usage of profiles like html, svg and mathMl */

  var USE_PROFILES = {};
  /* Tags to ignore content of when KEEP_CONTENT is true */

  var FORBID_CONTENTS = null;
  var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
  /* Tags that are safe for data: URIs */

  var DATA_URI_TAGS = null;
  var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
  /* Attributes safe for values like "javascript:" */

  var URI_SAFE_ATTRIBUTES = null;
  var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
  var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
  var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
  /* Document namespace */

  var NAMESPACE = HTML_NAMESPACE;
  var IS_EMPTY_INPUT = false;
  /* Parsing of strict XHTML documents */

  var PARSER_MEDIA_TYPE;
  var SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
  var DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
  var transformCaseFunc;
  /* Keep a reference to config to pass to hooks */

  var CONFIG = null;
  /* Ideally, do not touch anything below this line */

  /* ______________________________________________ */

  var formElement = document.createElement('form');

  var isRegexOrFunction = function isRegexOrFunction(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  /**
   * _parseConfig
   *
   * @param  {Object} cfg optional config literal
   */
  // eslint-disable-next-line complexity


  var _parseConfig = function _parseConfig(cfg) {
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    /* Shield configuration object from tampering */


    if (!cfg || _typeof$8(cfg) !== 'object') {
      cfg = {};
    }
    /* Shield configuration object from prototype pollution */


    cfg = clone(cfg);
    /* Set configuration parameters */

    ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
    URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
    FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
    USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true

    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true

    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false

    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false

    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false

    RETURN_DOM = cfg.RETURN_DOM || false; // Default false

    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false

    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false

    FORCE_BODY = cfg.FORCE_BODY || false; // Default false

    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true

    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true

    IN_PLACE = cfg.IN_PLACE || false; // Default false

    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;

    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }

    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }

    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }

    PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.

    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? function (x) {
      return x;
    } : stringToLowerCase;

    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }

    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    /* Parse profile info */


    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, _toConsumableArray$2(text));
      ALLOWED_ATTR = [];

      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html$2);
      }

      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }

      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }

      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    /* Merge configuration parameters */


    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }

      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
    }

    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }

      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
    }

    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
    }

    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }

      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS);
    }
    /* Add #text in case KEEP_CONTENT is set to true */


    if (KEEP_CONTENT) {
      ALLOWED_TAGS['#text'] = true;
    }
    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */


    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
    }
    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */


    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ['tbody']);
      delete FORBID_TAGS.tbody;
    } // Prevent further manipulation of configuration.
    // Not available in IE8, Safari 5, etc.


    if (freeze) {
      freeze(cfg);
    }

    CONFIG = cfg;
  };

  var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
  var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML
  // namespace. We need to specify them explicitly
  // so that they don't get erroneously deleted from
  // HTML namespace.

  var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
  /* Keep track of all possible SVG and MathML tags
   * so that we can perform the namespace checks
   * correctly. */

  var ALL_SVG_TAGS = addToSet({}, svg$1);
  addToSet(ALL_SVG_TAGS, svgFilters);
  addToSet(ALL_SVG_TAGS, svgDisallowed);
  var ALL_MATHML_TAGS = addToSet({}, mathMl$1);
  addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
  /**
   *
   *
   * @param  {Element} element a DOM element whose namespace is being checked
   * @returns {boolean} Return false if the element has a
   *  namespace that a spec-compliant parser would never
   *  return. Return true otherwise.
   */

  var _checkValidNamespace = function _checkValidNamespace(element) {
    var parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode
    // can be null. We just simulate parent in this case.

    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: HTML_NAMESPACE,
        tagName: 'template'
      };
    }

    var tagName = stringToLowerCase(element.tagName);
    var parentTagName = stringToLowerCase(parent.tagName);

    if (element.namespaceURI === SVG_NAMESPACE) {
      // The only way to switch from HTML namespace to SVG
      // is via <svg>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'svg';
      } // The only way to switch from MathML to SVG is via
      // svg if parent is either <annotation-xml> or MathML
      // text integration points.


      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      } // We only allow elements that are defined in SVG
      // spec. All others are disallowed in SVG namespace.


      return Boolean(ALL_SVG_TAGS[tagName]);
    }

    if (element.namespaceURI === MATHML_NAMESPACE) {
      // The only way to switch from HTML namespace to MathML
      // is via <math>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'math';
      } // The only way to switch from SVG to MathML is via
      // <math> and HTML integration points


      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
      } // We only allow elements that are defined in MathML
      // spec. All others are disallowed in MathML namespace.


      return Boolean(ALL_MATHML_TAGS[tagName]);
    }

    if (element.namespaceURI === HTML_NAMESPACE) {
      // The only way to switch from SVG to HTML is via
      // HTML integration points, and from MathML to HTML
      // is via MathML text integration points
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }

      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      } // We disallow tags that are specific for MathML
      // or SVG and should never appear in HTML namespace


      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    } // The code should never reach this place (this means
    // that the element somehow got namespace that is not
    // HTML, SVG or MathML). Return false just in case.


    return false;
  };
  /**
   * _forceRemove
   *
   * @param  {Node} node a DOM node
   */


  var _forceRemove = function _forceRemove(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });

    try {
      // eslint-disable-next-line unicorn/prefer-dom-node-remove
      node.parentNode.removeChild(node);
    } catch (_) {
      try {
        node.outerHTML = emptyHTML;
      } catch (_) {
        node.remove();
      }
    }
  };
  /**
   * _removeAttribute
   *
   * @param  {String} name an Attribute name
   * @param  {Node} node a DOM node
   */


  var _removeAttribute = function _removeAttribute(name, node) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: node.getAttributeNode(name),
        from: node
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: node
      });
    }

    node.removeAttribute(name); // We void attribute values for unremovable "is"" attributes

    if (name === 'is' && !ALLOWED_ATTR[name]) {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(node);
        } catch (_) {}
      } else {
        try {
          node.setAttribute(name, '');
        } catch (_) {}
      }
    }
  };
  /**
   * _initDocument
   *
   * @param  {String} dirty a string of dirty markup
   * @return {Document} a DOM, filled with the dirty markup
   */


  var _initDocument = function _initDocument(dirty) {
    /* Create a HTML document */
    var doc;
    var leadingWhitespace;

    if (FORCE_BODY) {
      dirty = '<remove></remove>' + dirty;
    } else {
      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
      var matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }

    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml') {
      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
    }

    var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    /*
     * Use the DOMParser API by default, fallback later if needs be
     * DOMParser not work for svg when has multiple root element.
     */

    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {}
    }
    /* Use createHTMLDocument in case DOMParser is not available */


    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, 'template', null);

      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? '' : dirtyPayload;
      } catch (_) {// Syntax error if dirtyPayload is invalid xml
      }
    }

    var body = doc.body || doc.documentElement;

    if (dirty && leadingWhitespace) {
      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    /* Work on whole document or just its body */


    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
    }

    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  /**
   * _createIterator
   *
   * @param  {Document} root document/fragment to create iterator for
   * @return {Iterator} iterator instance
   */


  var _createIterator = function _createIterator(root) {
    return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise
    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
  };
  /**
   * _isClobbered
   *
   * @param  {Node} elm element to check for clobbering attacks
   * @return {Boolean} true if clobbered, false if safe
   */


  var _isClobbered = function _isClobbered(elm) {
    return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function');
  };
  /**
   * _isNode
   *
   * @param  {Node} obj object to check whether it's a DOM node
   * @return {Boolean} true is object is a DOM node
   */


  var _isNode = function _isNode(object) {
    return _typeof$8(Node) === 'object' ? object instanceof Node : object && _typeof$8(object) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
  };
  /**
   * _executeHook
   * Execute user configurable hooks
   *
   * @param  {String} entryPoint  Name of the hook's entry point
   * @param  {Node} currentNode node to work on with the hook
   * @param  {Object} data additional hook parameters
   */


  var _executeHook = function _executeHook(entryPoint, currentNode, data) {
    if (!hooks[entryPoint]) {
      return;
    }

    arrayForEach(hooks[entryPoint], function (hook) {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  };
  /**
   * _sanitizeElements
   *
   * @protect nodeName
   * @protect textContent
   * @protect removeChild
   *
   * @param   {Node} currentNode to check for permission to exist
   * @return  {Boolean} true if node was killed, false if left alive
   */


  var _sanitizeElements = function _sanitizeElements(currentNode) {
    var content;
    /* Execute a hook if present */

    _executeHook('beforeSanitizeElements', currentNode, null);
    /* Check if element is clobbered or can clobber */


    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Check if tagname contains Unicode */


    if (regExpTest(/[\u0080-\uFFFF]/, currentNode.nodeName)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Now let's check the element's type and name */


    var tagName = transformCaseFunc(currentNode.nodeName);
    /* Execute a hook if present */

    _executeHook('uponSanitizeElement', currentNode, {
      tagName: tagName,
      allowedTags: ALLOWED_TAGS
    });
    /* Detect mXSS attempts abusing namespace confusion */


    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Mitigate a problem with templates inside select */


    if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Remove element if anything forbids its presence */


    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      /* Check if we have a custom element to handle */
      if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
      }
      /* Keep content except for bad-listed elements */


      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        var parentNode = getParentNode(currentNode) || currentNode.parentNode;
        var childNodes = getChildNodes(currentNode) || currentNode.childNodes;

        if (childNodes && parentNode) {
          var childCount = childNodes.length;

          for (var i = childCount - 1; i >= 0; --i) {
            parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
          }
        }
      }

      _forceRemove(currentNode);

      return true;
    }
    /* Check whether element has a valid namespace */


    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);

      return true;
    }

    if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);

      return true;
    }
    /* Sanitize element content to be template-safe */


    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
      /* Get the element's text content */
      content = currentNode.textContent;
      content = stringReplace(content, MUSTACHE_EXPR$1, ' ');
      content = stringReplace(content, ERB_EXPR$1, ' ');

      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    /* Execute a hook if present */


    _executeHook('afterSanitizeElements', currentNode, null);

    return false;
  };
  /**
   * _isValidAttribute
   *
   * @param  {string} lcTag Lowercase tag name of containing element.
   * @param  {string} lcName Lowercase attribute name.
   * @param  {string} value Attribute value.
   * @return {Boolean} Returns true if `value` is valid, otherwise false.
   */
  // eslint-disable-next-line complexity


  var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
    /* Make sure attribute cannot clobber */
    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
      return false;
    }
    /* Allow valid data-* attributes: At least one character after "-"
        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
        We don't need to check the value; it's always URI safe. */


    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName)) ;else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName)) ;else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND
      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
      _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ;else {
        return false;
      }
      /* Check value is safe. First, is attr inert? If so, is safe */
    } else if (URI_SAFE_ATTRIBUTES[lcName]) ;else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ;else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ;else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ;else if (!value) ;else {
      return false;
    }
    return true;
  };
  /**
   * _basicCustomElementCheck
   * checks if at least one dash is included in tagName, and it's not the first char
   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
   * @param {string} tagName name of the tag of the node to sanitize
   */


  var _basicCustomElementTest = function _basicCustomElementTest(tagName) {
    return tagName.indexOf('-') > 0;
  };
  /**
   * _sanitizeAttributes
   *
   * @protect attributes
   * @protect nodeName
   * @protect removeAttribute
   * @protect setAttribute
   *
   * @param  {Node} currentNode to sanitize
   */


  var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
    var attr;
    var value;
    var lcName;
    var l;
    /* Execute a hook if present */

    _executeHook('beforeSanitizeAttributes', currentNode, null);

    var attributes = currentNode.attributes;
    /* Check if we have attributes; if not we might have a text node */

    if (!attributes) {
      return;
    }

    var hookEvent = {
      attrName: '',
      attrValue: '',
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR
    };
    l = attributes.length;
    /* Go backwards over all attributes; safely remove bad ones */

    while (l--) {
      attr = attributes[l];
      var _attr = attr,
          name = _attr.name,
          namespaceURI = _attr.namespaceURI;
      value = name === 'value' ? attr.value : stringTrim(attr.value);
      lcName = transformCaseFunc(name);
      /* Execute a hook if present */

      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set

      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);

      value = hookEvent.attrValue;
      /* Did the hooks approve of the attribute? */

      if (hookEvent.forceKeepAttr) {
        continue;
      }
      /* Remove attribute */


      _removeAttribute(name, currentNode);
      /* Did the hooks approve of the attribute? */


      if (!hookEvent.keepAttr) {
        continue;
      }
      /* Work around a security issue in jQuery 3.0 */


      if (regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);

        continue;
      }
      /* Sanitize attribute content to be template-safe */


      if (SAFE_FOR_TEMPLATES) {
        value = stringReplace(value, MUSTACHE_EXPR$1, ' ');
        value = stringReplace(value, ERB_EXPR$1, ' ');
      }
      /* Is `value` valid for this attribute? */


      var lcTag = transformCaseFunc(currentNode.nodeName);

      if (!_isValidAttribute(lcTag, lcName, value)) {
        continue;
      }
      /* Handle invalid data-* attribute set by try-catching it */


      try {
        if (namespaceURI) {
          currentNode.setAttributeNS(namespaceURI, name, value);
        } else {
          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
          currentNode.setAttribute(name, value);
        }

        arrayPop(DOMPurify.removed);
      } catch (_) {}
    }
    /* Execute a hook if present */


    _executeHook('afterSanitizeAttributes', currentNode, null);
  };
  /**
   * _sanitizeShadowDOM
   *
   * @param  {DocumentFragment} fragment to iterate over recursively
   */


  var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
    var shadowNode;

    var shadowIterator = _createIterator(fragment);
    /* Execute a hook if present */


    _executeHook('beforeSanitizeShadowDOM', fragment, null);

    while (shadowNode = shadowIterator.nextNode()) {
      /* Execute a hook if present */
      _executeHook('uponSanitizeShadowNode', shadowNode, null);
      /* Sanitize tags and elements */


      if (_sanitizeElements(shadowNode)) {
        continue;
      }
      /* Deep shadow DOM detected */


      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(shadowNode.content);
      }
      /* Check attributes, sanitize if necessary */


      _sanitizeAttributes(shadowNode);
    }
    /* Execute a hook if present */


    _executeHook('afterSanitizeShadowDOM', fragment, null);
  };
  /**
   * Sanitize
   * Public method providing core sanitation functionality
   *
   * @param {String|Node} dirty string or DOM node
   * @param {Object} configuration object
   */
  // eslint-disable-next-line complexity


  DOMPurify.sanitize = function (dirty, cfg) {
    var body;
    var importedNode;
    var currentNode;
    var oldNode;
    var returnNode;
    /* Make sure we have a string to sanitize.
      DO NOT return early, as this will return the wrong type if
      the user has requested a DOM object rather than a string */

    IS_EMPTY_INPUT = !dirty;

    if (IS_EMPTY_INPUT) {
      dirty = '<!-->';
    }
    /* Stringify, in case dirty is an object */


    if (typeof dirty !== 'string' && !_isNode(dirty)) {
      // eslint-disable-next-line no-negated-condition
      if (typeof dirty.toString !== 'function') {
        throw typeErrorCreate('toString is not a function');
      } else {
        dirty = dirty.toString();

        if (typeof dirty !== 'string') {
          throw typeErrorCreate('dirty is not a string, aborting');
        }
      }
    }
    /* Check we can run. Otherwise fall back or ignore */


    if (!DOMPurify.isSupported) {
      if (_typeof$8(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
        if (typeof dirty === 'string') {
          return window.toStaticHTML(dirty);
        }

        if (_isNode(dirty)) {
          return window.toStaticHTML(dirty.outerHTML);
        }
      }

      return dirty;
    }
    /* Assign config vars */


    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    /* Clean up removed elements */


    DOMPurify.removed = [];
    /* Check if dirty is correctly typed for IN_PLACE */

    if (typeof dirty === 'string') {
      IN_PLACE = false;
    }

    if (IN_PLACE) {
      /* Do some early pre-sanitization to avoid unsafe root nodes */
      if (dirty.nodeName) {
        var tagName = transformCaseFunc(dirty.nodeName);

        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
        }
      }
    } else if (dirty instanceof Node) {
      /* If dirty is a DOM element, append to an empty document to avoid
         elements being stripped by the parser */
      body = _initDocument('<!---->');
      importedNode = body.ownerDocument.importNode(dirty, true);

      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
        /* Node is already a body, use as is */
        body = importedNode;
      } else if (importedNode.nodeName === 'HTML') {
        body = importedNode;
      } else {
        // eslint-disable-next-line unicorn/prefer-dom-node-append
        body.appendChild(importedNode);
      }
    } else {
      /* Exit directly if we have nothing to do */
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf('<') === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      /* Initialize the document to work on */


      body = _initDocument(dirty);
      /* Check we have a DOM node from the data */

      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
      }
    }
    /* Remove first element node (ours) if FORCE_BODY is set */


    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    /* Get node iterator */


    var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
    /* Now start iterating over the created document */


    while (currentNode = nodeIterator.nextNode()) {
      /* Fix IE's strange behavior with manipulated textNodes #89 */
      if (currentNode.nodeType === 3 && currentNode === oldNode) {
        continue;
      }
      /* Sanitize tags and elements */


      if (_sanitizeElements(currentNode)) {
        continue;
      }
      /* Shadow DOM detected, sanitize it */


      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
      /* Check attributes, sanitize if necessary */


      _sanitizeAttributes(currentNode);

      oldNode = currentNode;
    }

    oldNode = null;
    /* If we sanitized `dirty` in-place, return it. */

    if (IN_PLACE) {
      return dirty;
    }
    /* Return sanitized string or DOM */


    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);

        while (body.firstChild) {
          // eslint-disable-next-line unicorn/prefer-dom-node-append
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }

      if (ALLOWED_ATTR.shadowroot) {
        /*
          AdoptNode() is not used because internal state is not reset
          (e.g. the past names map of a HTMLFormElement), this is safe
          in theory but we would rather not risk another attack vector.
          The state that is cloned by importNode() is explicitly defined
          by the specs.
        */
        returnNode = importNode.call(originalDocument, returnNode, true);
      }

      return returnNode;
    }

    var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    /* Serialize doctype if allowed */

    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
    }
    /* Sanitize final string template-safe */


    if (SAFE_FOR_TEMPLATES) {
      serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, ' ');
      serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, ' ');
    }

    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  /**
   * Public method to set the configuration once
   * setConfig
   *
   * @param {Object} cfg configuration object
   */


  DOMPurify.setConfig = function (cfg) {
    _parseConfig(cfg);

    SET_CONFIG = true;
  };
  /**
   * Public method to remove the configuration
   * clearConfig
   *
   */


  DOMPurify.clearConfig = function () {
    CONFIG = null;
    SET_CONFIG = false;
  };
  /**
   * Public method to check if an attribute value is valid.
   * Uses last set config, if any. Otherwise, uses config defaults.
   * isValidAttribute
   *
   * @param  {string} tag Tag name of containing element.
   * @param  {string} attr Attribute name.
   * @param  {string} value Attribute value.
   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
   */


  DOMPurify.isValidAttribute = function (tag, attr, value) {
    /* Initialize shared config vars if necessary. */
    if (!CONFIG) {
      _parseConfig({});
    }

    var lcTag = transformCaseFunc(tag);
    var lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  /**
   * AddHook
   * Public method to add DOMPurify hooks
   *
   * @param {String} entryPoint entry point for the hook to add
   * @param {Function} hookFunction function to execute
   */


  DOMPurify.addHook = function (entryPoint, hookFunction) {
    if (typeof hookFunction !== 'function') {
      return;
    }

    hooks[entryPoint] = hooks[entryPoint] || [];
    arrayPush(hooks[entryPoint], hookFunction);
  };
  /**
   * RemoveHook
   * Public method to remove a DOMPurify hook at a given entryPoint
   * (pops it from the stack of hooks if more are present)
   *
   * @param {String} entryPoint entry point for the hook to remove
   * @return {Function} removed(popped) hook
   */


  DOMPurify.removeHook = function (entryPoint) {
    if (hooks[entryPoint]) {
      return arrayPop(hooks[entryPoint]);
    }
  };
  /**
   * RemoveHooks
   * Public method to remove all DOMPurify hooks at a given entryPoint
   *
   * @param  {String} entryPoint entry point for the hooks to remove
   */


  DOMPurify.removeHooks = function (entryPoint) {
    if (hooks[entryPoint]) {
      hooks[entryPoint] = [];
    }
  };
  /**
   * RemoveAllHooks
   * Public method to remove all DOMPurify hooks
   *
   */


  DOMPurify.removeAllHooks = function () {
    hooks = {};
  };

  return DOMPurify;
}

var purify = createDOMPurify();

const isBrowser = typeof window !== 'undefined';
const DOMPurify = isBrowser && purify(window); //TODO Html mdx, test

const Html = ({
  value
}) => /*#__PURE__*/React.createElement("span", {
  // eslint-disable-next-line react/no-danger
  dangerouslySetInnerHTML: {
    __html: DOMPurify.sanitize(value)
  }
});

Html.displayName = 'HTML';
Html.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]).isRequired
};

const chrome = navigator.userAgent.includes('Chrome');
      navigator.userAgent.includes('Firefox');
      const safari = navigator.userAgent.includes('Safari');
const isSafari = safari && !chrome;

var scss$3 = {"text--truncate":"Logo_text--truncate__D5C9w","logo__animated":"Logo_logo__animated__87Kfc","logotype":"Logo_logotype__D7ltC","rectangle":"Logo_rectangle__eTRH5","triangle":"Logo_triangle__0ROGa","swoopInLeft":"Logo_swoopInLeft__uM-96","rectangle_safari":"Logo_rectangle_safari__8Mxhi","swoopInLeftSafari":"Logo_swoopInLeftSafari__Pn7ks","flip":"Logo_flip__ULjCy","fadeIn":"Logo_fadeIn__sDcvU"};

const cssClass$3 = styles$1b(scss$3);
/**
 * Logo - stateless presentational component
 * @param {object} props - props
 */

function LongLogo() {
  return /*#__PURE__*/React.createElement("div", {
    className: cssClass$3('logo Logo__logo__animated')
  }, /*#__PURE__*/React.createElement("svg", {
    enableBackground: "new 0 0 145 23.5",
    height: "20px",
    version: "1.1",
    viewBox: "0 0 145 23.5",
    xmlSpace: "preserve",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("path", {
    className: cssClass$3('logotype'),
    d: "m129.8 5.3c1.4 0 2.6 0.5 3.6 1.5v-1.2h3.1v10.9c0 1.9-0.6 3.5-1.9 4.6s-2.9 1.7-4.8 1.7c-2.1 0-4-0.6-5.6-1.8l1.3-2.5c1.4 0.9 2.8 1.4 4.2 1.4 2.3 0 3.6-1.3 3.6-3.1v-0.5c-0.9 0.9-2.1 1.4-3.6 1.4-1.8 0-3.2-0.6-4.3-1.7-1.1-1.2-1.7-2.6-1.7-4.4s0.6-3.3 1.8-4.5c1-1.3 2.5-1.8 4.3-1.8zm-71.3 0c1.5 0 2.7 0.5 3.7 1.6v-1.3h3.3v12h-3.3v-1.2c-1 1-2.3 1.5-3.7 1.5-1.7 0-3.1-0.6-4.3-1.8-1.1-1.2-1.7-2.7-1.7-4.6 0-1.8 0.6-3.3 1.7-4.5 1.1-1.1 2.6-1.7 4.3-1.7zm38.7-3.9v16.2h-3.3v-1.3c-0.9 1.1-2.1 1.6-3.6 1.6-1.7 0-3.1-0.6-4.2-1.8s-1.7-2.7-1.7-4.5 0.6-3.3 1.7-4.5 2.5-1.8 4.2-1.8c1.4 0 2.5 0.5 3.5 1.5v-5.4h3.4zm-55 0v12.8h8.1v3.5h-11.7v-16.3h3.6zm34.3 3.8c1.3 0 2.4 0.4 3.3 1.3s1.4 2.1 1.4 3.7v7.4h-3.4v-6.5c0-1.8-0.9-2.7-2.3-2.7-1.6 0-2.6 1.1-2.6 2.8v6.4h-3.4v-12h3.4v1.7c0.5-1.2 1.9-2.1 3.6-2.1zm28.2 0.4v12h-3.4v-12h3.4zm11.1-0.4c1.3 0 2.4 0.4 3.3 1.3s1.4 2.1 1.4 3.7v7.4h-3.5v-6.5c0-1.8-0.9-2.7-2.3-2.7-1.6 0-2.6 1.1-2.6 2.8v6.4h-3.4v-12h3.4v1.7c0.5-1.2 1.9-2.1 3.7-2.1zm28.1 0.4v12h-3.4v-12h3.4zm-84.9 2.8c-0.9 0-1.6 0.3-2.2 0.9-0.5 0.7-0.8 1.4-0.8 2.3s0.3 1.6 0.9 2.3c0.6 0.6 1.3 0.9 2.2 0.9s1.6-0.3 2.2-0.9 0.9-1.4 0.9-2.3-0.3-1.6-0.9-2.2c-0.6-0.7-1.3-1-2.3-1zm31.9 0c-0.9 0-1.6 0.3-2.2 0.9s-0.9 1.4-0.9 2.2c0 0.9 0.3 1.7 0.9 2.3s1.3 0.9 2.2 0.9 1.6-0.3 2.2-0.9 0.9-1.4 0.9-2.3-0.3-1.6-0.9-2.2-1.3-0.9-2.2-0.9zm39.3 0c-0.9 0-1.6 0.3-2.2 0.9s-0.9 1.3-0.9 2.2 0.3 1.6 0.9 2.2 1.3 0.9 2.2 0.9 1.6-0.3 2.2-0.9 0.9-1.4 0.9-2.3c-0.1-1.7-1.4-3-3.1-3zm-27.2-8.1c1.1 0 2 0.9 2 2 0 1.2-0.9 2-2 2-1.2 0-2.1-0.9-2.1-2 0.1-1.2 1-2 2.1-2zm39.2 0c1.1 0 2 0.9 2 2 0 1.2-0.9 2-2 2-1.2 0-2.1-0.9-2.1-2 0.1-1.2 1-2 2.1-2z",
    fill: "#2550AA"
  }), /*#__PURE__*/React.createElement("rect", {
    className: cssClass$3('white'),
    fill: "#FFFFFF",
    height: "23.5",
    width: "33.3"
  }), /*#__PURE__*/React.createElement("rect", {
    className: cssClass$3(isSafari ? 'rectangle_safari' : 'rectangle'),
    fill: "#2550AA",
    height: "20.1",
    transform: "matrix(.7071 -.7071 .7071 .7071 -5.3426 11.257)",
    width: "10.2",
    x: "5.8",
    y: "2"
  }), /*#__PURE__*/React.createElement("polygon", {
    className: cssClass$3('triangle'),
    fill: "#2550AA",
    points: "21.6 1.4 28.7 8.5 21.6 15.5"
  })));
}

function ShortLogo() {
  return /*#__PURE__*/React.createElement("div", {
    className: cssClass$3('logo Logo__logo__animated')
  }, /*#__PURE__*/React.createElement("svg", {
    enableBackground: "new 0 0 50 23.5",
    height: "20px",
    version: "1.1",
    viewBox: "0 0 50 23.5",
    xmlSpace: "preserve",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("rect", {
    className: cssClass$3(isSafari ? 'rectangle_safari' : 'rectangle'),
    fill: "#2550AA",
    height: "20.1",
    transform: "matrix(.7071 -.7071 .7071 .7071 -5.3426 11.257)",
    width: "10.2",
    x: "5.8",
    y: "2"
  }), /*#__PURE__*/React.createElement("polygon", {
    className: cssClass$3('triangle'),
    fill: "#2550AA",
    points: "21.6 1.4 28.7 8.5 21.6 15.5"
  })));
}

LongLogo.displayName = 'Logo long';
ShortLogo.displayName = 'Logo short';
LongLogo.defaultProps = {
  className: 'logo Logo__logo__animated'
};
ShortLogo.defaultProps = {
  className: 'logo Logo__logo__animated'
};

function _extends$6() {
  _extends$6 = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends$6.apply(this, arguments);
}

const NO_VALUE = 'NO_VALUE';

var styles$19 = {"text--truncate":"Label-module_text--truncate__5NoLZ","label":"Label-module_label__meqL2","label--normal":"Label-module_label--normal__rCpai","label--active":"Label-module_label--active__IBUXi","label--inactive":"Label-module_label--inactive__z5W0k"};

/**
 * Label - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string|array} props.className - list of class names, default: `label`
 * @param {string} props.id - input id
 * @param {bool} props.isToggle - is toggle label
 * @param {bool} props.toggle - toggle change
 * @return {object} An object of children element
 */

const Label = ({
  children,
  className,
  id,
  isToggle,
  toggle
}) => {
  const labelStyles = useStyles({
    [styles$19.label]: true,
    [styles$19['label--normal']]: !isToggle,
    [styles$19['label--active']]: isToggle && toggle,
    [styles$19['label--inactive']]: isToggle && !toggle
  }, className);
  return /*#__PURE__*/React.createElement("label", {
    className: labelStyles,
    id: id
  }, children);
};

Label.displayName = 'Label';
Label.propTypes = {
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  id: propTypes.exports.string,
  isToggle: propTypes.exports.bool,
  toggle: propTypes.exports.bool
};
Label.defaultProps = {
  className: '',
  id: null,
  isToggle: false,
  toggle: false
};

/**
A function that returns a universally unique identifier (uuid).  
example: 1b83fd69-abe7-468c-bea1-306a8aa1c81d
@returns `string` : 32 character uuid (see example)
*/

function uuid() {
  const hashTable = ['a', 'b', 'c', 'd', 'e', 'f', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
  let uuid = [];

  for (let i = 0; i < 35; i++) {
    if (i === 7 || i === 12 || i === 17 || i === 22) {
      uuid[i] = '-';
    } else {
      uuid[i] = hashTable[Math.floor(Math.random() * hashTable.length - 1)];
    }
  }

  return uuid.join('');
}

var uuid_1 = uuid;

function rng() {
  return crypto.randomBytes(16);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];

for (var i$1 = 0; i$1 < 256; ++i$1) {
  byteToHex[i$1] = (i$1 + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
}

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof options == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }

  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

function _classCallCheck$8(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$8(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$8(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$8(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$8(Constructor, staticProps);
  return Constructor;
}

function _defineProperty$9(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$5() {
  _extends$5 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$5.apply(this, arguments);
}

function ownKeys$7(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$7(Object(source), true).forEach(function (key) {
        _defineProperty$9(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$7(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits$8(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf$8(subClass, superClass);
}

function _getPrototypeOf$8(o) {
  _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$8(o);
}

function _setPrototypeOf$8(o, p) {
  _setPrototypeOf$8 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$8(o, p);
}

function _assertThisInitialized$8(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn$8(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized$8(self);
}

var CONSTANT = {
  GLOBAL: {
    HIDE: '__react_tooltip_hide_event',
    REBUILD: '__react_tooltip_rebuild_event',
    SHOW: '__react_tooltip_show_event'
  }
};
/**
 * Static methods for react-tooltip
 */

var dispatchGlobalEvent = function dispatchGlobalEvent(eventName, opts) {
  // Compatible with IE
  // @see http://stackoverflow.com/questions/26596123/internet-explorer-9-10-11-event-constructor-doesnt-work
  // @see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
  var event;

  if (typeof window.CustomEvent === 'function') {
    event = new window.CustomEvent(eventName, {
      detail: opts
    });
  } else {
    event = document.createEvent('Event');
    event.initEvent(eventName, false, true, opts);
  }

  window.dispatchEvent(event);
};

function staticMethods(target) {
  /**
   * Hide all tooltip
   * @trigger ReactTooltip.hide()
   */
  target.hide = function (target) {
    dispatchGlobalEvent(CONSTANT.GLOBAL.HIDE, {
      target: target
    });
  };
  /**
   * Rebuild all tooltip
   * @trigger ReactTooltip.rebuild()
   */


  target.rebuild = function () {
    dispatchGlobalEvent(CONSTANT.GLOBAL.REBUILD);
  };
  /**
   * Show specific tooltip
   * @trigger ReactTooltip.show()
   */


  target.show = function (target) {
    dispatchGlobalEvent(CONSTANT.GLOBAL.SHOW, {
      target: target
    });
  };

  target.prototype.globalRebuild = function () {
    if (this.mount) {
      this.unbindListener();
      this.bindListener();
    }
  };

  target.prototype.globalShow = function (event) {
    if (this.mount) {
      var hasTarget = event && event.detail && event.detail.target && true || false; // Create a fake event, specific show will limit the type to `solid`
      // only `float` type cares e.clientX e.clientY

      this.showTooltip({
        currentTarget: hasTarget && event.detail.target
      }, true);
    }
  };

  target.prototype.globalHide = function (event) {
    if (this.mount) {
      var hasTarget = event && event.detail && event.detail.target && true || false;
      this.hideTooltip({
        currentTarget: hasTarget && event.detail.target
      }, hasTarget);
    }
  };
}
/**
 * Events that should be bound to the window
 */


function windowListener(target) {
  target.prototype.bindWindowEvents = function (resizeHide) {
    // ReactTooltip.hide
    window.removeEventListener(CONSTANT.GLOBAL.HIDE, this.globalHide);
    window.addEventListener(CONSTANT.GLOBAL.HIDE, this.globalHide, false); // ReactTooltip.rebuild

    window.removeEventListener(CONSTANT.GLOBAL.REBUILD, this.globalRebuild);
    window.addEventListener(CONSTANT.GLOBAL.REBUILD, this.globalRebuild, false); // ReactTooltip.show

    window.removeEventListener(CONSTANT.GLOBAL.SHOW, this.globalShow);
    window.addEventListener(CONSTANT.GLOBAL.SHOW, this.globalShow, false); // Resize

    if (resizeHide) {
      window.removeEventListener('resize', this.onWindowResize);
      window.addEventListener('resize', this.onWindowResize, false);
    }
  };

  target.prototype.unbindWindowEvents = function () {
    window.removeEventListener(CONSTANT.GLOBAL.HIDE, this.globalHide);
    window.removeEventListener(CONSTANT.GLOBAL.REBUILD, this.globalRebuild);
    window.removeEventListener(CONSTANT.GLOBAL.SHOW, this.globalShow);
    window.removeEventListener('resize', this.onWindowResize);
  };
  /**
   * invoked by resize event of window
   */


  target.prototype.onWindowResize = function () {
    if (!this.mount) return;
    this.hideTooltip();
  };
}
/**
 * Custom events to control showing and hiding of tooltip
 *
 * @attributes
 * - `event` {String}
 * - `eventOff` {String}
 */


var checkStatus = function checkStatus(dataEventOff, e) {
  var show = this.state.show;
  var id = this.props.id;
  var isCapture = this.isCapture(e.currentTarget);
  var currentItem = e.currentTarget.getAttribute('currentItem');
  if (!isCapture) e.stopPropagation();

  if (show && currentItem === 'true') {
    if (!dataEventOff) this.hideTooltip(e);
  } else {
    e.currentTarget.setAttribute('currentItem', 'true');
    setUntargetItems(e.currentTarget, this.getTargetArray(id));
    this.showTooltip(e);
  }
};

var setUntargetItems = function setUntargetItems(currentTarget, targetArray) {
  for (var i = 0; i < targetArray.length; i++) {
    if (currentTarget !== targetArray[i]) {
      targetArray[i].setAttribute('currentItem', 'false');
    } else {
      targetArray[i].setAttribute('currentItem', 'true');
    }
  }
};

var customListeners = {
  id: '9b69f92e-d3fe-498b-b1b4-c5e63a51b0cf',
  set: function set(target, event, listener) {
    if (this.id in target) {
      var map = target[this.id];
      map[event] = listener;
    } else {
      // this is workaround for WeakMap, which is not supported in older browsers, such as IE
      Object.defineProperty(target, this.id, {
        configurable: true,
        value: _defineProperty$9({}, event, listener)
      });
    }
  },
  get: function get(target, event) {
    var map = target[this.id];

    if (map !== undefined) {
      return map[event];
    }
  }
};

function customEvent(target) {
  target.prototype.isCustomEvent = function (ele) {
    var event = this.state.event;
    return event || !!ele.getAttribute('data-event');
  };
  /* Bind listener for custom event */


  target.prototype.customBindListener = function (ele) {
    var _this = this;

    var _this$state = this.state,
        event = _this$state.event,
        eventOff = _this$state.eventOff;
    var dataEvent = ele.getAttribute('data-event') || event;
    var dataEventOff = ele.getAttribute('data-event-off') || eventOff;
    dataEvent.split(' ').forEach(function (event) {
      ele.removeEventListener(event, customListeners.get(ele, event));
      var customListener = checkStatus.bind(_this, dataEventOff);
      customListeners.set(ele, event, customListener);
      ele.addEventListener(event, customListener, false);
    });

    if (dataEventOff) {
      dataEventOff.split(' ').forEach(function (event) {
        ele.removeEventListener(event, _this.hideTooltip);
        ele.addEventListener(event, _this.hideTooltip, false);
      });
    }
  };
  /* Unbind listener for custom event */


  target.prototype.customUnbindListener = function (ele) {
    var _this$state2 = this.state,
        event = _this$state2.event,
        eventOff = _this$state2.eventOff;
    var dataEvent = event || ele.getAttribute('data-event');
    var dataEventOff = eventOff || ele.getAttribute('data-event-off');
    ele.removeEventListener(dataEvent, customListeners.get(ele, event));
    if (dataEventOff) ele.removeEventListener(dataEventOff, this.hideTooltip);
  };
}
/**
 * Util method to judge if it should follow capture model
 */


function isCapture(target) {
  target.prototype.isCapture = function (currentTarget) {
    return currentTarget && currentTarget.getAttribute('data-iscapture') === 'true' || this.props.isCapture || false;
  };
}
/**
 * Util method to get effect
 */


function getEffect(target) {
  target.prototype.getEffect = function (currentTarget) {
    var dataEffect = currentTarget.getAttribute('data-effect');
    return dataEffect || this.props.effect || 'float';
  };
}
/**
 * Util method to get effect
 */


var makeProxy = function makeProxy(e) {
  var proxy = {};

  for (var key in e) {
    if (typeof e[key] === 'function') {
      proxy[key] = e[key].bind(e);
    } else {
      proxy[key] = e[key];
    }
  }

  return proxy;
};

var bodyListener = function bodyListener(callback, options, e) {
  var _options$respectEffec = options.respectEffect,
      respectEffect = _options$respectEffec === void 0 ? false : _options$respectEffec,
      _options$customEvent = options.customEvent,
      customEvent = _options$customEvent === void 0 ? false : _options$customEvent;
  var id = this.props.id;
  var tip = e.target.getAttribute('data-tip') || null;
  var forId = e.target.getAttribute('data-for') || null;
  var target = e.target;

  if (this.isCustomEvent(target) && !customEvent) {
    return;
  }

  var isTargetBelongsToTooltip = id == null && forId == null || forId === id;

  if (tip != null && (!respectEffect || this.getEffect(target) === 'float') && isTargetBelongsToTooltip) {
    var proxy = makeProxy(e);
    proxy.currentTarget = target;
    callback(proxy);
  }
};

var findCustomEvents = function findCustomEvents(targetArray, dataAttribute) {
  var events = {};
  targetArray.forEach(function (target) {
    var event = target.getAttribute(dataAttribute);
    if (event) event.split(' ').forEach(function (event) {
      return events[event] = true;
    });
  });
  return events;
};

var getBody = function getBody() {
  return document.getElementsByTagName('body')[0];
};

function bodyMode(target) {
  target.prototype.isBodyMode = function () {
    return !!this.props.bodyMode;
  };

  target.prototype.bindBodyListener = function (targetArray) {
    var _this = this;

    var _this$state = this.state,
        event = _this$state.event,
        eventOff = _this$state.eventOff,
        possibleCustomEvents = _this$state.possibleCustomEvents,
        possibleCustomEventsOff = _this$state.possibleCustomEventsOff;
    var body = getBody();
    var customEvents = findCustomEvents(targetArray, 'data-event');
    var customEventsOff = findCustomEvents(targetArray, 'data-event-off');
    if (event != null) customEvents[event] = true;
    if (eventOff != null) customEventsOff[eventOff] = true;
    possibleCustomEvents.split(' ').forEach(function (event) {
      return customEvents[event] = true;
    });
    possibleCustomEventsOff.split(' ').forEach(function (event) {
      return customEventsOff[event] = true;
    });
    this.unbindBodyListener(body);
    var listeners = this.bodyModeListeners = {};

    if (event == null) {
      listeners.mouseover = bodyListener.bind(this, this.showTooltip, {});
      listeners.mousemove = bodyListener.bind(this, this.updateTooltip, {
        respectEffect: true
      });
      listeners.mouseout = bodyListener.bind(this, this.hideTooltip, {});
    }

    for (var _event in customEvents) {
      listeners[_event] = bodyListener.bind(this, function (e) {
        var targetEventOff = e.currentTarget.getAttribute('data-event-off') || eventOff;
        checkStatus.call(_this, targetEventOff, e);
      }, {
        customEvent: true
      });
    }

    for (var _event2 in customEventsOff) {
      listeners[_event2] = bodyListener.bind(this, this.hideTooltip, {
        customEvent: true
      });
    }

    for (var _event3 in listeners) {
      body.addEventListener(_event3, listeners[_event3]);
    }
  };

  target.prototype.unbindBodyListener = function (body) {
    body = body || getBody();
    var listeners = this.bodyModeListeners;

    for (var event in listeners) {
      body.removeEventListener(event, listeners[event]);
    }
  };
}
/**
 * Tracking target removing from DOM.
 * It's necessary to hide tooltip when it's target disappears.
 * Otherwise, the tooltip would be shown forever until another target
 * is triggered.
 *
 * If MutationObserver is not available, this feature just doesn't work.
 */
// https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/


var getMutationObserverClass = function getMutationObserverClass() {
  return window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
};

function trackRemoval(target) {
  target.prototype.bindRemovalTracker = function () {
    var _this = this;

    var MutationObserver = getMutationObserverClass();
    if (MutationObserver == null) return;
    var observer = new MutationObserver(function (mutations) {
      for (var m1 = 0; m1 < mutations.length; m1++) {
        var mutation = mutations[m1];

        for (var m2 = 0; m2 < mutation.removedNodes.length; m2++) {
          var element = mutation.removedNodes[m2];

          if (element === _this.state.currentTarget) {
            _this.hideTooltip();

            return;
          }
        }
      }
    });
    observer.observe(window.document, {
      childList: true,
      subtree: true
    });
    this.removalTracker = observer;
  };

  target.prototype.unbindRemovalTracker = function () {
    if (this.removalTracker) {
      this.removalTracker.disconnect();
      this.removalTracker = null;
    }
  };
}
/**
 * Calculate the position of tooltip
 *
 * @params
 * - `e` {Event} the event of current mouse
 * - `target` {Element} the currentTarget of the event
 * - `node` {DOM} the react-tooltip object
 * - `place` {String} top / right / bottom / left
 * - `effect` {String} float / solid
 * - `offset` {Object} the offset to default position
 *
 * @return {Object}
 * - `isNewState` {Bool} required
 * - `newState` {Object}
 * - `position` {Object} {left: {Number}, top: {Number}}
 */


function getPosition(e, target, node, place, desiredPlace, effect, offset) {
  var _getDimensions = getDimensions(node),
      tipWidth = _getDimensions.width,
      tipHeight = _getDimensions.height;

  var _getDimensions2 = getDimensions(target),
      targetWidth = _getDimensions2.width,
      targetHeight = _getDimensions2.height;

  var _getCurrentOffset = getCurrentOffset(e, target, effect),
      mouseX = _getCurrentOffset.mouseX,
      mouseY = _getCurrentOffset.mouseY;

  var defaultOffset = getDefaultPosition(effect, targetWidth, targetHeight, tipWidth, tipHeight);

  var _calculateOffset = calculateOffset(offset),
      extraOffsetX = _calculateOffset.extraOffsetX,
      extraOffsetY = _calculateOffset.extraOffsetY;

  var windowWidth = window.innerWidth;
  var windowHeight = window.innerHeight;

  var _getParent = getParent(node),
      parentTop = _getParent.parentTop,
      parentLeft = _getParent.parentLeft; // Get the edge offset of the tooltip


  var getTipOffsetLeft = function getTipOffsetLeft(place) {
    var offsetX = defaultOffset[place].l;
    return mouseX + offsetX + extraOffsetX;
  };

  var getTipOffsetRight = function getTipOffsetRight(place) {
    var offsetX = defaultOffset[place].r;
    return mouseX + offsetX + extraOffsetX;
  };

  var getTipOffsetTop = function getTipOffsetTop(place) {
    var offsetY = defaultOffset[place].t;
    return mouseY + offsetY + extraOffsetY;
  };

  var getTipOffsetBottom = function getTipOffsetBottom(place) {
    var offsetY = defaultOffset[place].b;
    return mouseY + offsetY + extraOffsetY;
  }; //
  // Functions to test whether the tooltip's sides are inside
  // the client window for a given orientation p
  //
  //  _____________
  // |             | <-- Right side
  // | p = 'left'  |\
  // |             |/  |\
  // |_____________|   |_\  <-- Mouse
  //      / \           |
  //       |
  //       |
  //  Bottom side
  //


  var outsideLeft = function outsideLeft(p) {
    return getTipOffsetLeft(p) < 0;
  };

  var outsideRight = function outsideRight(p) {
    return getTipOffsetRight(p) > windowWidth;
  };

  var outsideTop = function outsideTop(p) {
    return getTipOffsetTop(p) < 0;
  };

  var outsideBottom = function outsideBottom(p) {
    return getTipOffsetBottom(p) > windowHeight;
  }; // Check whether the tooltip with orientation p is completely inside the client window


  var outside = function outside(p) {
    return outsideLeft(p) || outsideRight(p) || outsideTop(p) || outsideBottom(p);
  };

  var inside = function inside(p) {
    return !outside(p);
  };

  var placesList = ['top', 'bottom', 'left', 'right'];
  var insideList = [];

  for (var i = 0; i < 4; i++) {
    var p = placesList[i];

    if (inside(p)) {
      insideList.push(p);
    }
  }

  var isNewState = false;
  var newPlace;
  var shouldUpdatePlace = desiredPlace !== place;

  if (inside(desiredPlace) && shouldUpdatePlace) {
    isNewState = true;
    newPlace = desiredPlace;
  } else if (insideList.length > 0 && outside(desiredPlace) && outside(place)) {
    isNewState = true;
    newPlace = insideList[0];
  }

  if (isNewState) {
    return {
      isNewState: true,
      newState: {
        place: newPlace
      }
    };
  }

  return {
    isNewState: false,
    position: {
      left: parseInt(getTipOffsetLeft(place) - parentLeft, 10),
      top: parseInt(getTipOffsetTop(place) - parentTop, 10)
    }
  };
}

var getDimensions = function getDimensions(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(),
      height = _node$getBoundingClie.height,
      width = _node$getBoundingClie.width;

  return {
    height: parseInt(height, 10),
    width: parseInt(width, 10)
  };
}; // Get current mouse offset


var getCurrentOffset = function getCurrentOffset(e, currentTarget, effect) {
  var boundingClientRect = currentTarget.getBoundingClientRect();
  var targetTop = boundingClientRect.top;
  var targetLeft = boundingClientRect.left;

  var _getDimensions3 = getDimensions(currentTarget),
      targetWidth = _getDimensions3.width,
      targetHeight = _getDimensions3.height;

  if (effect === 'float') {
    return {
      mouseX: e.clientX,
      mouseY: e.clientY
    };
  }

  return {
    mouseX: targetLeft + targetWidth / 2,
    mouseY: targetTop + targetHeight / 2
  };
}; // List all possibility of tooltip final offset
// This is useful in judging if it is necessary for tooltip to switch position when out of window


var getDefaultPosition = function getDefaultPosition(effect, targetWidth, targetHeight, tipWidth, tipHeight) {
  var top;
  var right;
  var bottom;
  var left;
  var disToMouse = 3;
  var triangleHeight = 2;
  var cursorHeight = 12; // Optimize for float bottom only, cause the cursor will hide the tooltip

  if (effect === 'float') {
    top = {
      l: -(tipWidth / 2),
      r: tipWidth / 2,
      t: -(tipHeight + disToMouse + triangleHeight),
      b: -disToMouse
    };
    bottom = {
      l: -(tipWidth / 2),
      r: tipWidth / 2,
      t: disToMouse + cursorHeight,
      b: tipHeight + disToMouse + triangleHeight + cursorHeight
    };
    left = {
      l: -(tipWidth + disToMouse + triangleHeight),
      r: -disToMouse,
      t: -(tipHeight / 2),
      b: tipHeight / 2
    };
    right = {
      l: disToMouse,
      r: tipWidth + disToMouse + triangleHeight,
      t: -(tipHeight / 2),
      b: tipHeight / 2
    };
  } else if (effect === 'solid') {
    top = {
      l: -(tipWidth / 2),
      r: tipWidth / 2,
      t: -(targetHeight / 2 + tipHeight + triangleHeight),
      b: -(targetHeight / 2)
    };
    bottom = {
      l: -(tipWidth / 2),
      r: tipWidth / 2,
      t: targetHeight / 2,
      b: targetHeight / 2 + tipHeight + triangleHeight
    };
    left = {
      l: -(tipWidth + targetWidth / 2 + triangleHeight),
      r: -(targetWidth / 2),
      t: -(tipHeight / 2),
      b: tipHeight / 2
    };
    right = {
      l: targetWidth / 2,
      r: tipWidth + targetWidth / 2 + triangleHeight,
      t: -(tipHeight / 2),
      b: tipHeight / 2
    };
  }

  return {
    top: top,
    bottom: bottom,
    left: left,
    right: right
  };
}; // Consider additional offset into position calculation


var calculateOffset = function calculateOffset(offset) {
  var extraOffsetX = 0;
  var extraOffsetY = 0;

  if (Object.prototype.toString.apply(offset) === '[object String]') {
    offset = JSON.parse(offset.toString().replace(/'/g, '"'));
  }

  for (var key in offset) {
    if (key === 'top') {
      extraOffsetY -= parseInt(offset[key], 10);
    } else if (key === 'bottom') {
      extraOffsetY += parseInt(offset[key], 10);
    } else if (key === 'left') {
      extraOffsetX -= parseInt(offset[key], 10);
    } else if (key === 'right') {
      extraOffsetX += parseInt(offset[key], 10);
    }
  }

  return {
    extraOffsetX: extraOffsetX,
    extraOffsetY: extraOffsetY
  };
}; // Get the offset of the parent elements


var getParent = function getParent(currentTarget) {
  var currentParent = currentTarget;

  while (currentParent) {
    var computedStyle = window.getComputedStyle(currentParent); // transform and will-change: transform change the containing block
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_Block

    if (computedStyle.getPropertyValue('transform') !== 'none' || computedStyle.getPropertyValue('will-change') === 'transform') break;
    currentParent = currentParent.parentElement;
  }

  var parentTop = currentParent && currentParent.getBoundingClientRect().top || 0;
  var parentLeft = currentParent && currentParent.getBoundingClientRect().left || 0;
  return {
    parentTop: parentTop,
    parentLeft: parentLeft
  };
};
/**
 * To get the tooltip content
 * it may comes from data-tip or this.props.children
 * it should support multiline
 *
 * @params
 * - `tip` {String} value of data-tip
 * - `children` {ReactElement} this.props.children
 * - `multiline` {Any} could be Bool(true/false) or String('true'/'false')
 *
 * @return
 * - String or react component
 */


function getTipContent(tip, children, getContent, multiline) {
  if (children) return children;
  if (getContent !== undefined && getContent !== null) return getContent; // getContent can be 0, '', etc.

  if (getContent === null) return null; // Tip not exist and children is null or undefined

  var regexp = /<br\s*\/?>/;

  if (!multiline || multiline === 'false' || !regexp.test(tip)) {
    // No trim(), so that user can keep their input
    return tip;
  } // Multiline tooltip content


  return tip.split(regexp).map(function (d, i) {
    return React.createElement("span", {
      key: i,
      className: "multi-line"
    }, d);
  });
}
/**
 * Support aria- and role in ReactTooltip
 *
 * @params props {Object}
 * @return {Object}
 */


function parseAria(props) {
  var ariaObj = {};
  Object.keys(props).filter(function (prop) {
    // aria-xxx and role is acceptable
    return /(^aria-\w+$|^role$)/.test(prop);
  }).forEach(function (prop) {
    ariaObj[prop] = props[prop];
  });
  return ariaObj;
}
/**
 * Convert nodelist to array
 * @see https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/core/createArrayFromMixed.js#L24
 * NodeLists are functions in Safari
 */


function nodeListToArray(nodeList) {
  var length = nodeList.length;

  if (nodeList.hasOwnProperty) {
    return Array.prototype.slice.call(nodeList);
  }

  return new Array(length).fill().map(function (index) {
    return nodeList[index];
  });
}

function generateUUID() {
  return 't' + v4();
}

var baseCss = ".__react_component_tooltip {\n  border-radius: 3px;\n  display: inline-block;\n  font-size: 13px;\n  left: -999em;\n  opacity: 0;\n  padding: 8px 21px;\n  position: fixed;\n  pointer-events: none;\n  transition: opacity 0.3s ease-out;\n  top: -999em;\n  visibility: hidden;\n  z-index: 999;\n}\n.__react_component_tooltip.allow_hover, .__react_component_tooltip.allow_click {\n  pointer-events: auto;\n}\n.__react_component_tooltip::before, .__react_component_tooltip::after {\n  content: \"\";\n  width: 0;\n  height: 0;\n  position: absolute;\n}\n.__react_component_tooltip.show {\n  opacity: 0.9;\n  margin-top: 0;\n  margin-left: 0;\n  visibility: visible;\n}\n.__react_component_tooltip.place-top::before {\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  bottom: -8px;\n  left: 50%;\n  margin-left: -10px;\n}\n.__react_component_tooltip.place-bottom::before {\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  top: -8px;\n  left: 50%;\n  margin-left: -10px;\n}\n.__react_component_tooltip.place-left::before {\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  right: -8px;\n  top: 50%;\n  margin-top: -5px;\n}\n.__react_component_tooltip.place-right::before {\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  left: -8px;\n  top: 50%;\n  margin-top: -5px;\n}\n.__react_component_tooltip .multi-line {\n  display: block;\n  padding: 2px 0;\n  text-align: center;\n}";
/**
 * Default pop-up style values (text color, background color).
 */

var defaultColors = {
  dark: {
    text: '#fff',
    background: '#222',
    border: 'transparent',
    arrow: '#222'
  },
  success: {
    text: '#fff',
    background: '#8DC572',
    border: 'transparent',
    arrow: '#8DC572'
  },
  warning: {
    text: '#fff',
    background: '#F0AD4E',
    border: 'transparent',
    arrow: '#F0AD4E'
  },
  error: {
    text: '#fff',
    background: '#BE6464',
    border: 'transparent',
    arrow: '#BE6464'
  },
  info: {
    text: '#fff',
    background: '#337AB7',
    border: 'transparent',
    arrow: '#337AB7'
  },
  light: {
    text: '#222',
    background: '#fff',
    border: 'transparent',
    arrow: '#fff'
  }
};

function getDefaultPopupColors(type) {
  return defaultColors[type] ? _objectSpread2({}, defaultColors[type]) : undefined;
}
/**
 * Generates the specific tooltip style for use on render.
 */


function generateTooltipStyle(uuid, customColors, type, hasBorder) {
  return generateStyle(uuid, getPopupColors(customColors, type, hasBorder));
}
/**
 * Generates the tooltip style rules based on the element-specified "data-type" property.
 */


function generateStyle(uuid, colors) {
  var textColor = colors.text;
  var backgroundColor = colors.background;
  var borderColor = colors.border;
  var arrowColor = colors.arrow;
  return "\n  \t.".concat(uuid, " {\n\t    color: ").concat(textColor, ";\n\t    background: ").concat(backgroundColor, ";\n\t    border: 1px solid ").concat(borderColor, ";\n  \t}\n\n  \t.").concat(uuid, ".place-top {\n        margin-top: -10px;\n    }\n    .").concat(uuid, ".place-top::before {\n        border-top: 8px solid ").concat(borderColor, ";\n    }\n    .").concat(uuid, ".place-top::after {\n        border-left: 8px solid transparent;\n        border-right: 8px solid transparent;\n        bottom: -6px;\n        left: 50%;\n        margin-left: -8px;\n        border-top-color: ").concat(arrowColor, ";\n        border-top-style: solid;\n        border-top-width: 6px;\n    }\n\n    .").concat(uuid, ".place-bottom {\n        margin-top: 10px;\n    }\n    .").concat(uuid, ".place-bottom::before {\n        border-bottom: 8px solid ").concat(borderColor, ";\n    }\n    .").concat(uuid, ".place-bottom::after {\n        border-left: 8px solid transparent;\n        border-right: 8px solid transparent;\n        top: -6px;\n        left: 50%;\n        margin-left: -8px;\n        border-bottom-color: ").concat(arrowColor, ";\n        border-bottom-style: solid;\n        border-bottom-width: 6px;\n    }\n\n    .").concat(uuid, ".place-left {\n        margin-left: -10px;\n    }\n    .").concat(uuid, ".place-left::before {\n        border-left: 8px solid ").concat(borderColor, ";\n    }\n    .").concat(uuid, ".place-left::after {\n        border-top: 5px solid transparent;\n        border-bottom: 5px solid transparent;\n        right: -6px;\n        top: 50%;\n        margin-top: -4px;\n        border-left-color: ").concat(arrowColor, ";\n        border-left-style: solid;\n        border-left-width: 6px;\n    }\n\n    .").concat(uuid, ".place-right {\n        margin-left: 10px;\n    }\n    .").concat(uuid, ".place-right::before {\n        border-right: 8px solid ").concat(borderColor, ";\n    }\n    .").concat(uuid, ".place-right::after {\n        border-top: 5px solid transparent;\n        border-bottom: 5px solid transparent;\n        left: -6px;\n        top: 50%;\n        margin-top: -4px;\n        border-right-color: ").concat(arrowColor, ";\n        border-right-style: solid;\n        border-right-width: 6px;\n    }\n  ");
}

function getPopupColors(customColors, type, hasBorder) {
  var textColor = customColors.text;
  var backgroundColor = customColors.background;
  var borderColor = customColors.border;
  var arrowColor = customColors.arrow ? customColors.arrow : customColors.background;
  var colors = getDefaultPopupColors(type);

  if (textColor) {
    colors.text = textColor;
  }

  if (backgroundColor) {
    colors.background = backgroundColor;
  }

  if (hasBorder) {
    if (borderColor) {
      colors.border = borderColor;
    } else {
      colors.border = type === 'light' ? 'black' : 'white';
    }
  }

  if (arrowColor) {
    colors.arrow = arrowColor;
  }

  return colors;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
  return module = {
    exports: {}
  }, fn(module, module.exports), module.exports;
}

var check = function (it) {
  return it && it.Math == Math && it;
}; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


var global_1 = // eslint-disable-next-line es/no-global-this -- safe
check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
check(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
function () {
  return this;
}() || Function('return this')();

var fails = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
}; // Detect IE8's incomplete defineProperty implementation


var descriptors = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, {
    get: function () {
      return 7;
    }
  })[1] != 7;
});
var $propertyIsEnumerable = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({
  1: 2
}, 1); // `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

var f$1 = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;
var objectPropertyIsEnumerable = {
  f: f$1
};

var createPropertyDescriptor = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var toString = {}.toString;

var classofRaw = function (it) {
  return toString.call(it).slice(8, -1);
};

var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings

var indexedObject = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
} : Object; // `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible

var requireObjectCoercible = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
}; // toObject with fallback for non-array-like ES3 strings


var toIndexedObject = function (it) {
  return indexedObject(requireObjectCoercible(it));
};

var isObject = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
}; // `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string


var toPrimitive = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
}; // `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject


var toObject = function (argument) {
  return Object(requireObjectCoercible(argument));
};

var hasOwnProperty = {}.hasOwnProperty;

var has = function hasOwn(it, key) {
  return hasOwnProperty.call(toObject(it), key);
};

var document$1 = global_1.document; // typeof document.createElement is 'object' in old IE

var EXISTS = isObject(document$1) && isObject(document$1.createElement);

var documentCreateElement = function (it) {
  return EXISTS ? document$1.createElement(it) : {};
}; // Thank's IE8 for his funny defineProperty


var ie8DomDefine = !descriptors && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
  return Object.defineProperty(documentCreateElement('div'), 'a', {
    get: function () {
      return 7;
    }
  }).a != 7;
}); // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

var f$1$1 = descriptors ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (ie8DomDefine) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) {
    /* empty */
  }
  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
};
var objectGetOwnPropertyDescriptor = {
  f: f$1$1
};

var anObject = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  }

  return it;
}; // eslint-disable-next-line es/no-object-defineproperty -- safe


var $defineProperty = Object.defineProperty; // `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty

var f$2 = descriptors ? $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (ie8DomDefine) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) {
    /* empty */
  }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};
var objectDefineProperty = {
  f: f$2
};
var createNonEnumerableProperty = descriptors ? function (object, key, value) {
  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var setGlobal = function (key, value) {
  try {
    createNonEnumerableProperty(global_1, key, value);
  } catch (error) {
    global_1[key] = value;
  }

  return value;
};

var SHARED = '__core-js_shared__';
var store = global_1[SHARED] || setGlobal(SHARED, {});
var sharedStore = store;
var functionToString = Function.toString; // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper

if (typeof sharedStore.inspectSource != 'function') {
  sharedStore.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

var inspectSource = sharedStore.inspectSource;
var WeakMap$1 = global_1.WeakMap;
var nativeWeakMap = typeof WeakMap$1 === 'function' && /native code/.test(inspectSource(WeakMap$1));
var shared = createCommonjsModule(function (module) {
  (module.exports = function (key, value) {
    return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: '3.12.1',
    mode: 'global',
    copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
  });
});
var id = 0;
var postfix = Math.random();

var uid = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};

var keys = shared('keys');

var sharedKey = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

var hiddenKeys = {};
var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var WeakMap$1$1 = global_1.WeakMap;
var set, get, has$1;

var enforce = function (it) {
  return has$1(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;

    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    }

    return state;
  };
};

if (nativeWeakMap || sharedStore.state) {
  var store$1 = sharedStore.state || (sharedStore.state = new WeakMap$1$1());
  var wmget = store$1.get;
  var wmhas = store$1.has;
  var wmset = store$1.set;

  set = function (it, metadata) {
    if (wmhas.call(store$1, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset.call(store$1, it, metadata);
    return metadata;
  };

  get = function (it) {
    return wmget.call(store$1, it) || {};
  };

  has$1 = function (it) {
    return wmhas.call(store$1, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;

  set = function (it, metadata) {
    if (has(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };

  get = function (it) {
    return has(it, STATE) ? it[STATE] : {};
  };

  has$1 = function (it) {
    return has(it, STATE);
  };
}

var internalState = {
  set: set,
  get: get,
  has: has$1,
  enforce: enforce,
  getterFor: getterFor
};
var redefine = createCommonjsModule(function (module) {
  var getInternalState = internalState.get;
  var enforceInternalState = internalState.enforce;
  var TEMPLATE = String(String).split('String');
  (module.exports = function (O, key, value, options) {
    var unsafe = options ? !!options.unsafe : false;
    var simple = options ? !!options.enumerable : false;
    var noTargetGet = options ? !!options.noTargetGet : false;
    var state;

    if (typeof value == 'function') {
      if (typeof key == 'string' && !has(value, 'name')) {
        createNonEnumerableProperty(value, 'name', key);
      }

      state = enforceInternalState(value);

      if (!state.source) {
        state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
      }
    }

    if (O === global_1) {
      if (simple) O[key] = value;else setGlobal(key, value);
      return;
    } else if (!unsafe) {
      delete O[key];
    } else if (!noTargetGet && O[key]) {
      simple = true;
    }

    if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, 'toString', function toString() {
    return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
  });
});
var path = global_1;

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

var getBuiltIn = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace]) : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
};

var ceil = Math.ceil;
var floor = Math.floor; // `ToInteger` abstract operation
// https://tc39.es/ecma262/#sec-tointeger

var toInteger$1 = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};

var min$2 = Math.min; // `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength

var toLength = function (argument) {
  return argument > 0 ? min$2(toInteger$1(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

var max$2 = Math.max;
var min$1$1 = Math.min; // Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

var toAbsoluteIndex = function (index, length) {
  var integer = toInteger$1(index);
  return integer < 0 ? max$2(integer + length, 0) : min$1$1(integer, length);
}; // `Array.prototype.{ indexOf, includes }` methods implementation


var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value; // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check

    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check

      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    }
    return !IS_INCLUDES && -1;
  };
};

var arrayIncludes = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};
var indexOf = arrayIncludes.indexOf;

var objectKeysInternal = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;

  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key); // Don't enum bug & hidden keys


  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }

  return result;
}; // IE8- don't enum bug keys


var enumBugKeys = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];
var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe

var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return objectKeysInternal(O, hiddenKeys$1);
};

var objectGetOwnPropertyNames = {
  f: f$3
}; // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe

var f$4 = Object.getOwnPropertySymbols;
var objectGetOwnPropertySymbols = {
  f: f$4
}; // all object keys, includes non-enumerable and symbols

var ownKeys$1$1 = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = objectGetOwnPropertyNames.f(anObject(it));
  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};

var copyConstructorProperties = function (target, source) {
  var keys = ownKeys$1$1(source);
  var defineProperty = objectDefineProperty.f;
  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';
var isForced_1 = isForced;
var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/

var _export = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;

  if (GLOBAL) {
    target = global_1;
  } else if (STATIC) {
    target = global_1[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global_1[TARGET] || {}).prototype;
  }

  if (target) for (key in source) {
    sourceProperty = source[key];

    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor$1(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];

    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    } // add a flag to not completely full polyfills


    if (options.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    } // extend global


    redefine(target, key, sourceProperty, options);
  }
};

var aFunction$1 = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  }

  return it;
}; // optional / simple context binding


var functionBindContext = function (fn, that, length) {
  aFunction$1(fn);
  if (that === undefined) return fn;

  switch (length) {
    case 0:
      return function () {
        return fn.call(that);
      };

    case 1:
      return function (a) {
        return fn.call(that, a);
      };

    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };

    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }

  return function
    /* ...args */
  () {
    return fn.apply(that, arguments);
  };
}; // `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe


var isArray = Array.isArray || function isArray(arg) {
  return classofRaw(arg) == 'Array';
};

var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';
var process$1 = global_1.process;
var versions = process$1 && process$1.versions;
var v8 = versions && versions.v8;
var match$4, version;

if (v8) {
  match$4 = v8.split('.');
  version = match$4[0] < 4 ? 1 : match$4[0] + match$4[1];
} else if (engineUserAgent) {
  match$4 = engineUserAgent.match(/Edge\/(\d+)/);

  if (!match$4 || match$4[1] >= 74) {
    match$4 = engineUserAgent.match(/Chrome\/(\d+)/);
    if (match$4) version = match$4[1];
  }
}

var engineV8Version = version && +version;
/* eslint-disable es/no-symbol -- required for testing */
// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing

var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
  return !String(Symbol()) || // Chrome 38 Symbol has incorrect toString conversion
  // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && engineV8Version && engineV8Version < 41;
});
/* eslint-disable es/no-symbol -- required for testing */

var useSymbolAsUid = nativeSymbol && !Symbol.sham && typeof Symbol.iterator == 'symbol';
var WellKnownSymbolsStore = shared('wks');
var Symbol$1 = global_1.Symbol;
var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

var wellKnownSymbol = function (name) {
  if (!has(WellKnownSymbolsStore, name) || !(nativeSymbol || typeof WellKnownSymbolsStore[name] == 'string')) {
    if (nativeSymbol && has(Symbol$1, name)) {
      WellKnownSymbolsStore[name] = Symbol$1[name];
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
    }
  }

  return WellKnownSymbolsStore[name];
};

var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate

var arraySpeciesCreate = function (originalArray, length) {
  var C;

  if (isArray(originalArray)) {
    C = originalArray.constructor; // cross-realm fallback

    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }

  return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};

var push = [].push; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation

var createMethod$1 = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_OUT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = indexedObject(O);
    var boundFunction = functionBindContext(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
    var value, result;

    for (; length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);

      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3:
            return true;
          // some

          case 5:
            return value;
          // find

          case 6:
            return index;
          // findIndex

          case 2:
            push.call(target, value);
          // filter
        } else switch (TYPE) {
          case 4:
            return false;
          // every

          case 7:
            push.call(target, value);
          // filterOut
        }
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

var arrayIteration = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod$1(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod$1(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod$1(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod$1(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod$1(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod$1(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod$1(6),
  // `Array.prototype.filterOut` method
  // https://github.com/tc39/proposal-array-filtering
  filterOut: createMethod$1(7)
}; // `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe

var objectKeys = Object.keys || function keys(O) {
  return objectKeysInternal(O, enumBugKeys);
}; // `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe


var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;

  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);

  return O;
};
var html = getBuiltIn('document', 'documentElement');
var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () {
  /* empty */
};

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
}; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak

  return temp;
}; // Create object with fake `null` prototype: use iframe Object with cleared prototype


var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
}; // Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug


var activeXDocument;

var NullProtoObject = function () {
  try {
    /* global ActiveXObject -- old IE */
    activeXDocument = document.domain && new ActiveXObject('htmlfile');
  } catch (error) {
    /* ignore */
  }

  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
  var length = enumBugKeys.length;

  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];

  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true; // `Object.create` method
// https://tc39.es/ecma262/#sec-object.create

var objectCreate = Object.create || function create(O, Properties) {
  var result;

  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

    result[IE_PROTO] = O;
  } else result = NullProtoObject();

  return Properties === undefined ? result : objectDefineProperties(result, Properties);
};

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

if (ArrayPrototype[UNSCOPABLES] == undefined) {
  objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: objectCreate(null)
  });
} // add a key to Array.prototype[@@unscopables]


var addToUnscopables = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

var $find = arrayIteration.find;
var FIND = 'find';
var SKIPS_HOLES = true; // Shouldn't skip holes

if (FIND in []) Array(1)[FIND](function () {
  SKIPS_HOLES = false;
}); // `Array.prototype.find` method
// https://tc39.es/ecma262/#sec-array.prototype.find

_export({
  target: 'Array',
  proto: true,
  forced: SKIPS_HOLES
}, {
  find: function find(callbackfn
  /* , that = undefined */
  ) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
}); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables


addToUnscopables(FIND);

var _class, _class2, _temp;

var ReactTooltip = staticMethods(_class = windowListener(_class = customEvent(_class = isCapture(_class = getEffect(_class = bodyMode(_class = trackRemoval(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits$8(ReactTooltip, _React$Component);

  _createClass$8(ReactTooltip, null, [{
    key: "propTypes",
    get: function get() {
      return {
        uuid: propTypes.exports.string,
        children: propTypes.exports.any,
        place: propTypes.exports.string,
        type: propTypes.exports.string,
        effect: propTypes.exports.string,
        offset: propTypes.exports.object,
        multiline: propTypes.exports.bool,
        border: propTypes.exports.bool,
        textColor: propTypes.exports.string,
        backgroundColor: propTypes.exports.string,
        borderColor: propTypes.exports.string,
        arrowColor: propTypes.exports.string,
        insecure: propTypes.exports.bool,
        "class": propTypes.exports.string,
        className: propTypes.exports.string,
        id: propTypes.exports.string,
        html: propTypes.exports.bool,
        delayHide: propTypes.exports.number,
        delayUpdate: propTypes.exports.number,
        delayShow: propTypes.exports.number,
        event: propTypes.exports.string,
        eventOff: propTypes.exports.string,
        isCapture: propTypes.exports.bool,
        globalEventOff: propTypes.exports.string,
        getContent: propTypes.exports.any,
        afterShow: propTypes.exports.func,
        afterHide: propTypes.exports.func,
        overridePosition: propTypes.exports.func,
        disable: propTypes.exports.bool,
        scrollHide: propTypes.exports.bool,
        resizeHide: propTypes.exports.bool,
        wrapper: propTypes.exports.string,
        bodyMode: propTypes.exports.bool,
        possibleCustomEvents: propTypes.exports.string,
        possibleCustomEventsOff: propTypes.exports.string,
        clickable: propTypes.exports.bool
      };
    }
  }]);

  function ReactTooltip(props) {
    var _this;

    _classCallCheck$8(this, ReactTooltip);

    _this = _possibleConstructorReturn$8(this, _getPrototypeOf$8(ReactTooltip).call(this, props));
    _this.state = {
      uuid: props.uuid || generateUUID(),
      place: props.place || 'top',
      // Direction of tooltip
      desiredPlace: props.place || 'top',
      type: 'dark',
      // Color theme of tooltip
      effect: 'float',
      // float or fixed
      show: false,
      border: false,
      customColors: {},
      offset: {},
      extraClass: '',
      html: false,
      delayHide: 0,
      delayShow: 0,
      event: props.event || null,
      eventOff: props.eventOff || null,
      currentEvent: null,
      // Current mouse event
      currentTarget: null,
      // Current target of mouse event
      ariaProps: parseAria(props),
      // aria- and role attributes
      isEmptyTip: false,
      disable: false,
      possibleCustomEvents: props.possibleCustomEvents || '',
      possibleCustomEventsOff: props.possibleCustomEventsOff || '',
      originTooltip: null,
      isMultiline: false
    };

    _this.bind(['showTooltip', 'updateTooltip', 'hideTooltip', 'hideTooltipOnScroll', 'getTooltipContent', 'globalRebuild', 'globalShow', 'globalHide', 'onWindowResize', 'mouseOnToolTip']);

    _this.mount = true;
    _this.delayShowLoop = null;
    _this.delayHideLoop = null;
    _this.delayReshow = null;
    _this.intervalUpdateContent = null;
    return _this;
  }
  /**
   * For unify the bind and unbind listener
   */


  _createClass$8(ReactTooltip, [{
    key: "bind",
    value: function bind(methodArray) {
      var _this2 = this;

      methodArray.forEach(function (method) {
        _this2[method] = _this2[method].bind(_this2);
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props;
          _this$props.insecure;
          var resizeHide = _this$props.resizeHide;
      this.bindListener(); // Bind listener for tooltip

      this.bindWindowEvents(resizeHide); // Bind global event for static method

      this.injectStyles(); // Inject styles for each DOM root having tooltip.
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mount = false;
      this.clearTimer();
      this.unbindListener();
      this.removeScrollListener(this.state.currentTarget);
      this.unbindWindowEvents();
    }
    /* Look for the closest DOM root having tooltip and inject styles. */

  }, {
    key: "injectStyles",
    value: function injectStyles() {
      var tooltipRef = this.tooltipRef;

      if (!tooltipRef) {
        return;
      }

      var parentNode = tooltipRef.parentNode;

      while (parentNode.parentNode) {
        parentNode = parentNode.parentNode;
      }

      var domRoot;

      switch (parentNode.constructor.name) {
        case 'Document':
        case 'HTMLDocument':
        case undefined:
          domRoot = parentNode.head;
          break;

        case 'ShadowRoot':
        default:
          domRoot = parentNode;
          break;
      } // Prevent styles duplication.


      if (!domRoot.querySelector('style[data-react-tooltip]')) {
        var style = document.createElement('style');
        style.textContent = baseCss;
        style.setAttribute('data-react-tooltip', 'true');
        domRoot.appendChild(style);
      }
    }
    /**
     * Return if the mouse is on the tooltip.
     * @returns {boolean} true - mouse is on the tooltip
     */

  }, {
    key: "mouseOnToolTip",
    value: function mouseOnToolTip() {
      var show = this.state.show;

      if (show && this.tooltipRef) {
        /* old IE or Firefox work around */
        if (!this.tooltipRef.matches) {
          /* old IE work around */
          if (this.tooltipRef.msMatchesSelector) {
            this.tooltipRef.matches = this.tooltipRef.msMatchesSelector;
          } else {
            /* old Firefox work around */
            this.tooltipRef.matches = this.tooltipRef.mozMatchesSelector;
          }
        }

        return this.tooltipRef.matches(':hover');
      }

      return false;
    }
    /**
     * Pick out corresponded target elements
     */

  }, {
    key: "getTargetArray",
    value: function getTargetArray(id) {
      var targetArray = [];
      var selector;

      if (!id) {
        selector = '[data-tip]:not([data-for])';
      } else {
        var escaped = id.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
        selector = "[data-tip][data-for=\"".concat(escaped, "\"]");
      } // Scan document for shadow DOM elements


      nodeListToArray(document.getElementsByTagName('*')).filter(function (element) {
        return element.shadowRoot;
      }).forEach(function (element) {
        targetArray = targetArray.concat(nodeListToArray(element.shadowRoot.querySelectorAll(selector)));
      });
      return targetArray.concat(nodeListToArray(document.querySelectorAll(selector)));
    }
    /**
     * Bind listener to the target elements
     * These listeners used to trigger showing or hiding the tooltip
     */

  }, {
    key: "bindListener",
    value: function bindListener() {
      var _this3 = this;

      var _this$props2 = this.props,
          id = _this$props2.id,
          globalEventOff = _this$props2.globalEventOff,
          isCapture = _this$props2.isCapture;
      var targetArray = this.getTargetArray(id);
      targetArray.forEach(function (target) {
        if (target.getAttribute('currentItem') === null) {
          target.setAttribute('currentItem', 'false');
        }

        _this3.unbindBasicListener(target);

        if (_this3.isCustomEvent(target)) {
          _this3.customUnbindListener(target);
        }
      });

      if (this.isBodyMode()) {
        this.bindBodyListener(targetArray);
      } else {
        targetArray.forEach(function (target) {
          var isCaptureMode = _this3.isCapture(target);

          var effect = _this3.getEffect(target);

          if (_this3.isCustomEvent(target)) {
            _this3.customBindListener(target);

            return;
          }

          target.addEventListener('mouseenter', _this3.showTooltip, isCaptureMode);
          target.addEventListener('focus', _this3.showTooltip, isCaptureMode);

          if (effect === 'float') {
            target.addEventListener('mousemove', _this3.updateTooltip, isCaptureMode);
          }

          target.addEventListener('mouseleave', _this3.hideTooltip, isCaptureMode);
          target.addEventListener('blur', _this3.hideTooltip, isCaptureMode);
        });
      } // Global event to hide tooltip


      if (globalEventOff) {
        window.removeEventListener(globalEventOff, this.hideTooltip);
        window.addEventListener(globalEventOff, this.hideTooltip, isCapture);
      } // Track removal of targetArray elements from DOM


      this.bindRemovalTracker();
    }
    /**
     * Unbind listeners on target elements
     */

  }, {
    key: "unbindListener",
    value: function unbindListener() {
      var _this4 = this;

      var _this$props3 = this.props,
          id = _this$props3.id,
          globalEventOff = _this$props3.globalEventOff;

      if (this.isBodyMode()) {
        this.unbindBodyListener();
      } else {
        var targetArray = this.getTargetArray(id);
        targetArray.forEach(function (target) {
          _this4.unbindBasicListener(target);

          if (_this4.isCustomEvent(target)) _this4.customUnbindListener(target);
        });
      }

      if (globalEventOff) window.removeEventListener(globalEventOff, this.hideTooltip);
      this.unbindRemovalTracker();
    }
    /**
     * Invoke this before bind listener and unmount the component
     * it is necessary to invoke this even when binding custom event
     * so that the tooltip can switch between custom and default listener
     */

  }, {
    key: "unbindBasicListener",
    value: function unbindBasicListener(target) {
      var isCaptureMode = this.isCapture(target);
      target.removeEventListener('mouseenter', this.showTooltip, isCaptureMode);
      target.removeEventListener('mousemove', this.updateTooltip, isCaptureMode);
      target.removeEventListener('mouseleave', this.hideTooltip, isCaptureMode);
    }
  }, {
    key: "getTooltipContent",
    value: function getTooltipContent() {
      var _this$props4 = this.props,
          getContent = _this$props4.getContent,
          children = _this$props4.children; // Generate tooltip content

      var content;

      if (getContent) {
        if (Array.isArray(getContent)) {
          content = getContent[0] && getContent[0](this.state.originTooltip);
        } else {
          content = getContent(this.state.originTooltip);
        }
      }

      return getTipContent(this.state.originTooltip, children, content, this.state.isMultiline);
    }
  }, {
    key: "isEmptyTip",
    value: function isEmptyTip(placeholder) {
      return typeof placeholder === 'string' && placeholder === '' || placeholder === null;
    }
    /**
     * When mouse enter, show the tooltip
     */

  }, {
    key: "showTooltip",
    value: function showTooltip(e, isGlobalCall) {
      if (!this.tooltipRef) {
        return;
      }

      if (isGlobalCall) {
        // Don't trigger other elements belongs to other ReactTooltip
        var targetArray = this.getTargetArray(this.props.id);
        var isMyElement = targetArray.some(function (ele) {
          return ele === e.currentTarget;
        });
        if (!isMyElement) return;
      } // Get the tooltip content
      // calculate in this phrase so that tip width height can be detected


      var _this$props5 = this.props,
          multiline = _this$props5.multiline,
          getContent = _this$props5.getContent;
      var originTooltip = e.currentTarget.getAttribute('data-tip');
      var isMultiline = e.currentTarget.getAttribute('data-multiline') || multiline || false; // If it is focus event or called by ReactTooltip.show, switch to `solid` effect

      var switchToSolid = e instanceof window.FocusEvent || isGlobalCall; // if it needs to skip adding hide listener to scroll

      var scrollHide = true;

      if (e.currentTarget.getAttribute('data-scroll-hide')) {
        scrollHide = e.currentTarget.getAttribute('data-scroll-hide') === 'true';
      } else if (this.props.scrollHide != null) {
        scrollHide = this.props.scrollHide;
      } // adding aria-describedby to target to make tooltips read by screen readers


      if (e && e.currentTarget && e.currentTarget.setAttribute) {
        e.currentTarget.setAttribute('aria-describedby', this.state.uuid);
      } // Make sure the correct place is set


      var desiredPlace = e.currentTarget.getAttribute('data-place') || this.props.place || 'top';
      var effect = switchToSolid && 'solid' || this.getEffect(e.currentTarget);
      var offset = e.currentTarget.getAttribute('data-offset') || this.props.offset || {};
      var result = getPosition(e, e.currentTarget, this.tooltipRef, desiredPlace, desiredPlace, effect, offset);

      if (result.position && this.props.overridePosition) {
        result.position = this.props.overridePosition(result.position, e, e.currentTarget, this.tooltipRef, desiredPlace, desiredPlace, effect, offset);
      }

      var place = result.isNewState ? result.newState.place : desiredPlace; // To prevent previously created timers from triggering

      this.clearTimer();
      var target = e.currentTarget;
      var reshowDelay = this.state.show ? target.getAttribute('data-delay-update') || this.props.delayUpdate : 0;
      var self = this;

      var updateState = function updateState() {
        self.setState({
          originTooltip: originTooltip,
          isMultiline: isMultiline,
          desiredPlace: desiredPlace,
          place: place,
          type: target.getAttribute('data-type') || self.props.type || 'dark',
          customColors: {
            text: target.getAttribute('data-text-color') || self.props.textColor || null,
            background: target.getAttribute('data-background-color') || self.props.backgroundColor || null,
            border: target.getAttribute('data-border-color') || self.props.borderColor || null,
            arrow: target.getAttribute('data-arrow-color') || self.props.arrowColor || null
          },
          effect: effect,
          offset: offset,
          html: (target.getAttribute('data-html') ? target.getAttribute('data-html') === 'true' : self.props.html) || false,
          delayShow: target.getAttribute('data-delay-show') || self.props.delayShow || 0,
          delayHide: target.getAttribute('data-delay-hide') || self.props.delayHide || 0,
          delayUpdate: target.getAttribute('data-delay-update') || self.props.delayUpdate || 0,
          border: (target.getAttribute('data-border') ? target.getAttribute('data-border') === 'true' : self.props.border) || false,
          extraClass: target.getAttribute('data-class') || self.props["class"] || self.props.className || '',
          disable: (target.getAttribute('data-tip-disable') ? target.getAttribute('data-tip-disable') === 'true' : self.props.disable) || false,
          currentTarget: target
        }, function () {
          if (scrollHide) {
            self.addScrollListener(self.state.currentTarget);
          }

          self.updateTooltip(e);

          if (getContent && Array.isArray(getContent)) {
            self.intervalUpdateContent = setInterval(function () {
              if (self.mount) {
                var _getContent = self.props.getContent;
                var placeholder = getTipContent(originTooltip, '', _getContent[0](), isMultiline);
                var isEmptyTip = self.isEmptyTip(placeholder);
                self.setState({
                  isEmptyTip: isEmptyTip
                });
                self.updatePosition();
              }
            }, getContent[1]);
          }
        });
      }; // If there is no delay call immediately, don't allow events to get in first.


      if (reshowDelay) {
        this.delayReshow = setTimeout(updateState, reshowDelay);
      } else {
        updateState();
      }
    }
    /**
     * When mouse hover, update tool tip
     */

  }, {
    key: "updateTooltip",
    value: function updateTooltip(e) {
      var _this5 = this;

      var _this$state = this.state,
          delayShow = _this$state.delayShow,
          disable = _this$state.disable;
      var afterShow = this.props.afterShow;
      var placeholder = this.getTooltipContent();
      var eventTarget = e.currentTarget || e.target; // Check if the mouse is actually over the tooltip, if so don't hide the tooltip

      if (this.mouseOnToolTip()) {
        return;
      } // if the tooltip is empty, disable the tooltip


      if (this.isEmptyTip(placeholder) || disable) {
        return;
      }

      var delayTime = !this.state.show ? parseInt(delayShow, 10) : 0;

      var updateState = function updateState() {
        if (Array.isArray(placeholder) && placeholder.length > 0 || placeholder) {
          var isInvisible = !_this5.state.show;

          _this5.setState({
            currentEvent: e,
            currentTarget: eventTarget,
            show: true
          }, function () {
            _this5.updatePosition();

            if (isInvisible && afterShow) {
              afterShow(e);
            }
          });
        }
      };

      clearTimeout(this.delayShowLoop);

      if (delayTime) {
        this.delayShowLoop = setTimeout(updateState, delayTime);
      } else {
        updateState();
      }
    }
    /*
     * If we're mousing over the tooltip remove it when we leave.
     */

  }, {
    key: "listenForTooltipExit",
    value: function listenForTooltipExit() {
      var show = this.state.show;

      if (show && this.tooltipRef) {
        this.tooltipRef.addEventListener('mouseleave', this.hideTooltip);
      }
    }
  }, {
    key: "removeListenerForTooltipExit",
    value: function removeListenerForTooltipExit() {
      var show = this.state.show;

      if (show && this.tooltipRef) {
        this.tooltipRef.removeEventListener('mouseleave', this.hideTooltip);
      }
    }
    /**
     * When mouse leave, hide tooltip
     */

  }, {
    key: "hideTooltip",
    value: function hideTooltip(e, hasTarget) {
      var _this6 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        isScroll: false
      };
      var disable = this.state.disable;
      var isScroll = options.isScroll;
      var delayHide = isScroll ? 0 : this.state.delayHide;
      var afterHide = this.props.afterHide;
      var placeholder = this.getTooltipContent();
      if (!this.mount) return;
      if (this.isEmptyTip(placeholder) || disable) return; // if the tooltip is empty, disable the tooltip

      if (hasTarget) {
        // Don't trigger other elements belongs to other ReactTooltip
        var targetArray = this.getTargetArray(this.props.id);
        var isMyElement = targetArray.some(function (ele) {
          return ele === e.currentTarget;
        });
        if (!isMyElement || !this.state.show) return;
      } // clean up aria-describedby when hiding tooltip


      if (e && e.currentTarget && e.currentTarget.removeAttribute) {
        e.currentTarget.removeAttribute('aria-describedby');
      }

      var resetState = function resetState() {
        var isVisible = _this6.state.show; // Check if the mouse is actually over the tooltip, if so don't hide the tooltip

        if (_this6.mouseOnToolTip()) {
          _this6.listenForTooltipExit();

          return;
        }

        _this6.removeListenerForTooltipExit();

        _this6.setState({
          show: false
        }, function () {
          _this6.removeScrollListener(_this6.state.currentTarget);

          if (isVisible && afterHide) {
            afterHide(e);
          }
        });
      };

      this.clearTimer();

      if (delayHide) {
        this.delayHideLoop = setTimeout(resetState, parseInt(delayHide, 10));
      } else {
        resetState();
      }
    }
    /**
     * When scroll, hide tooltip
     */

  }, {
    key: "hideTooltipOnScroll",
    value: function hideTooltipOnScroll(event, hasTarget) {
      this.hideTooltip(event, hasTarget, {
        isScroll: true
      });
    }
    /**
     * Add scroll event listener when tooltip show
     * automatically hide the tooltip when scrolling
     */

  }, {
    key: "addScrollListener",
    value: function addScrollListener(currentTarget) {
      var isCaptureMode = this.isCapture(currentTarget);
      window.addEventListener('scroll', this.hideTooltipOnScroll, isCaptureMode);
    }
  }, {
    key: "removeScrollListener",
    value: function removeScrollListener(currentTarget) {
      var isCaptureMode = this.isCapture(currentTarget);
      window.removeEventListener('scroll', this.hideTooltipOnScroll, isCaptureMode);
    } // Calculation the position

  }, {
    key: "updatePosition",
    value: function updatePosition() {
      var _this7 = this;

      var _this$state2 = this.state,
          currentEvent = _this$state2.currentEvent,
          currentTarget = _this$state2.currentTarget,
          place = _this$state2.place,
          desiredPlace = _this$state2.desiredPlace,
          effect = _this$state2.effect,
          offset = _this$state2.offset;
      var node = this.tooltipRef;
      var result = getPosition(currentEvent, currentTarget, node, place, desiredPlace, effect, offset);

      if (result.position && this.props.overridePosition) {
        result.position = this.props.overridePosition(result.position, currentEvent, currentTarget, node, place, desiredPlace, effect, offset);
      }

      if (result.isNewState) {
        // Switch to reverse placement
        return this.setState(result.newState, function () {
          _this7.updatePosition();
        });
      } // Set tooltip position


      node.style.left = result.position.left + 'px';
      node.style.top = result.position.top + 'px';
    }
    /**
     * CLear all kinds of timeout of interval
     */

  }, {
    key: "clearTimer",
    value: function clearTimer() {
      clearTimeout(this.delayShowLoop);
      clearTimeout(this.delayHideLoop);
      clearTimeout(this.delayReshow);
      clearInterval(this.intervalUpdateContent);
    }
  }, {
    key: "hasCustomColors",
    value: function hasCustomColors() {
      var _this8 = this;

      return Boolean(Object.keys(this.state.customColors).find(function (color) {
        return color !== 'border' && _this8.state.customColors[color];
      }) || this.state.border && this.state.customColors['border']);
    }
  }, {
    key: "render",
    value: function render() {
      var _this9 = this;

      var _this$state3 = this.state,
          extraClass = _this$state3.extraClass,
          html = _this$state3.html,
          ariaProps = _this$state3.ariaProps,
          disable = _this$state3.disable,
          uuid = _this$state3.uuid;
      var content = this.getTooltipContent();
      var isEmptyTip = this.isEmptyTip(content);
      var style = generateTooltipStyle(this.state.uuid, this.state.customColors, this.state.type, this.state.border);
      var tooltipClass = '__react_component_tooltip' + " ".concat(this.state.uuid) + (this.state.show && !disable && !isEmptyTip ? ' show' : '') + (this.state.border ? ' border' : '') + " place-".concat(this.state.place) + // top, bottom, left, right
      " type-".concat(this.hasCustomColors() ? 'custom' : this.state.type) + ( // dark, success, warning, error, info, light, custom
      this.props.delayUpdate ? ' allow_hover' : '') + (this.props.clickable ? ' allow_click' : '');
      var Wrapper = this.props.wrapper;

      if (ReactTooltip.supportedWrappers.indexOf(Wrapper) < 0) {
        Wrapper = ReactTooltip.defaultProps.wrapper;
      }

      var wrapperClassName = [tooltipClass, extraClass].filter(Boolean).join(' ');

      if (html) {
        var htmlContent = "".concat(content, "\n<style aria-hidden=\"true\">").concat(style, "</style>");
        return React.createElement(Wrapper, _extends$5({
          className: "".concat(wrapperClassName),
          id: this.props.id || uuid,
          ref: function ref(_ref) {
            return _this9.tooltipRef = _ref;
          }
        }, ariaProps, {
          "data-id": "tooltip",
          dangerouslySetInnerHTML: {
            __html: htmlContent
          }
        }));
      } else {
        return React.createElement(Wrapper, _extends$5({
          className: "".concat(wrapperClassName),
          id: this.props.id || uuid
        }, ariaProps, {
          ref: function ref(_ref2) {
            return _this9.tooltipRef = _ref2;
          },
          "data-id": "tooltip"
        }), React.createElement("style", {
          dangerouslySetInnerHTML: {
            __html: style
          },
          "aria-hidden": "true"
        }), content);
      }
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var ariaProps = prevState.ariaProps;
      var newAriaProps = parseAria(nextProps);
      var isChanged = Object.keys(newAriaProps).some(function (props) {
        return newAriaProps[props] !== ariaProps[props];
      });

      if (!isChanged) {
        return null;
      }

      return _objectSpread2({}, prevState, {
        ariaProps: newAriaProps
      });
    }
  }]);

  return ReactTooltip;
}(React.Component), _defineProperty$9(_class2, "defaultProps", {
  insecure: true,
  resizeHide: true,
  wrapper: 'div',
  clickable: false
}), _defineProperty$9(_class2, "supportedWrappers", ['div', 'span']), _defineProperty$9(_class2, "displayName", 'ReactTooltip'), _temp)) || _class) || _class) || _class) || _class) || _class) || _class) || _class;

var styles$18 = {"text--truncate":"Tooltip-module_text--truncate__Zp5oG","react-tooltip":"Tooltip-module_react-tooltip__RadNp","react-tooltip-left":"Tooltip-module_react-tooltip-left__xv6S4","react-tooltip-right":"Tooltip-module_react-tooltip-right__NBuxn","react-tooltip-center":"Tooltip-module_react-tooltip-center__lpMOs"};

/**
 * Tooltip - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string} props.placement - placement, default `bottom`
 * @param {string} props.align - align, default `left`
 * @param {string} props.effect - behaviour of tooltip
 * @param {string|object} props.content - content
 * @param {bool} props.disabled - disabled
 * @param {bool} props.showOnClick - show on click
 * @return {object} An object of children element
 */

const Tooltip = ({
  className,
  children,
  effect,
  content,
  disabled,
  showOnClick,
  placement,
  align
}) => {
  const tooltipUUID = uuid_1();
  const showOnClickProps = showOnClick ? {
    delayHide: 1000,
    event: 'click',
    afterShow: () => ReactTooltip.hide()
  } : {};
  const tooltipStyles = useStyles({
    [styles$18['react-tooltip']]: true,
    [`react-tooltip-${align}`]: true
  });
  return /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement("span", {
    className: className,
    "data-tip": true,
    "data-for": tooltipUUID
  }, children), /*#__PURE__*/React.createElement(ReactTooltip, _extends$6({
    className: tooltipStyles,
    background: "#000",
    effect: effect,
    id: tooltipUUID,
    disable: disabled,
    isCapture: true,
    place: placement
  }, showOnClickProps), content));
};

Tooltip.propTypes = {
  effect: propTypes.exports.oneOf(['solid', 'float']),
  placement: propTypes.exports.oneOf(['top', 'left', 'right', 'bottom']),
  align: propTypes.exports.oneOf(['center', 'left', 'right']),
  children: propTypes.exports.node.isRequired,
  content: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),
  showOnClick: propTypes.exports.bool,
  disabled: propTypes.exports.bool,
  className: propTypes.exports.string
};
Tooltip.defaultProps = {
  className: '',
  content: '',
  effect: 'solid',
  placement: 'bottom',
  showOnClick: false,
  disabled: false,
  align: 'left'
};

var styles$17 = {"text--truncate":"Paragraph-module_text--truncate__9vDI7","paragraph":"Paragraph-module_paragraph__RPQE0","paragraph-uppercase":"Paragraph-module_paragraph-uppercase__A2oby","paragraph-padding--medium":"Paragraph-module_paragraph-padding--medium__n08e3","paragraph-padding--small":"Paragraph-module_paragraph-padding--small__PT8Gv","paragraph-padding--none":"Paragraph-module_paragraph-padding--none__vMqWI","paragraph-align--left":"Paragraph-module_paragraph-align--left__ZjYgF","paragraph-align--center":"Paragraph-module_paragraph-align--center__gKf1d","paragraph-align--right":"Paragraph-module_paragraph-align--right__vVOG2","paragraph-color--accent-1":"Paragraph-module_paragraph-color--accent-1__FFWMc","paragraph-color--accent-2":"Paragraph-module_paragraph-color--accent-2__-cKAe","paragraph-color--accent-3":"Paragraph-module_paragraph-color--accent-3__LBh-v","paragraph-color--accent-4":"Paragraph-module_paragraph-color--accent-4__SO04S","paragraph-color--accent-5":"Paragraph-module_paragraph-color--accent-5__sbq6v","paragraph-color--accent-6":"Paragraph-module_paragraph-color--accent-6__FocSG","paragraph-color--accent-7":"Paragraph-module_paragraph-color--accent-7__xErhj","paragraph-color--info":"Paragraph-module_paragraph-color--info__7PTO6","paragraph-color--white":"Paragraph-module_paragraph-color--white__VvZPs","paragraph-color--color-8":"Paragraph-module_paragraph-color--color-8__SA-2-","paragraph-size--10":"Paragraph-module_paragraph-size--10__19FM2","paragraph-size--12":"Paragraph-module_paragraph-size--12__QvBjN","paragraph-size--14":"Paragraph-module_paragraph-size--14__PpMUI","paragraph-size--16":"Paragraph-module_paragraph-size--16__wZWua","paragraph-size--18":"Paragraph-module_paragraph-size--18__QHIvC","paragraph-weight--300":"Paragraph-module_paragraph-weight--300__5vaXV","paragraph-weight--400":"Paragraph-module_paragraph-weight--400__X8AMy","paragraph-weight--700":"Paragraph-module_paragraph-weight--700__xmRe6","paragraph-line--18":"Paragraph-module_paragraph-line--18__myvqm","paragraph-line--20":"Paragraph-module_paragraph-line--20__4WrdL"};

/**
 * Paragraph - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {object} props.children - children
 * @param {string} props.color - color
 * @param {number} props.size - size
 * @param {string} props.align - align
 * @param {string} props.padding - padding
 * @param {number} props.weight - weight
 * @param {boolean} props.uppercase - weight
 * @param {number} props.line - line height
 * @return {object} An object of children element
 */

const Paragraph = ({
  className,
  children,
  color,
  size,
  align,
  padding,
  weight,
  uppercase,
  line
}) => {
  const paragraphStyles = useStyles({
    [styles$17['paragraph']]: true,
    [styles$17[`paragraph-color--${color}`]]: color,
    [styles$17[`paragraph-size--${size}`]]: size,
    [styles$17[`paragraph-padding--${padding}`]]: padding,
    [styles$17[`paragraph-align--${align}`]]: align,
    [styles$17[`paragraph-weight--${weight}`]]: weight,
    [styles$17['paragraph-uppercase']]: uppercase,
    [styles$17[`paragraph-line--${line}`]]: line
  }, className);
  return /*#__PURE__*/React.createElement("p", {
    className: paragraphStyles
  }, children);
};

Paragraph.displayName = 'Paragraph';
Paragraph.propTypes = {
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  color: propTypes.exports.oneOf(['accent-1', 'accent-2', 'accent-3', 'accent-4', 'accent-5', 'accent-6', 'accent-7', 'info', 'white']),
  size: propTypes.exports.oneOf([10, 12, 14, 16, 18]),
  align: propTypes.exports.oneOf(['left', 'center', 'right']),
  padding: propTypes.exports.oneOf(['small', 'medium', 'none']),
  weight: propTypes.exports.oneOf([300, 400, 700]),
  uppercase: propTypes.exports.bool,
  line: propTypes.exports.oneOf([18, 20])
};
Paragraph.defaultProps = {
  className: '',
  color: 'accent-1',
  size: 14,
  align: 'left',
  padding: 'medium',
  weight: 300,
  uppercase: false,
  line: 18
};

var styles$16 = {"text--truncate":"Input-module_text--truncate__tIA1t","form--has-error":"Input-module_form--has-error__Egj9b","form-field":"Input-module_form-field__5YTgz","label":"Input-module_label__gmqts","input__error":"Input-module_input__error__mMn-I","form-field--has-error":"Input-module_form-field--has-error__kFgNP","input__label":"Input-module_input__label__gjmTL","input__wrapper":"Input-module_input__wrapper__wv11S","input__wrapper--show-label":"Input-module_input__wrapper--show-label__TzFm-","input__wrapper--focused":"Input-module_input__wrapper--focused__2xWNt","input__wrapper--focused--table":"Input-module_input__wrapper--focused--table__md2io","input":"Input-module_input__505b7","bar":"Input-module_bar__5-fIy","error":"Input-module_error__38tit","input--transparent":"Input-module_input--transparent__AOANq","input--grayed-placeholder":"Input-module_input--grayed-placeholder__EHLHP","input--hidden-arrows":"Input-module_input--hidden-arrows__NUYwo","input--table":"Input-module_input--table__U5XYc","input__tooltip":"Input-module_input__tooltip__OcUUQ","input__tooltip--form":"Input-module_input__tooltip--form__dPlig"};

var styles$15 = {"text--truncate":"Icon-module_text--truncate__B3o5H","icon--default":"Icon-module_icon--default__7ewH8","icon--white":"Icon-module_icon--white__FKvy8","icon--primary":"Icon-module_icon--primary__lclud","icon--color-2":"Icon-module_icon--color-2__fGvX7","icon--color-3":"Icon-module_icon--color-3__UWX4B","icon--warning":"Icon-module_icon--warning__2xp2W","icon--success":"Icon-module_icon--success__Jbdc3","icon--alert":"Icon-module_icon--alert__Hlj7b","icon--info":"Icon-module_icon--info__sIO63","icon--spin":"Icon-module_icon--spin__79oK7","spinIcon":"Icon-module_spinIcon__KZUJm"};

var css = {"text--truncate":"editor-icons-module_text--truncate__sYGOs","editor-icon":"editor-icons-module_editor-icon__IF6YS","icon-ab-testing":"editor-icons-module_icon-ab-testing__qSCoH","icon-align-center":"editor-icons-module_icon-align-center__FnT2y","icon-align-justify":"editor-icons-module_icon-align-justify__izCV3","icon-align-left":"editor-icons-module_icon-align-left__ZO0I-","icon-align-right":"editor-icons-module_icon-align-right__fZmog","icon-angle-double-down":"editor-icons-module_icon-angle-double-down__WoOTs","icon-angle-double-left":"editor-icons-module_icon-angle-double-left__pX-KE","icon-angle-double-right":"editor-icons-module_icon-angle-double-right__besDN","icon-angle-double-up":"editor-icons-module_icon-angle-double-up__--tEZ","icon-angle-down":"editor-icons-module_icon-angle-down__3QOMs","icon-angle-left":"editor-icons-module_icon-angle-left__DWVRT","icon-angle-right":"editor-icons-module_icon-angle-right__UFJOL","icon-angle-up":"editor-icons-module_icon-angle-up__pTLCI","icon-arrow-down":"editor-icons-module_icon-arrow-down__DxHIk","icon-arrow-left":"editor-icons-module_icon-arrow-left__NY2jS","icon-arrow-right":"editor-icons-module_icon-arrow-right__wK6bs","icon-arrow-up":"editor-icons-module_icon-arrow-up__-UxKi","icon-backward":"editor-icons-module_icon-backward__oCYh9","icon-barcode":"editor-icons-module_icon-barcode__0PDQ5","icon-bold":"editor-icons-module_icon-bold__p2ydG","icon-long-arrow-alt-up":"editor-icons-module_icon-long-arrow-alt-up__2rAf8","icon-borders":"editor-icons-module_icon-borders__Jzjr7","icon-box":"editor-icons-module_icon-box__fqOsM","icon-building":"editor-icons-module_icon-building__T-Cxk","icon-info-outline":"editor-icons-module_icon-info-outline__b86IL","icon-button":"editor-icons-module_icon-button__0-avg","icon-calendar":"editor-icons-module_icon-calendar__jgXsb","icon-caret-down":"editor-icons-module_icon-caret-down__aoKP4","icon-caret-left":"editor-icons-module_icon-caret-left__vZ3rQ","icon-caret-right":"editor-icons-module_icon-caret-right__n0lpq","icon-caret-up":"editor-icons-module_icon-caret-up__3f-2q","icon-check-square-o":"editor-icons-module_icon-check-square-o__Y4ZGf","icon-check-circle":"editor-icons-module_icon-check-circle__Yc6au","icon-check-square":"editor-icons-module_icon-check-square__eNgin","icon-chevron-down":"editor-icons-module_icon-chevron-down__OWeiY","icon-chevron-left":"editor-icons-module_icon-chevron-left__yOdWM","icon-chevron-up":"editor-icons-module_icon-chevron-up__oxTh9","icon-chevron-right":"editor-icons-module_icon-chevron-right__PcFJK","icon-circle":"editor-icons-module_icon-circle__bXuQ7","icon-clone-alt":"editor-icons-module_icon-clone-alt__n8s-6","icon-cloud-download-alt":"editor-icons-module_icon-cloud-download-alt__vWzVK","icon-cloud-upload":"editor-icons-module_icon-cloud-upload__0Scfk","icon-code":"editor-icons-module_icon-code__RTZlZ","icon-cog":"editor-icons-module_icon-cog__1Iorm","icon-copy_landing":"editor-icons-module_icon-copy_landing__h4MTP","icon-create":"editor-icons-module_icon-create__NiZeQ","icon-creative-commons-brands":"editor-icons-module_icon-creative-commons-brands__dc0nQ","icon-dashboard":"editor-icons-module_icon-dashboard__UI3cP","icon-desktop":"editor-icons-module_icon-desktop__H9DEv","icon-dot-circle":"editor-icons-module_icon-dot-circle__vwCr2","icon-duplicate":"editor-icons-module_icon-duplicate__WUP7C","icon-edit":"editor-icons-module_icon-edit__NZqxZ","icon-ellipsis-h":"editor-icons-module_icon-ellipsis-h__fIt-a","icon-ellipsis-v":"editor-icons-module_icon-ellipsis-v__ZId4E","icon-envelope":"editor-icons-module_icon-envelope__kGOPO","icon-sync":"editor-icons-module_icon-sync__oBJiO","icon-exchange-alt":"editor-icons-module_icon-exchange-alt__q-TT-","icon-exclamation-circle":"editor-icons-module_icon-exclamation-circle__qBlKH","icon-exclamation-triangle":"editor-icons-module_icon-exclamation-triangle__WzoeH","icon-button-paypal":"editor-icons-module_icon-button-paypal__Il2ju","icon-smart_section":"editor-icons-module_icon-smart_section__DlW-a","icon-external-link-alt":"editor-icons-module_icon-external-link-alt__3-xDo","icon-eye-close":"editor-icons-module_icon-eye-close__eeVNc","icon-eye-open":"editor-icons-module_icon-eye-open__VDOKK","icon-file":"editor-icons-module_icon-file__Ti1y6","icon-main_page":"editor-icons-module_icon-main_page__YxyKr","icon-folder-minus":"editor-icons-module_icon-folder-minus__LjD-Q","icon-folder-move-to":"editor-icons-module_icon-folder-move-to__K0ZFv","icon-folder-o":"editor-icons-module_icon-folder-o__Z4GeS","icon-folder-plus":"editor-icons-module_icon-folder-plus__Ftq5-","icon-folder":"editor-icons-module_icon-folder__RVnKJ","icon-font":"editor-icons-module_icon-font__UMA2G","icon-thank_you_page":"editor-icons-module_icon-thank_you_page__PfigI","icon-forward":"editor-icons-module_icon-forward__ML1NG","icon-globe":"editor-icons-module_icon-globe__I3VBg","icon-hand-up-alt":"editor-icons-module_icon-hand-up-alt__OPiBi","icon-hand-up":"editor-icons-module_icon-hand-up__ixFOg","icon-handlebar-circled":"editor-icons-module_icon-handlebar-circled__7o0ow","icon-header":"editor-icons-module_icon-header__u17pE","icon-header1":"editor-icons-module_icon-header1__L8fJz","icon-header2":"editor-icons-module_icon-header2__oTTks","icon-header3":"editor-icons-module_icon-header3__3Afg7","icon-header4":"editor-icons-module_icon-header4__cID6-","icon-header5":"editor-icons-module_icon-header5__OP2Y9","icon-heart":"editor-icons-module_icon-heart__Fo71q","icon-help_outline":"editor-icons-module_icon-help_outline__x5dos","icon-help":"editor-icons-module_icon-help__s8DQY","icon-history":"editor-icons-module_icon-history__sIVvX","icon-home":"editor-icons-module_icon-home__NIW-s","icon-icons":"editor-icons-module_icon-icons__mblfV","icon-indent":"editor-icons-module_icon-indent__MucuX","icon-info-circle":"editor-icons-module_icon-info-circle__9uis9","icon-button-payu":"editor-icons-module_icon-button-payu__qr1AC","icon-italic":"editor-icons-module_icon-italic__E9MH8","icon-js":"editor-icons-module_icon-js__7W4fJ","icon-key":"editor-icons-module_icon-key__N4zyM","icon-keyboard":"editor-icons-module_icon-keyboard__bp4un","icon-layers-2":"editor-icons-module_icon-layers-2__-7-9i","icon-lightbulb":"editor-icons-module_icon-lightbulb__rgk3f","icon-line-dash":"editor-icons-module_icon-line-dash__60kj5","icon-line-dots":"editor-icons-module_icon-line-dots__xdP0X","icon-line-height":"editor-icons-module_icon-line-height__msRqU","icon-line-solid":"editor-icons-module_icon-line-solid__-AYpL","icon-link":"editor-icons-module_icon-link__Y8DDs","icon-list-ol":"editor-icons-module_icon-list-ol__akV7Z","icon-list-ul":"editor-icons-module_icon-list-ul__lwmMI","icon-lock-open":"editor-icons-module_icon-lock-open__qUCA4","icon-lock":"editor-icons-module_icon-lock__-eaUE","icon-minus-circle":"editor-icons-module_icon-minus-circle__SiWie","icon-menu":"editor-icons-module_icon-menu__eLGNc","icon-minus-square":"editor-icons-module_icon-minus-square__seBU4","icon-button-stripe":"editor-icons-module_icon-button-stripe__tKrci","icon-mobile":"editor-icons-module_icon-mobile__gulDP","icon-move":"editor-icons-module_icon-move__L7y0K","icon-ok":"editor-icons-module_icon-ok__gy4N6","icon-outdent":"editor-icons-module_icon-outdent__MkdE-","icon-padding-bottom":"editor-icons-module_icon-padding-bottom__SdnH-","icon-padding-right":"editor-icons-module_icon-padding-right__nZWCG","icon-paragraph-widget":"editor-icons-module_icon-paragraph-widget__SPu-J","icon-paragraph":"editor-icons-module_icon-paragraph__sKCrL","icon-phone":"editor-icons-module_icon-phone__4tFxq","icon-photo":"editor-icons-module_icon-photo__LFnKE","icon-picture":"editor-icons-module_icon-picture__LJBeh","icon-archive-restore":"editor-icons-module_icon-archive-restore__ArEO3","icon-plus-circle":"editor-icons-module_icon-plus-circle__7hWX8","icon-plus-square":"editor-icons-module_icon-plus-square__GaK4y","icon-plus":"editor-icons-module_icon-plus__xoYCL","icon-publish":"editor-icons-module_icon-publish__Pxaqt","icon-pushpin":"editor-icons-module_icon-pushpin__pUcpG","icon-download":"editor-icons-module_icon-download__fk1G2","icon-radius-all":"editor-icons-module_icon-radius-all__7ExXa","icon-radius-left-down":"editor-icons-module_icon-radius-left-down__DkAVp","icon-radius-left-top":"editor-icons-module_icon-radius-left-top__sDSUm","icon-radius-right-down":"editor-icons-module_icon-radius-right-down__u--Sc","icon-radius-right-top":"editor-icons-module_icon-radius-right-top__fAmUA","icon-long-arrow-alt-up-left":"editor-icons-module_icon-long-arrow-alt-up-left__JZpyT","icon-redo":"editor-icons-module_icon-redo__RF1p3","icon-caps":"editor-icons-module_icon-caps__xxSSK","icon-reply":"editor-icons-module_icon-reply__MOq0G","icon-resize-horizontal":"editor-icons-module_icon-resize-horizontal__uUAL6","icon-resize-vertical":"editor-icons-module_icon-resize-vertical__t6Rh-","icon-save":"editor-icons-module_icon-save__Rv6V4","icon-search":"editor-icons-module_icon-search__4ZGJS","icon-section":"editor-icons-module_icon-section__eknzN","icon-long-arrow-alt-up-right":"editor-icons-module_icon-long-arrow-alt-up-right__MbeWS","icon-share":"editor-icons-module_icon-share__swdtv","icon-sort-down":"editor-icons-module_icon-sort-down__B5Xb0","icon-sort-up":"editor-icons-module_icon-sort-up__eIR5M","icon-sort":"editor-icons-module_icon-sort__Lnt5e","icon-spinner":"editor-icons-module_icon-spinner__5L1L0","icon-square-o":"editor-icons-module_icon-square-o__RGWin","icon-long-arrow-alt-down-left":"editor-icons-module_icon-long-arrow-alt-down-left__s-J5y","icon-long-arrow-alt-down-right":"editor-icons-module_icon-long-arrow-alt-down-right__giqXP","icon-strikethrough":"editor-icons-module_icon-strikethrough__k4LoJ","icon-suitcase":"editor-icons-module_icon-suitcase__O1Z0B","icon-switches":"editor-icons-module_icon-switches__TroPj","icon-sygnet":"editor-icons-module_icon-sygnet__Ve9QE","icon-tablet":"editor-icons-module_icon-tablet__uwZkH","icon-text-height":"editor-icons-module_icon-text-height__zlULH","icon-text-width":"editor-icons-module_icon-text-width__pDrqO","icon-text":"editor-icons-module_icon-text__9hDX6","icon-time":"editor-icons-module_icon-time__Zbeft","icon-timer":"editor-icons-module_icon-timer__uqu1w","icon-times-circle":"editor-icons-module_icon-times-circle__p9k5y","icon-trash":"editor-icons-module_icon-trash__OzME9","icon-underline":"editor-icons-module_icon-underline__vkClv","icon-undo":"editor-icons-module_icon-undo__3Y3GF","icon-unlink":"editor-icons-module_icon-unlink__QtQ2l","icon-user-tie":"editor-icons-module_icon-user-tie__KkBhi","icon-user":"editor-icons-module_icon-user__krB9f","icon-users":"editor-icons-module_icon-users__0ZaY5","icon-video":"editor-icons-module_icon-video__Iiy8H","icon-view_list":"editor-icons-module_icon-view_list__QWST3","icon-window-close":"editor-icons-module_icon-window-close__YQtOX","icon-long-arrow-alt-down":"editor-icons-module_icon-long-arrow-alt-down__dC-7l","icon-long-arrow-alt-left":"editor-icons-module_icon-long-arrow-alt-left__xEPOM","icon-long-arrow-alt-right":"editor-icons-module_icon-long-arrow-alt-right__iwbqN","icon-equal":"editor-icons-module_icon-equal__lqc76","icon-exclamation":"editor-icons-module_icon-exclamation__f3uoO","icon-exit":"editor-icons-module_icon-exit__X225z","icon-filter":"editor-icons-module_icon-filter__kDWZ1","icon-form":"editor-icons-module_icon-form__0e0io","icon-info":"editor-icons-module_icon-info__v8FzC","icon-minus":"editor-icons-module_icon-minus__EHEu8","icon-play":"editor-icons-module_icon-play__zkBZh","icon-question":"editor-icons-module_icon-question__5gN6R","icon-random":"editor-icons-module_icon-random__4qHQ4","icon-remove":"editor-icons-module_icon-remove__SVXlD","icon-share-square":"editor-icons-module_icon-share-square__GnXG5","icon-step-backward":"editor-icons-module_icon-step-backward__Mu1pD","icon-step-forward":"editor-icons-module_icon-step-forward__uJVBT","icon-button-pay":"editor-icons-module_icon-button-pay__qhlzG","icon-percent":"editor-icons-module_icon-percent__PobuD","icon-desktop-mobile2":"editor-icons-module_icon-desktop-mobile2__AIiwU","icon-lab":"editor-icons-module_icon-lab__U-Ws2","icon-api":"editor-icons-module_icon-api__tLSH-","icon-clipboard":"editor-icons-module_icon-clipboard__qst0U","icon-login":"editor-icons-module_icon-login__5FRMr","icon-shield-info":"editor-icons-module_icon-shield-info__Qb6o5","icon-shield":"editor-icons-module_icon-shield__mmY5L","icon-article":"editor-icons-module_icon-article__c-EH-","icon-block":"editor-icons-module_icon-block__HjqO9","icon-reset":"editor-icons-module_icon-reset__hJNft","icon-star":"editor-icons-module_icon-star__sknoh","icon-share-alt":"editor-icons-module_icon-share-alt__p-X0-","icon-ai":"editor-icons-module_icon-ai__jm7WN","icon-line-chart":"editor-icons-module_icon-line-chart__LEY7X","icon-chart-alt":"editor-icons-module_icon-chart-alt__Xkw7k","icon-chart":"editor-icons-module_icon-chart__Dx3So","icon-web":"editor-icons-module_icon-web__IitoO","icon-popup":"editor-icons-module_icon-popup__RdDhk","icon-product":"editor-icons-module_icon-product__Rlht5","icon-money":"editor-icons-module_icon-money__phbdt","icon-credit-card":"editor-icons-module_icon-credit-card__vXzlH","icon-server":"editor-icons-module_icon-server__pCeqU","icon-play-lesson":"editor-icons-module_icon-play-lesson__EBuAy","icon-academy":"editor-icons-module_icon-academy__h1Gn5","icon-case-studies":"editor-icons-module_icon-case-studies__SPX6b","icon-video-alt":"editor-icons-module_icon-video-alt__5HHvi","icon-help-center":"editor-icons-module_icon-help-center__H6QuA","icon-bullhorn":"editor-icons-module_icon-bullhorn__5MoHk","icon-visits":"editor-icons-module_icon-visits__gsTMW","icon-templates":"editor-icons-module_icon-templates__yIj1U","icon-package":"editor-icons-module_icon-package__8Txt4","icon-gallery":"editor-icons-module_icon-gallery__truHd","icon-archive":"editor-icons-module_icon-archive__JDMFo","icon-users-circle":"editor-icons-module_icon-users-circle__Qb28f","icon-inbox":"editor-icons-module_icon-inbox__RAl-e","icon-workspaces":"editor-icons-module_icon-workspaces__yWeAM","icon-anchor":"editor-icons-module_icon-anchor__fhvU1","icon-guide":"editor-icons-module_icon-guide__RxiAx","icon-dis-rules":"editor-icons-module_icon-dis-rules__OXtyX","icon-champ":"editor-icons-module_icon-champ__mrfM-","icon-consultation":"editor-icons-module_icon-consultation__MB2CA","icon-configure":"editor-icons-module_icon-configure__-jhFD","icon-thumb-up":"editor-icons-module_icon-thumb-up__py0wj","icon-thumb-down":"editor-icons-module_icon-thumb-down__FO0D2","icon-star-outlined":"editor-icons-module_icon-star-outlined__ZS-1K","icon-palette":"editor-icons-module_icon-palette__Ug6-c","icon-brush":"editor-icons-module_icon-brush__klh5H","icon-globe-active-ssl":"editor-icons-module_icon-globe-active-ssl__PU5rf","icon-globe-active-no-ssl":"editor-icons-module_icon-globe-active-no-ssl__f4BPq","icon-hourglass-start":"editor-icons-module_icon-hourglass-start__UK9vT","icon-notifications":"editor-icons-module_icon-notifications__T5lOz","icon-extension":"editor-icons-module_icon-extension__8gP3E","icon-separate-borders":"editor-icons-module_icon-separate-borders__Wv0NR","icon-border-left":"editor-icons-module_icon-border-left__wgqIb","icon-border-right":"editor-icons-module_icon-border-right__1C0DA","icon-border-bottom":"editor-icons-module_icon-border-bottom__apehG","icon-border-top":"editor-icons-module_icon-border-top__tw7uc","icon-file-copy":"editor-icons-module_icon-file-copy__bnY8K","icon-arrow-increase":"editor-icons-module_icon-arrow-increase__LlNkT","icon-arrow-decrease":"editor-icons-module_icon-arrow-decrease__dccFe","icon-keyboard_command":"editor-icons-module_icon-keyboard_command__UzD8M","icon-backspace":"editor-icons-module_icon-backspace__f8Uib"};

/**
 * Icon - stateless presentational component
 * @param {object} props - props
 * @param {string} props.icon - icon name
 * @param {string} props.color - color of icon default, primary
 * @param {string | array} props.className - list of classes out of module
 * @return {object} An object of children element
 */

const Icon = ({
  icon,
  color,
  className,
  spin,
  ['data-testid']: dataTestId
}) => {
  const elementStyles = useStyles({
    [css['editor-icon']]: true,
    [styles$15[`icon--${color}`]]: color,
    [styles$15['icon--spin']]: spin,
    [css[`${icon}`]]: true
  }, className);
  return /*#__PURE__*/React.createElement("i", {
    className: elementStyles,
    "data-testid": dataTestId
  });
};

Icon.displayName = 'Icon';
Icon.propTypes = {
  icon: propTypes.exports.string.isRequired,
  color: propTypes.exports.string,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  spin: propTypes.exports.bool,
  ['data-testid']: propTypes.exports.string
};
Icon.defaultProps = {
  className: '',
  color: 'default',
  spin: false,
  ['data-testid']: undefined
};

/**
 * Input - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: input
 * @param {function} props.onChange - click handler
 * @param {function} props.onKeyDown - key down handler
 * @param {function} props.onBlur - blur handler
 * @param {string} props.type - type
 * @param {string} props.name - name
 * @param {boolean} props.disabled - disabled
 * @param {boolean} props.readonly - readonly
 * @param {object} props.i18n - object of translation
 * @param {bool} props.autoFocus - autoFocus
 * @param {string} props.focused - focused, keep label by default on top
 * @param {number} props.maxLength - max length of input
 * @param {string|object} props.tooltip - tooltip
 * @param {string|number} props.value - value
 * @param {number} props.min - min value when type is number
 * @param {number} props.max - max value when type is number
 * @param {bool} props.required - required
 * @param {string} props.background - Color of background `white, transparent', default: white
 * @param {boolean} props.hideArrows - Hide arrows inc/dec value from type number input
 * @param {bool} props.alwaysShowLabel - always show label on top
 * @param {string} props.variant - input variant, default ''
 * @param {bool} props.form - is input form
 * @return {object} An object of children element
 */

const Input$1 = /*#__PURE__*/react.exports.forwardRef(({
  className,
  onChange,
  onKeyDown,
  onBlur,
  type,
  name,
  disabled,
  readonly,
  i18n,
  value,
  autoFocus,
  maxLength,
  required,
  focused,
  tooltip,
  min,
  max,
  background,
  hideArrows,
  alwaysShowLabel,
  defaultValue,
  variant,
  form,
  ['data-testid']: dataTestId
}, ref) => {
  const wrapperStyles = useStyles({
    [styles$16['input__wrapper']]: true,
    [styles$16['input__wrapper--focused']]: focused === 'true',
    [styles$16['input__wrapper--show-label']]: alwaysShowLabel,
    [styles$16['input__wrapper--table']]: variant === 'table'
  }, className);
  const tooltopStyles = useStyles({
    [styles$16['input__tooltip']]: true,
    [styles$16['input__tooltip--form']]: form
  });
  const inputStyles = useStyles({
    [styles$16['input']]: true,
    [styles$16['input--transparent']]: background === 'transparent',
    [styles$16['input--hidden-arrows']]: hideArrows,
    [styles$16['input--table']]: variant === 'table'
  });
  const renderDefault = defaultValue && !value;
  return /*#__PURE__*/React.createElement("div", {
    className: wrapperStyles
  }, /*#__PURE__*/React.createElement("input", _extends$6({
    "data-testid": dataTestId,
    ref: ref,
    className: inputStyles,
    onBlur: onBlur,
    onChange: onChange,
    onKeyDown: onKeyDown,
    type: type,
    placeholder: i18n.placeholder,
    name: name,
    id: name,
    value: value,
    readOnly: disabled ? readonly : undefined,
    disabled: !disabled ? undefined : disabled,
    autoFocus: autoFocus,
    maxLength: maxLength,
    required: required
  }, type === 'number' ? {
    min,
    max
  } : {}, renderDefault ? {
    defaultValue
  } : {})), /*#__PURE__*/React.createElement("span", {
    className: styles$16['highlight']
  }), /*#__PURE__*/React.createElement("span", {
    className: styles$16['bar']
  }), i18n?.label && /*#__PURE__*/React.createElement(Label, {
    id: name,
    className: styles$16['input__label']
  }, i18n.label), i18n?.description && !form && /*#__PURE__*/React.createElement(Paragraph, {
    size: "12",
    color: "color-8"
  }, i18n.description), tooltip && /*#__PURE__*/React.createElement(Tooltip, {
    className: tooltopStyles,
    placement: "bottom",
    content: tooltip
  }, /*#__PURE__*/React.createElement(Icon, {
    color: "color-3",
    icon: "icon-exclamation-circle"
  })));
});
Input$1.displayName = 'Input';
Input$1.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  onChange: propTypes.exports.func,
  onKeyDown: propTypes.exports.func,
  onBlur: propTypes.exports.func,
  type: propTypes.exports.string,
  name: propTypes.exports.string,
  disabled: propTypes.exports.bool,
  readonly: propTypes.exports.bool,
  value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number]),
  autoFocus: propTypes.exports.bool,
  maxLength: propTypes.exports.number,
  required: propTypes.exports.bool,
  focused: propTypes.exports.string,
  min: propTypes.exports.number,
  max: propTypes.exports.number,
  tooltip: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.instanceOf(Object)]),
  background: propTypes.exports.oneOf(['white', 'transparent']),
  hideArrows: propTypes.exports.bool,
  i18n: propTypes.exports.shape({
    label: propTypes.exports.string,
    placeholder: propTypes.exports.string,
    description: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.func])
  }),
  defaultValue: propTypes.exports.string,
  alwaysShowLabel: propTypes.exports.bool,
  variant: propTypes.exports.string,
  form: propTypes.exports.bool,
  ['data-testid']: propTypes.exports.string
};
Input$1.defaultProps = {
  className: '',
  type: 'text',
  focused: 'false',
  tooltip: '',
  background: 'white',
  maxLength: 524288,
  i18n: {
    label: null,
    placeholder: null,
    description: null
  },
  name: null,
  value: undefined,
  disabled: false,
  readonly: false,
  autoFocus: false,
  required: true,
  hideArrows: false,
  onChange: () => null,
  onKeyDown: () => null,
  onBlur: () => null,
  defaultValue: null,
  alwaysShowLabel: false,
  variant: '',
  form: false,
  ['data-testid']: 'input-component'
};

var ink = {exports: {}};

function t(t) {
  return t && "object" == typeof t && "default" in t ? t.default : t;
}

var s = t(react.exports),
    n = !1;
"undefined" != typeof window && (n = "ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch);

var i = n,
    p = function (t) {
  return (window.devicePixelRatio || 1) / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1);
},
    h = {
  borderRadius: "inherit",
  height: "100%",
  left: 0,
  position: "absolute",
  top: 0,
  width: "100%"
};

function u(t, n, i, r) {
  return i * ((t = t / r - 1) * t * t * t * t + 1) + n;
}

var r = Math.sqrt(2),
    a = Math.cos,
    c = Math.max,
    o = Math.min;

function f(t) {
  return o(t.duration, Date.now() - t.mouseDown);
}

function d(t) {
  return 0 < t.mouseUp ? Date.now() - t.mouseUp : 0;
}

function e(t) {
  var n = t.duration,
      i = t.radius,
      r = .85 * u(f(t), 0, i, n),
      o = .15 * u(d(t), 0, i, n),
      e = .02 * i * a(Date.now() / n);
  return c(0, r + o + e);
}

function m(t, n, i) {
  return i || o(.6 * c(t, n));
}

function v(t, n) {
  return u(d(t), n, -n, t.duration);
}

function w(t, n) {
  return o(v(t, n), u(f(t), 0, .3, 3 * t.duration));
}

function l(t, n, i) {
  return o(1, e(t) / n * 2 / r) * (i / 2 - t.x);
}

function y(t, n, i) {
  return o(1, e(t) / n * 2 / r) * (i / 2 - t.y);
}

function D(t) {
  return e(t) / t.radius;
}

var M = function (t) {
  var n = t.mouseUp,
      i = t.duration;
  return !n || Date.now() - n < i;
};

function g(t) {
  var n,
      o = [],
      i = !1,
      r = {
    each: function (t, n) {
      for (var i = 0, r = o.length; i < r; i++) t.call(n, o[i]);
    },
    play: function () {
      i || (i = !0, r.update());
    },
    stop: function () {
      i = !1, cancelAnimationFrame(n);
    },
    getTotalOpacity: function (t) {
      for (var n = 0, i = 0, r = o.length; i < r; i++) n += w(o[i], t);

      return n;
    },
    update: function () {
      (o = o.filter(M)).length ? n = requestAnimationFrame(r.update) : r.stop(), t();
    },
    add: function (t) {
      o.push(t), r.play();
    },
    release: function (t) {
      for (var n = o.length - 1; 0 <= n; n--) if (!o[n].mouseUp) return o[n].mouseUp = t;
    }
  };
  return r;
}

function b() {
  for (var t = arguments, n = {}, i = 0; i < arguments.length; i++) {
    var r = t[i];
    if (r) for (var o in r) n[o] = r[o];
  }

  return n;
}

var T = 2 * Math.PI,
    O = 0,
    j = {
  background: !0,
  className: "ink",
  duration: 1e3,
  opacity: .25,
  recenter: !0,
  hasTouch: i
},
    k = function (n) {
  function t(t) {
    n.apply(this, arguments), this.state = {
      color: "transparent",
      density: 1,
      height: 0,
      store: g(this.tick.bind(this)),
      width: 0
    }, this.touchEvents = this.touchEvents();
  }

  return n && (t.__proto__ = n), ((t.prototype = Object.create(n && n.prototype)).constructor = t).prototype.touchEvents = function () {
    return this.props.hasTouch ? {
      onTouchStart: this.t.bind(this),
      onTouchEnd: this.n.bind(this),
      onTouchCancel: this.n.bind(this)
    } : {
      onMouseDown: this.t.bind(this),
      onMouseUp: this.n.bind(this),
      onMouseLeave: this.n.bind(this)
    };
  }, t.prototype.tick = function () {
    var t = this.state,
        n = t.ctx,
        i = t.color,
        r = t.density,
        o = t.height,
        e = t.width,
        u = t.store;
    n.save(), n.scale(r, r), n.clearRect(0, 0, e, o), n.fillStyle = i, this.props.background && (n.globalAlpha = u.getTotalOpacity(this.props.opacity), n.fillRect(0, 0, e, o)), u.each(this.makeBlot, this), n.restore();
  }, t.prototype.makeBlot = function (t) {
    var n = this.state,
        i = n.ctx,
        r = n.height,
        o = n.width,
        e = t.x,
        u = t.y,
        a = t.radius;

    if (i.globalAlpha = v(t, this.props.opacity), i.beginPath(), this.props.recenter) {
      var s = Math.max(r, o);
      e += l(t, s, o), u += y(t, s, r);
    }

    i.arc(e, u, a * D(t), 0, T), i.closePath(), i.fill();
  }, t.prototype.componentWillUnmount = function () {
    this.state.store.stop();
  }, t.prototype.pushBlot = function (t, n, i) {
    var r = this,
        o = this.canvas;
    o.getDOMNode && "function" == typeof o.getDOMNode && (o = o.getDOMNode());
    var e = o.getBoundingClientRect(),
        u = e.top,
        a = e.bottom,
        s = e.left,
        h = e.right,
        c = window.getComputedStyle(o).color,
        f = this.state.ctx || o.getContext("2d"),
        d = p(f),
        v = a - u,
        w = h - s,
        l = m(v, w, this.props.radius);
    this.setState({
      color: c,
      ctx: f,
      density: d,
      height: v,
      width: w
    }, function () {
      r.state.store.add({
        duration: r.props.duration,
        mouseDown: t,
        mouseUp: 0,
        radius: l,
        x: n - s,
        y: i - u
      });
    });
  }, t.prototype.setCanvas = function (t) {
    this.canvas = t;
  }, t.prototype.render = function () {
    var t = this.state,
        n = t.density,
        i = t.height,
        r = t.width,
        o = this.props,
        e = o.className,
        u = o.style,
        a = b({
      className: e,
      ref: this.setCanvas.bind(this),
      height: i * n,
      width: r * n,
      onDragOver: this.n,
      style: b(h, u)
    }, this.touchEvents);
    return s.createElement("canvas", a);
  }, t.prototype.t = function (t) {
    var n = t.button,
        i = t.ctrlKey,
        r = t.clientX,
        o = t.clientY,
        e = t.changedTouches,
        u = Date.now();
    if (e) for (var a = 0; a < e.length; a++) {
      var s = e[a],
          h = s.clientX,
          c = s.clientY;
      this.pushBlot(u, h, c);
    } else n !== O || i || this.pushBlot(u, r, o);
  }, t.prototype.n = function () {
    this.state.store.release(Date.now());
  }, t;
}(s.PureComponent);

k.defaultProps = j, ink.exports = k;

var styles$14 = {"text--truncate":"Spinner-module_text--truncate__79eHW","spinner":"Spinner-module_spinner__SZoUP"};

/**
 * Spinner - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @return {object} An object of children element
 */

const Spinner = ({
  className
}) => {
  const elementClasses = useStyles({
    [styles$14['spinner']]: true
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-spinner",
    spin: true
  }));
};

Spinner.displayName = 'Spinner';
Spinner.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array])
};
Spinner.defaultProps = {
  className: ''
};

var styles$13 = {"text--truncate":"Button-module_text--truncate__Jtf7p","button":"Button-module_button__18Bed","button--primary":"Button-module_button--primary__VuF-P","button--alert":"Button-module_button--alert__gSqgP","button--secondary":"Button-module_button--secondary__lD5E3","button--hide":"Button-module_button--hide__206Jo","button--mini":"Button-module_button--mini__Dkgpx","button--tiny":"Button-module_button--tiny__oQNs9","button--small":"Button-module_button--small__ADJQe","button--medium":"Button-module_button--medium__ZuR4Z","button--large":"Button-module_button--large__-FaV5","button--fit-width":"Button-module_button--fit-width__ayu8R","button--dropdown":"Button-module_button--dropdown__RDb-c","button--dropdown-element":"Button-module_button--dropdown-element__vf8jt","button--transparent":"Button-module_button--transparent__e5EjK","button--transparent-blue":"Button-module_button--transparent-blue__vSlMi","button--white":"Button-module_button--white__xL64b","button--black":"Button-module_button--black__xyQxe","button--tabs":"Button-module_button--tabs__GeeH4","button--icon":"Button-module_button--icon__yYJ76","button--icon-transparent":"Button-module_button--icon-transparent__VX5bK","button--svg":"Button-module_button--svg__xleuq","button--switcher":"Button-module_button--switcher__FgAif","button--center":"Button-module_button--center__vsNub","button--left":"Button-module_button--left__azrn0","button--right":"Button-module_button--right__czZoD","button--input":"Button-module_button--input__0jKlF","button--action":"Button-module_button--action__9SCtG","button--publish":"Button-module_button--publish__f91X1","link":"Button-module_link__MzvJO"};

/**
 * Button - stateless presentational component
 * @param {object} props - props
 * @param {string} props.tag - Tag: button or a
 * @param {string} props.title - link title
 * @param {string} props.target - Target: _self, _blank, _parent, _top
 * @param {string} props.type - Type: button, reset, submit
 * @param {string} props.href - Link
 * @param {string} props.size - Size `tiny, medium, large`
 * @param {string} props.variant - Variant, default: 'primary'
 * @param {string} props.align - Align `left, center, right`
 * @param {string|array} props.className - a custom list of class names, default: `button`
 * @param {object} props.children - children
 * @param {bool} props.isLoading - loader status, default: false
 * @param {bool} props.isDisabled - disabled status, default: false
 * @param {function} props.onClick - click handler
 * @param {bool} props.hasBackgoundRipple - background ripple effect, default: true
 * @param {bool} props.hasIcon - has icon, default: false
 * @param {bool} props.hide - Hide, default: false
 * @param {buttonStyle} props.buttonStyle - enable button style for links, default: 'false'
 * @param {string} props.dataTestid - test id
 * @return {object} An object of children elements
 */

const Button$1 = ({
  className,
  tag: Tag,
  title,
  type,
  href,
  size,
  variant,
  align,
  target,
  children,
  onClick,
  isLoading,
  isDisabled,
  hasBackgoundRipple,
  hasIcon,
  hide,
  buttonStyle,
  fitWidth,
  ['data-testid']: dataTestId
}) => {
  const elementClassesButton = useStyles({
    [styles$13.button]: true,
    [styles$13[`button--${variant}`]]: variant,
    [styles$13[`button--${size}`]]: size,
    [styles$13[`button--${align}`]]: align,
    [styles$13['button--svg']]: hasIcon === true,
    [styles$13['button--hide']]: hide === true,
    [styles$13['button--fit-width']]: fitWidth === true,
    [styles$13.link]: !buttonStyle && Tag === 'a'
  }, className);
  return /*#__PURE__*/React.createElement(Tag, {
    type: Tag === 'button' ? type : undefined,
    disabled: isDisabled ? 'disabled' : undefined,
    href: Tag === 'a' ? href : undefined,
    title: Tag === 'a' ? title : undefined,
    target: Tag === 'a' ? target : undefined,
    className: elementClassesButton,
    onClick: onClick,
    "data-testid": dataTestId
  }, isLoading && /*#__PURE__*/React.createElement(Spinner, null), !isLoading && /*#__PURE__*/React.createElement(react.exports.Fragment, null, children), hasBackgoundRipple && /*#__PURE__*/React.createElement(ink.exports, null));
};

Button$1.displayName = 'Button';
Button$1.propTypes = {
  tag: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.element]),
  children: propTypes.exports.node,
  type: propTypes.exports.oneOf(['button', 'submit', 'reset']),
  title: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),
  target: propTypes.exports.oneOf(['_self', '_blank', '_parent', '_top']),
  size: propTypes.exports.oneOf(['mini', 'tiny', 'small', 'medium', 'large', 'input']),
  variant: propTypes.exports.oneOf(['primary', 'secondary', 'dropdown', 'transparent', 'icon', 'icon-transparent', 'alert', 'clean', 'tabs', 'transparent-blue', 'dropdown-element', 'action', 'white', 'black', 'publish', 'switcher-brand']),
  align: propTypes.exports.oneOf(['left', 'center', 'right']),
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  href: propTypes.exports.string,
  isDisabled: propTypes.exports.bool,
  isLoading: propTypes.exports.bool,
  onClick: propTypes.exports.func,
  hasBackgoundRipple: propTypes.exports.bool,
  hasIcon: propTypes.exports.bool,
  hide: propTypes.exports.bool,
  buttonStyle: propTypes.exports.bool,
  fitWidth: propTypes.exports.bool,
  ['data-testid']: propTypes.exports.string
};
Button$1.defaultProps = {
  tag: 'button',
  title: undefined,
  type: 'button',
  href: undefined,
  target: undefined,
  className: '',
  size: 'medium',
  align: null,
  variant: 'primary',
  isLoading: false,
  isDisabled: false,
  hasBackgoundRipple: true,
  hasIcon: false,
  hide: false,
  buttonStyle: false,
  fitWidth: false,
  onClick: () => {},
  ['data-testid']: undefined
};

var styles$12 = {"text--truncate":"Search-module_text--truncate__bsqbP","search":"Search-module_search__u3QsV","search__input":"Search-module_search__input__UDAiT","search__clean":"Search-module_search__clean__KT3Pk","search__icon":"Search-module_search__icon__yqFzh","search__icon-button":"Search-module_search__icon-button__T5qYo","search--small":"Search-module_search--small__ooJ42","search--medium":"Search-module_search--medium__1Pk1C","search--large":"Search-module_search--large__Zj4UH","search--input":"Search-module_search--input__qhH5U"};

/**
 * Search - stateful presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: `search`
 * @param {string} props.variant - variant input or button action default: `input`
 * @param {func} props.onChange - change handler
 * @param {func} props.onKeyDown - key click handler
 * @param {bool} props.autoFocus - autofocus
 * @param {object} props.children - children
 * @param {string} props.size - size of search field `small, medium, large`
 * @param {string} props.label - input label
 * @param {func} props.onSubmit - handle action on form submit
 * @param {func} props.onClean- handle action on form clean
 * @param {object} props.i18n - object of translations
 * @param {string} props.tag - tag
 * @param {func} props.onProtectedSubmit - submit triggered by enter/button but event is immidiately stopped, useful for searchers in forms
 * @param {boolean} props.submitEmptyOnBlur - submit triggered onBlur when value is empty
 * @param {string} props.defaultValue - default value of input
 * @return {object} An object of children element
 */

const Search = ({
  className,
  variant,
  onChange,
  onKeyDown,
  autoFocus,
  children,
  size,
  onSubmit,
  onClean,
  i18n,
  tag: Tag,
  onProtectedSubmit,
  submitEmptyOnBlur,
  defaultValue
}) => {
  const elementClasses = useStyles({
    [styles$12['search']]: true,
    [styles$12[`search--${variant}`]]: variant,
    [styles$12[`search--${size}`]]: true
  }, className);
  const [isClearActive, setClearActive] = react.exports.useState(!!defaultValue);
  const inputRef = react.exports.useRef();
  /**
   * Handle input clean
   * @type {function}
   */

  const handleCleanOnClick = react.exports.useCallback(() => {
    inputRef.current.value = '';
    setClearActive(false);
    onChange();
    onClean();

    if (submitEmptyOnBlur) {
      onSubmit();
    }
  }, []);
  const onBlur = react.exports.useCallback(() => {
    if (inputRef.current.value === '' && submitEmptyOnBlur) {
      onSubmit();
    }
  }, []);
  /**
   * Handle input keyup
   * @type {function}
   */

  const handleOnKeyUp = react.exports.useCallback(event => setClearActive(event.target.value), []);
  /**
   * Handle input key down
   * @type {function}
   */

  const handleOnKeyDown = react.exports.useCallback(event => {
    if (event.key === 'Enter' && !onSubmit) {
      event.preventDefault();
      handleProtectedSubmit(inputRef.current.value);
    }
  }, []);
  /**
   * Handle on form submit
   * @type {function}
   */

  const handleSubmit = react.exports.useCallback(event => {
    event.preventDefault();

    if (onSubmit) {
      onSubmit(inputRef.current.value);
    } else {
      onChange();
    }
  }, []);
  /**
   * Handle on form submit
   * @type {function}
   */

  const handleProtectedSubmit = react.exports.useCallback(() => {
    onProtectedSubmit && onProtectedSubmit(inputRef.current.value);
  }, []);
  /**
   * useEffect
   */

  react.exports.useEffect(() => {
    autoFocus && variant === 'input' && inputRef.current.focus();
  }, []);
  return /*#__PURE__*/React.createElement(Tag, {
    onSubmit: handleSubmit
  }, /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }, variant === 'input' && (onSubmit || onProtectedSubmit ? /*#__PURE__*/React.createElement("div", {
    className: styles$12['search__icon-button']
  }, /*#__PURE__*/React.createElement(Button$1, {
    variant: "icon-transparent",
    type: onProtectedSubmit ? 'button' : 'submit',
    size: "input",
    isDisabled: !isClearActive,
    onClick: handleProtectedSubmit
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-search"
  }))) : /*#__PURE__*/React.createElement("div", {
    className: styles$12.search__icon
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-search"
  }))), children && variant === 'button' && /*#__PURE__*/React.createElement(Input$1, {
    label: i18n.label,
    name: "search",
    type: "text",
    onChange: onChange,
    onKeyDown: onKeyDown,
    autoFocus: autoFocus
  }), variant === 'input' && /*#__PURE__*/React.createElement("input", {
    autoFocus: autoFocus,
    ref: inputRef,
    className: styles$12.search__input,
    type: "text",
    name: "search",
    placeholder: i18n.placeholder,
    onChange: onChange,
    onBlur: onBlur,
    onKeyDown: handleOnKeyDown,
    onKeyUp: handleOnKeyUp,
    defaultValue: defaultValue,
    "data-testid": "search-input"
  }), isClearActive && variant === 'input' && /*#__PURE__*/React.createElement("div", {
    className: styles$12.search__clean
  }, /*#__PURE__*/React.createElement(Button$1, {
    variant: "icon-transparent",
    size: "input",
    onClick: handleCleanOnClick
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-remove"
  }))), children && variant === 'button' && children));
};

Search.displayName = 'Search';
Search.propTypes = {
  className: propTypes.exports.string,
  children: propTypes.exports.node,
  onChange: propTypes.exports.func,
  onKeyDown: propTypes.exports.func,
  size: propTypes.exports.oneOf(['small', 'medium', 'large']),
  autoFocus: propTypes.exports.bool,
  variant: propTypes.exports.oneOf(['input', 'button']),
  i18n: propTypes.exports.shape({
    placeholder: propTypes.exports.string,
    label: propTypes.exports.string
  }),
  onSubmit: propTypes.exports.func,
  onClean: propTypes.exports.func,
  tag: propTypes.exports.string,
  onProtectedSubmit: propTypes.exports.func,
  submitEmptyOnBlur: propTypes.exports.bool,
  defaultValue: propTypes.exports.string
};
Search.defaultProps = {
  className: '',
  tag: 'form',
  size: 'medium',
  variant: 'input',
  i18n: {
    placeholder: null,
    label: null
  },
  children: null,
  onSubmit: null,
  onClean: () => null,
  onProtectedSubmit: null,
  autoFocus: false,
  onChange: () => null,
  onKeyDown: () => null,
  submitEmptyOnBlur: false,
  defaultValue: ''
};

/**
 * Searcher - stateful presentational component
 * @param {object} props - props
 * @param {function} props.setSearchResult - search result setter
 * @param {function} props.searchFunction - search function
 * @param {function} props.setSearchPhrase - search phrase function
 * @param {object} props.i18n - translations
 * @param {bool} props.protectedSubmit - protectedSubmit
 * @param {bool} props.liveChanges - search by entering characters
 * @return {object} An object of children element
 */

const Searcher = ({
  setSearchResult,
  searchFunction,
  setSearchPhrase,
  i18n,
  protectedSubmit,
  liveChanges,
  ...rest
}) => {
  const search = async value => {
    const response = await searchFunction(value);
    setSearchResult(response);
  };

  const handleOnChange = react.exports.useCallback(event => {
    let value;
    !event ? value = '' : value = event.target.value;

    if (setSearchPhrase) {
      !value && setSearchPhrase('');
      value && liveChanges && setSearchPhrase(value);
    } else {
      !value && setSearchResult(NO_VALUE);
    }
  }, [liveChanges]);
  const handleOnSubmit = react.exports.useCallback(event => {
    if (setSearchPhrase) {
      setSearchPhrase(event);
    } else {
      search(event);
    }
  }, []);
  const handleOnProtectedSubmit = react.exports.useCallback(event => setSearchPhrase(event), []);
  return /*#__PURE__*/React.createElement(Search, _extends$6({
    onChange: handleOnChange,
    onProtectedSubmit: protectedSubmit ? handleOnProtectedSubmit : null,
    onSubmit: protectedSubmit ? null : handleOnSubmit,
    i18n: i18n
  }, rest));
};

Searcher.displayName = 'Searcher';
Searcher.propTypes = {
  liveChanges: propTypes.exports.bool,
  protectedSubmit: propTypes.exports.bool,
  setSearchPhrase: propTypes.exports.func,
  searchFunction: propTypes.exports.func,
  setSearchResult: propTypes.exports.func,
  i18n: propTypes.exports.shape({
    placeholder: propTypes.exports.string
  })
};
Searcher.defaultProps = {
  liveChanges: false,
  i18n: {
    placeholder: ''
  },
  protectedSubmit: false,
  setSearchPhrase: () => null,
  searchFunction: () => null,
  setSearchResult: () => null
};
var Searcher$1 = /*#__PURE__*/react.exports.memo(Searcher);

var tinyEmitter = {exports: {}};

function E() {// Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});
    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });
    return this;
  },
  once: function (name, callback, ctx) {
    var self = this;

    function listener() {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    }
    listener._ = callback;
    return this.on(name, listener, ctx);
  },
  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },
  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
      }
    } // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910


    liveEvents.length ? e[name] = liveEvents : delete e[name];
    return this;
  }
};
tinyEmitter.exports = E;
tinyEmitter.exports.TinyEmitter = E;

/**
 * A tiny event emitter library
 * @see {@link https://github.com/scottcorgan/tiny-emitter} for further information.
 * @return {object}
 */
var emitter = new tinyEmitter.exports();

const CLOSE_DROPDOWN = 'CLOSE_DROPDOWN';
const TOGGLE_TIMING_TOAST = 'TOGGLE_TIMING_TOAST';
const TOGGLE_TOAST = 'TOGGLE_TOAST';

/**
 * Check if value is empty
 * @function isEmpty
 * @param {array|object} parentWidth
 * @return {bool} Returns bool
 */
const isEmpty = value => value === null || value === undefined || // eslint-disable-next-line no-prototype-builtins
value.hasOwnProperty('length') && value.length === 0 || value.constructor === Object && Object.keys(value).length === 0;
/**
 * Font icons mapper
 * @const fontIcons
 * @return {object}
 */

const fontIcons = {
  alert: 'icon-remove',
  info: 'icon-info',
  success: 'icon-ok',
  warning: 'icon-exclamation'
};
/**
 * Maps icons to class name
 * @function mapIconToClass
 * @param {string} value
 * @return {string} Returns string
 */

const mapIconToClass = value => fontIcons[value];
/**
 * GetTodayDate - return today date with hour 00:00:00
 * @type {function}
 */

const getTodayDate = () => new Date(new Date().toDateString());
/**
 * GetAgoDate - return date {number} days ago with hour 00:00:00
 * @param {number} days - days ago
 * @type {function}
 */

const getAgoDate = days => {
  const today = getTodayDate();
  return new Date(new Date(new Date().setDate(today.getDate() - days)).toDateString());
};
/**
 * Format numeric
 * ex. 10000 => 10 000
 * @return {string}
 */


const formatNumeric = value => value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
/**
 * Access a deep value inside a object
 * Works by passing a path like "foo.bar.xyz"
 */

const getDeepValue = (obj, path) => path.split('.').reduce((r, val) => r ? r[val] : undefined, obj);

var styles$11 = {"text--truncate":"Close-module_text--truncate__YDOC-","close":"Close-module_close__Im49f"};

/**
 * Close - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {function} props.onClick - click handler
 * @param {string} props.iconName
 * @param {string} props.iconColor
 * @return {object} An object of children element
 */

const Close = ({
  className,
  onClick,
  iconName,
  iconColor
}) => {
  const elementStyles = useStyles({
    [styles$11['close']]: true
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    className: elementStyles,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(Button$1, {
    variant: "icon",
    "data-testid": "close-component-button"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: iconName,
    color: iconColor
  })));
};

Close.displayName = 'Close';
Close.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  onClick: propTypes.exports.func,
  iconName: propTypes.exports.string,
  iconColor: propTypes.exports.string
};
Close.defaultProps = {
  className: '',
  onClick: () => null,
  iconName: 'icon-remove'
};

var styles$10 = {"text--truncate":"Notification-module_text--truncate__arh3w","notification":"Notification-module_notification__WfYqO","notification__message":"Notification-module_notification__message__t9f44","notification--alert":"Notification-module_notification--alert__jphqx","notification--warning":"Notification-module_notification--warning__ttBUE","notification--success":"Notification-module_notification--success__7CBET","notification--info":"Notification-module_notification--info__tmglJ","notification--pending":"Notification-module_notification--pending__w867P","content":"Notification-module_content__xt6uE","time":"Notification-module_time__IY7UF","load":"Notification-module_load__An5Ps"};

/**
 * Notification - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string|array} props.className - list of class names, default: `notification`
 * @param {string} props.type - type of notification `info, success, warning, alert`
 * @param {bool} props.isClosable - show close
 * @param {bool} props.onClick - gets called when the user clicks on backdrop
 * @param {bool} props.hasTime - hasTime
 * @return {object} An object of children element
 */

const Notification = ({
  children,
  className,
  type,
  isClosable,
  onClick,
  hasTime
}) => {
  const elementStyles = useStyles({
    [styles$10['notification']]: true,
    [styles$10[`notification--${type}`]]: type
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: elementStyles
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$10.content
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: mapIconToClass(type) || 'icon-ok',
    iconColor: "white"
  }), /*#__PURE__*/React.createElement("p", {
    className: styles$10.notification__message
  }, children), isClosable && /*#__PURE__*/React.createElement(Close, {
    onClick: onClick,
    iconColor: "white"
  })), hasTime && /*#__PURE__*/React.createElement("span", {
    className: styles$10.time
  }));
};

Notification.displayName = 'Notification';
Notification.propTypes = {
  children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.string, propTypes.exports.func]),
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  hasTime: propTypes.exports.bool,
  isClosable: propTypes.exports.bool,
  onClick: propTypes.exports.func,
  type: propTypes.exports.oneOf(['info', 'success', 'warning', 'alert'])
};
Notification.defaultProps = {
  className: 'notification',
  type: 'info',
  hasTime: false,
  isClosable: false,
  onClick: () => null
};

var styles$$ = {"text--truncate":"TimingToast-module_text--truncate__Lfi0S","toast":"TimingToast-module_toast__R2jOK","toast--active":"TimingToast-module_toast--active__3UYHX","fadein":"TimingToast-module_fadein__bsbVy","fadeout":"TimingToast-module_fadeout__7nJJ6"};

/**
 * TimingToast - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @return {object} An object of children element
 */

const TimingToast = ({
  className
}) => {
  const [isActive, setActive] = react.exports.useState(false);
  const [message, setMessage] = react.exports.useState('');
  const [type, setType] = react.exports.useState('info');
  const toastStyles = useStyles({
    [styles$$['toast']]: true,
    [styles$$[`toast--active`]]: isActive
  }, className);
  let autoHideTimer;

  const setAutoHideTimer = () => autoHideTimer = setTimeout(() => setActive(false), 5000);

  const handleToastToggle = react.exports.useCallback((message, type) => {
    setActive(!isActive);
    message && setMessage(message);
    type && setType(type);
    setAutoHideTimer();
  }, [isActive, message, type, autoHideTimer]);
  const closeToast = react.exports.useCallback(() => setActive(false), [isActive]);
  react.exports.useEffect(() => {
    emitter.on(TOGGLE_TIMING_TOAST, handleToastToggle);
    return () => {
      emitter.off(TOGGLE_TIMING_TOAST, handleToastToggle);
      clearTimeout(autoHideTimer);
    };
  }, []);
  return isActive && /*#__PURE__*/React.createElement("div", {
    className: toastStyles,
    "data-testid": "toast-component"
  }, /*#__PURE__*/React.createElement(Notification, {
    type: type,
    isClosable: true,
    onClick: closeToast,
    hasTime: isActive
  }, message));
};

TimingToast.displayName = 'TimingToast';
TimingToast.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array])
};
TimingToast.defaultProps = {
  className: '',
  type: 'info'
};

var styles$_ = {"text--truncate":"Toast-module_text--truncate__tRl9f","toast":"Toast-module_toast__ngbBR","toast--active":"Toast-module_toast--active__eCnYp","fadein":"Toast-module_fadein__kJk41","fadeout":"Toast-module_fadeout__ZPODd"};

/**
 * Toast stateful container component
 * @param {object} props
 * @param {string|array} props.className
 * @return {object} An object of children elements
 */

const Toast = () => {
  const [isActive, setActive] = react.exports.useState(false);
  const [message, setMessage] = react.exports.useState('');
  const [type, setType] = react.exports.useState('success');
  const [hideTimeout, setHideTimeout] = react.exports.useState(5000);
  let autoHideTimer = 100;
  /**
   * handleToastToggle
   * Updates state isActive
   * @type {function}
   */

  const handleToastToggle = react.exports.useCallback(() => {
    setActive(prev => !prev);
  });
  /**
   * handleToastData
   * get notification value
   * @param {string} message - message of notification
   * @param {string} type - type of notification
   * @param {int} timeout - timeout to hide notification
   * @type {function}
   */

  const handleToastData = (message, type, timeout = 5000) => {
    setMessage(message);
    setType(type);
    setHideTimeout(timeout);
  };

  const setAutoHideTimer = () => autoHideTimer = setTimeout(() => setActive(false), hideTimeout);

  const clearAutoHideTimer = () => clearTimeout(autoHideTimer);
  /**
   * useEffect
   */


  react.exports.useEffect(() => {
    emitter.on(TOGGLE_TOAST, handleToastToggle);
    emitter.on(TOGGLE_TOAST, handleToastData);
    return () => {
      emitter.off(TOGGLE_TOAST, handleToastToggle);
      emitter.off(TOGGLE_TOAST, handleToastData);
    };
  }, []);
  react.exports.useEffect(() => {
    emitter.on(TOGGLE_TOAST, setAutoHideTimer);
    return () => {
      emitter.off(TOGGLE_TOAST, setAutoHideTimer);
      clearAutoHideTimer();
    };
  }, []);
  const toastStyles = useStyles({
    [styles$_.toast]: true,
    [styles$_['toast--active']]: isActive
  });
  return isActive && /*#__PURE__*/React.createElement("div", {
    className: toastStyles,
    "data-testid": "toast-component"
  }, /*#__PURE__*/React.createElement(Notification, {
    type: type,
    onClick: handleToastToggle,
    isClosable: true
  }, message));
};

Toast.displayName = 'Toast';

const useIsOpen = initial => {
  const [value, setValue] = react.exports.useState(initial);
  return {
    set: react.exports.useCallback(item => setValue(arr => {
      if (arr.includes(item)) {
        return [];
      }

      return [item];
    })),
    setValue,
    toggle: react.exports.useCallback(item => setValue(arr => {
      if (arr.includes(item)) {
        return arr.filter(value => value !== item);
      }

      return [...arr, item];
    })),
    toggleOneElement: react.exports.useCallback(() => setValue(value => {
      if (value) {
        return false;
      }

      return true;
    })),
    value
  };
};

var styles$Z = {"text--truncate":"Spacer-module_text--truncate__16fjV","spacer--mini":"Spacer-module_spacer--mini__ORPSv","spacer--tiny":"Spacer-module_spacer--tiny__9VaNB","spacer--small":"Spacer-module_spacer--small__WXK02","spacer--medium":"Spacer-module_spacer--medium__LVRpH","spacer--large":"Spacer-module_spacer--large__HA0vN","spacer--big":"Spacer-module_spacer--big__ThfV4","spacer--huge":"Spacer-module_spacer--huge__iZ8KE"};

/**
 * Spacer - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {string} props.space - space size
 * @return {object} An object of children element
 */

const Spacer = ({
  className,
  space
}) => {
  const spacerClasses = useStyles({
    [styles$Z['spacer']]: true,
    [styles$Z[`spacer--${space}`]]: space
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "spacer",
    className: spacerClasses
  });
};

Spacer.displayName = 'Spacer';
Spacer.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  space: propTypes.exports.oneOf(['mini', 'tiny', 'small', 'medium', 'large', 'x-large', 'huge'])
};
Spacer.defaultProps = {
  className: '',
  space: 'medium'
};

var styles$Y = {"text--truncate":"Accordion-module_text--truncate__DuJhq","accordion":"Accordion-module_accordion__wD27Q","accordion__header":"Accordion-module_accordion__header__vicgB","accordion__header-arrow":"Accordion-module_accordion__header-arrow__R7Ea7","accordion__header-arrow--blue":"Accordion-module_accordion__header-arrow--blue__3NXoX","accordion__text":"Accordion-module_accordion__text__VBSKI"};

/**
 * AccordionSection - stateless presentational component
 * @param {object} props - props
 * @param {function} props.handleOnClick - handle click event
 * @param {boolean} props.isOpen - determine if section should be open
 * @param {string} props.label - label
 * @param {string} props.children - content
 * @param {string|node} props.arrowLabel
 * @param {string} props.variant
 * @param {boolean|string} props.hasExpand
 * @return {object} An object of children element
 */

const AccordionSection = ({
  handleOnClick,
  isOpen,
  label,
  children,
  arrowLabel,
  variant,
  hasExpand
}) => /*#__PURE__*/React.createElement("div", {
  className: styles$Y.accordion
}, /*#__PURE__*/React.createElement("div", {
  className: styles$Y.accordion__header,
  onClick: handleOnClick
}, /*#__PURE__*/React.createElement("div", null, label), /*#__PURE__*/React.createElement("div", null, hasExpand && (arrowLabel ? /*#__PURE__*/React.createElement(Button$1, {
  variant: variant,
  size: "small"
}, /*#__PURE__*/React.createElement("span", {
  className: styles$Y['accordion__header-arrow']
}, isOpen ? /*#__PURE__*/React.createElement(Icon, {
  icon: "icon-chevron-up"
}) : /*#__PURE__*/React.createElement(Icon, {
  icon: "icon-chevron-down"
}), arrowLabel)) : isOpen ? /*#__PURE__*/React.createElement(Icon, {
  size: "xs",
  icon: "icon-chevron-up"
}) : /*#__PURE__*/React.createElement(Icon, {
  size: "xs",
  icon: "icon-chevron-down"
})))), isOpen && /*#__PURE__*/React.createElement("div", {
  className: styles$Y.accordion__text
}, children));

AccordionSection.displayName = 'AccordionSection';
AccordionSection.propTypes = {
  isOpen: propTypes.exports.bool,
  hasExpand: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.bool]),
  label: propTypes.exports.node.isRequired,
  children: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.arrayOf, propTypes.exports.node]),
  handleOnClick: propTypes.exports.func.isRequired,
  arrowLabel: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.node]),
  variant: propTypes.exports.oneOf(['icon', 'secondary'])
};
AccordionSection.defaultProps = {
  isOpen: false,
  arrowLabel: '',
  variant: 'icon',
  children: [],
  hasExpand: true
};

/**
 * Accordion - stateful presentational component
 * @param {object} props - props
 * @param {object} props.children - content to display
 * @return {object} An object of children element
 */

const Accordion$2 = ({
  children
}) => {
  const openList = useIsOpen([]);
  return Array.isArray(children) && children.map((item, index) => /*#__PURE__*/React.createElement(react.exports.Fragment, {
    key: index
  }, /*#__PURE__*/React.createElement(AccordionSection, {
    key: index,
    isOpen: openList.value.includes(index),
    label: item.props.label,
    arrowLabel: item.props.arrowLabel,
    variant: item.props.variant,
    hasExpand: item.props.hasExpand,
    handleOnClick: () => item.props.hasExpand && openList.toggle(index)
  }, /*#__PURE__*/React.createElement(Spacer, {
    space: "tiny"
  }), item.props.children), /*#__PURE__*/React.createElement(Spacer, {
    space: "tiny"
  })));
};

Accordion$2.displayName = 'Accordion';
Accordion$2.propTypes = {
  children: propTypes.exports.node.isRequired
};

var styles$X = {"text--truncate":"Accordion-module_text--truncate__uqQRE","accordion__item":"Accordion-module_accordion__item__0nxhu","accordion__item--title":"Accordion-module_accordion__item--title__m5HAA","accordion__item--title-small":"Accordion-module_accordion__item--title-small__UCZ3Y","accordion__item--content":"Accordion-module_accordion__item--content__6WKQw","accordion__item--content-small":"Accordion-module_accordion__item--content-small__ipO4T","accordion__item--content-open":"Accordion-module_accordion__item--content-open__NSoN6"};

/**
 * Accordion - statefull presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: `accordion__item`
 * @param {number} props.number - item number
 * @param {node} props.title - item title
 * @param {node} props.content - item content
 * @return {object} An object of children element
 */

const AccordionItem = ({
  className,
  title,
  content,
  size
}) => {
  const [isOpen, setOpen] = react.exports.useState(true);
  /**
   * handleOpen - open section
   * @type {function}
   */

  const handleOpen = react.exports.useCallback(() => setOpen(!isOpen), [isOpen]);
  const titleStyles = useStyles({
    [styles$X['accordion__item--title']]: true,
    [styles$X['accordion__item--title-small']]: size === 'small',
    [styles$X['accordion__item--title-medium']]: size === 'medium'
  });
  const contentStyles = useStyles({
    [styles$X['accordion__item--content']]: true,
    [styles$X['accordion__item--content-small']]: size === 'small',
    [styles$X['accordion__item--content-medium']]: size === 'medium',
    [styles$X['accordion__item--content-open']]: isOpen,
    [styles$X['accordion__item--content-close']]: !isOpen
  });
  return /*#__PURE__*/React.createElement("div", {
    className: className
  }, /*#__PURE__*/React.createElement("div", {
    className: titleStyles,
    onClick: handleOpen
  }, /*#__PURE__*/React.createElement("div", null, title), /*#__PURE__*/React.createElement(Icon, {
    icon: isOpen ? 'icon-angle-down' : 'icon-angle-up'
  })), /*#__PURE__*/React.createElement("div", {
    className: contentStyles
  }, content));
};

AccordionItem.displayName = 'Accordion Item';
AccordionItem.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  title: propTypes.exports.node.isRequired,
  content: propTypes.exports.node.isRequired,
  size: propTypes.exports.oneOf(['small', 'medium'])
};
AccordionItem.defaultProps = {
  className: styles$X.accordion__item,
  size: 'medium'
};

/**
 * Accordion - stateless presentational component
 * @param {object} props - props
 * @param {array} props.data - accordion content
 * @param {bool} props.hasNumber - has number
 * @param {string} props.size
 * @return {object} An object of children element
 */

const Accordion = ({
  data,
  hasNumber,
  size
}) => /*#__PURE__*/React.createElement("div", null, data.map((item, index) => {
  const {
    title,
    content
  } = item;
  return /*#__PURE__*/React.createElement(AccordionItem, {
    key: uuid_1(),
    number: hasNumber ? index + 1 : null,
    title: title,
    size: size,
    content: content
  });
}));

Accordion.displayName = 'Accordion';
Accordion.propTypes = {
  data: propTypes.exports.arrayOf(propTypes.exports.shape({
    title: propTypes.exports.node.isRequired,
    content: propTypes.exports.node.isRequired
  })).isRequired,
  hasNumber: propTypes.exports.bool,
  size: propTypes.exports.oneOf(['small', 'medium'])
};
Accordion.defaultProps = {
  size: 'medium',
  hasNumber: false
};
var Accordion$1 = /*#__PURE__*/react.exports.memo(Accordion);

var styles$W = {"text--truncate":"Alert-module_text--truncate__eaYch","alert-message":"Alert-module_alert-message__xbVJN","alert__message":"Alert-module_alert__message__4TQjo","alert-message--alert":"Alert-module_alert-message--alert__RIDkz","alert-message--warning":"Alert-module_alert-message--warning__MehY2","alert-message--success":"Alert-module_alert-message--success__EpRxy","alert-message--info":"Alert-module_alert-message--info__XWRBn"};

/**
 * Alert - stateless presentational component
 * @param {object} props - props
 * @param {node|string|object} props.children - children
 * @param {string|array} props.className - list of class names
 * @param {string} props.type - type of alert message
 * @return {object} An object of children element
 */

const Alert = ({
  children,
  className,
  type
}) => {
  const alertStyles = useStyles({
    [styles$W['alert-message']]: true,
    [styles$W[`alert-message--${type}`]]: type
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: alertStyles
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: mapIconToClass(type),
    color: type
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$W.alert__message
  }, children));
};

Alert.displayName = 'Alert';
Alert.propTypes = {
  children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.string, propTypes.exports.func]).isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  type: propTypes.exports.oneOf(['info', 'success', 'warning', 'alert'])
};
Alert.defaultProps = {
  className: '',
  type: 'info'
};

var styles$V = {"text--truncate":"Image-module_text--truncate__2hDsM","image--small":"Image-module_image--small__IRvZ0","image--auto":"Image-module_image--auto__4d-T1"};

/**
 * Image - stateless presentational component
 * @param {object} props - props
 * @param {string} props.src - src url
 * @param {string} props.alt - alt text
 * @param {string|array} props.className - list of class names
 * @param {number|string} props.size - width of the image
 * @param {number} props.height - height of the image
 * @param {boolean} props.auto - auto size of image
 * @param {boolean} props.small - small image
 * @return {object} An object of children element
 */

const Image = ({
  src,
  alt,
  className,
  size,
  height,
  auto,
  small
}) => {
  const elementStyles = useStyles({
    [styles$V['image--auto']]: auto,
    [styles$V['image--small']]: small
  }, className);
  return /*#__PURE__*/React.createElement("img", {
    alt: alt,
    className: elementStyles,
    height: height,
    src: src,
    width: size
  });
};

Image.displayName = 'Image';
Image.propTypes = {
  alt: propTypes.exports.string,
  className: propTypes.exports.string,
  height: propTypes.exports.number,
  size: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
  src: propTypes.exports.oneOfType([propTypes.exports.string.isRequired, propTypes.exports.object.isRequired]).isRequired,
  auto: propTypes.exports.bool,
  small: propTypes.exports.bool
};
Image.defaultProps = {
  alt: null,
  className: '',
  height: null,
  size: null,
  auto: false,
  small: false
};
var Image$1 = /*#__PURE__*/react.exports.memo(Image);

var styles$U = {"text--truncate":"Avatar-module_text--truncate__7z5el","avatar":"Avatar-module_avatar__5-kP8","avatar--blank":"Avatar-module_avatar--blank__EcdP6","avatar--tiny":"Avatar-module_avatar--tiny__cvKKh","avatar--medium":"Avatar-module_avatar--medium__un4U9"};

const renderVariant = (variant, src, name) => variant === 'image' ? /*#__PURE__*/React.createElement(Image$1, {
  src: src
}) : /*#__PURE__*/React.createElement("p", null, name);
/**
 * Avatar - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {string} props.size - size of avatar
 * @param {string} props.variant - variant of avatar image
 * @param {string} props.src - source of avatar image
 * @param {string} props.name - avatar name
 * @return {object} An object of children element
 */


const Avatar = ({
  className,
  size,
  variant,
  src,
  name
}) => {
  const avatarStyles = useStyles({
    [styles$U['avatar']]: true,
    [styles$U[`avatar--${size}`]]: size,
    [styles$U[`avatar--${variant}`]]: variant
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    className: avatarStyles
  }, renderVariant(variant, src, name));
};

Avatar.displayName = 'Avatar';
Avatar.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  name: propTypes.exports.string,
  size: propTypes.exports.oneOf(['tiny', 'medium']),
  src: propTypes.exports.string,
  variant: propTypes.exports.oneOf(['image', 'blank'])
};
Avatar.defaultProps = {
  className: '',
  name: null,
  size: 'medium',
  src: '',
  variant: 'blank'
};

var scss$2 = {"text--truncate":"Spreader_text--truncate__xQYi8","spreader":"Spreader_spreader__lmB06","spreader--mini":"Spreader_spreader--mini__OB5kR","spreader--tiny":"Spreader_spreader--tiny__L44yx","spreader--small":"Spreader_spreader--small__61iel","spreader--medium":"Spreader_spreader--medium__bL833","spreader--large":"Spreader_spreader--large__ZIEx8","spreader--x-large":"Spreader_spreader--x-large__yHNcV","spreader--big":"Spreader_spreader--big__NmzUq","spreader--huge":"Spreader_spreader--huge__OwRua"};

const cssClass$2 = styles$1b(scss$2); //TODO Spreader css, test

/**
 * Spreader - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: `spreader`
 * @param {string} props.spread - spread size
 * @return {object} An object of children element
 */

const Spreader = ({
  className,
  spread
}) => /*#__PURE__*/React.createElement("div", {
  className: cssClass$2(className, `spreader--${spread}`)
});

Spreader.displayName = 'Spreader';
Spreader.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  spread: propTypes.exports.oneOf(['mini', 'tiny', 'small', 'medium', 'large', 'x-large', 'big', 'huge'])
};
Spreader.defaultProps = {
  className: 'spreader',
  spread: 'medium'
};

var styles$T = {"text--truncate":"Back-module_text--truncate__D3BTG","back":"Back-module_back__6QVso","hidden":"Back-module_hidden__Y4mBY"};

/**
 * Back - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: back
 * @param {string} props.url - url, default: ''
 * @param {string} props.content - content, default: ''
 * @param {func} props.onClick - onClick
 * @return {object} An object of children element
 */

const Back = ({
  className,
  url,
  content,
  label,
  onClick
}) => {
  const elementStyles = useStyles({
    [styles$T['back']]: true
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    "data-testid": "back",
    className: elementStyles
  }, /*#__PURE__*/React.createElement("a", {
    href: url
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: content,
    placement: "bottom",
    disabled: !content
  }, /*#__PURE__*/React.createElement(Button$1, {
    variant: "icon",
    onClick: onClick
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-arrow-left"
  }), /*#__PURE__*/React.createElement(Spreader, {
    spread: "tiny"
  }), label && label))));
};

Back.displayName = 'Back';
Back.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  url: propTypes.exports.string,
  label: propTypes.exports.string,
  content: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),
  onClick: propTypes.exports.func
};
Back.defaultProps = {
  label: null,
  className: '',
  content: null,
  url: null,
  onClick: () => null
};

/**
 * useUpdateEffect - rerender component only when dependency array changed
 * @param {function} props.effect - function to call
 * @param {array} props.dependencies - dependency array
 * @return {object}
 */

const useUpdateEffect = (effect, dependencies = []) => {
  const isInitialMount = react.exports.useRef(true);
  react.exports.useEffect(() => {
    if (isInitialMount.current) {
      isInitialMount.current = false;
    } else {
      effect();
    }
  }, dependencies);
};

const ButtonGroupContext = /*#__PURE__*/react.exports.createContext(null);

const useButtonGroupState = initialValue => {
  const [selected, setSelected] = react.exports.useState(initialValue);
  return {
    selected,
    setSelected
  };
};
/**
 * ButtonGroupProvider - statefull provider component
 * @param {children} props.children - children of the component
 * @param {string} props.initialValue - initial active id
 * @param {function} props.onChange - change state callback
 * @return {object} An object of children element
 */


const ButtonGroupProvider = ({
  children,
  initialValue,
  onChange
}) => {
  const value = useButtonGroupState(initialValue);
  const {
    selected
  } = value;
  useUpdateEffect(() => onChange(selected), [value]);
  return /*#__PURE__*/React.createElement(ButtonGroupContext.Provider, {
    value: value
  }, children);
};
ButtonGroupProvider.propTypes = {
  children: propTypes.exports.node.isRequired,
  onChange: propTypes.exports.func.isRequired,
  initialValue: propTypes.exports.string
};
ButtonGroupProvider.defaultProps = {
  initialValue: null
};
const useButtonGroupContext = () => {
  const buttonGroup = react.exports.useContext(ButtonGroupContext);

  if (!buttonGroup) {
    throw new Error('useButtonGroupContext must be used inside ButtonGroupProvider');
  }

  return buttonGroup;
};

var styles$S = {"text--truncate":"ButtonGroup-module_text--truncate__HAbZq","wrapper":"ButtonGroup-module_wrapper__6XLyS","button":"ButtonGroup-module_button__Qd3wE","button--active":"ButtonGroup-module_button--active__V1QX-"};

/**
 * ButtonGroup - stateless presentational component
 * @param {children} props.children - children of the component
 * @param {string} props.initialValue - initial active id
 * @param {function} props.onChange - change state callback
 * @return {object} An object of children element
 */

const ButtonGroup = ({
  children,
  initialValue,
  onChange
}) => /*#__PURE__*/React.createElement(ButtonGroupProvider, {
  initialValue: initialValue,
  onChange: onChange
}, /*#__PURE__*/React.createElement("div", {
  className: styles$S.wrapper
}, children));

ButtonGroup.displayName = 'ButtonGroup';
ButtonGroup.propTypes = {
  children: propTypes.exports.node.isRequired,
  onChange: propTypes.exports.func.isRequired,
  initialValue: propTypes.exports.string
};
ButtonGroup.defaultProps = {
  initialValue: null
};

/**
 * Button - statefull presentational component
 * @param {node} props.children - children of the component
 * @param {string} props.id - id of the component
 * @return {object} An object of children element
 */

const Button = ({
  children,
  id
}) => {
  const {
    selected,
    setSelected
  } = useButtonGroupContext();
  const buttonStyles = useStyles({
    [styles$S.button]: true,
    [styles$S[`button--active`]]: selected === id
  });

  const handleChange = () => setSelected(id);

  return /*#__PURE__*/React.createElement("button", {
    className: buttonStyles,
    onClick: handleChange
  }, children);
};

Button.displayName = 'ButtonGroupButton';
Button.propTypes = {
  children: propTypes.exports.node.isRequired,
  id: propTypes.exports.string.isRequired
};

ButtonGroup.Button = Button;

var styles$R = {"text--truncate":"Backdrop-module_text--truncate__cjp-c","backdrop":"Backdrop-module_backdrop__sB-mT","backdrop__index-4":"Backdrop-module_backdrop__index-4__mgW3B","backdrop__index-6":"Backdrop-module_backdrop__index-6__RGltE","backdrop__index-8":"Backdrop-module_backdrop__index-8__FA2Dd"};

/**
 * Backdrop - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {function} props.onClick - click handler
 * @param {number} props.zIndex
 * @return {object} An object of children element
 */

const Backdrop = ({
  className,
  onClick,
  zIndex
}) => {
  const backdropStyles = useStyles({
    [styles$R.backdrop]: true,
    [styles$R['backdrop__index-4']]: String(zIndex) === '4',
    [styles$R['backdrop__index-6']]: String(zIndex) === '6',
    [styles$R['backdrop__index-8']]: String(zIndex) === '8'
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: backdropStyles,
    onClick: onClick,
    "data-testid": "backdrop"
  });
};

Backdrop.displayName = 'Backdrop';
Backdrop.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  onClick: propTypes.exports.func,
  zIndex: propTypes.exports.oneOf(['4', '6', '8'])
};
Backdrop.defaultProps = {
  onClick: () => null,
  className: '',
  zIndex: null
};

var styles$Q = {"text--truncate":"Badge-module_text--truncate__YlWm1","badge":"Badge-module_badge__ZbEBU","badge__tooltip":"Badge-module_badge__tooltip__uIAJK","badge--accent-1":"Badge-module_badge--accent-1__W9cxn","badge--accent-2":"Badge-module_badge--accent-2__NTq-U","badge--accent-3":"Badge-module_badge--accent-3__hEASz","badge--accent-4":"Badge-module_badge--accent-4__Ck5dA","badge--accent-5":"Badge-module_badge--accent-5__FUotC","badge--accent-6":"Badge-module_badge--accent-6__MoCPA","badge--accent-7":"Badge-module_badge--accent-7__aeniW","badge--accent-8":"Badge-module_badge--accent-8__bSHYd","badge--alert":"Badge-module_badge--alert__F97SN","badge--warning":"Badge-module_badge--warning__SABjF","badge--success":"Badge-module_badge--success__ymIaK","badge--info":"Badge-module_badge--info__IRK9m","badge--pending":"Badge-module_badge--pending__v8UHR","badge--indicator":"Badge-module_badge--indicator__ElBEb","badge--paid":"Badge-module_badge--paid__YJbLX","badge--open":"Badge-module_badge--open__HeeX1","badge--canceled":"Badge-module_badge--canceled__AwgnS","badge--ai":"Badge-module_badge--ai__BkpEJ"};

/**
 * Badge - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string|array} props.className - list of class names
 * @param {string} props.type - type of badge
 * @param {string|object} props.tooltip - tooltip content
 * @param {bool} props.isIndicator - has indicator
 * @return {object} An object of children element
 */

const Badge = ({
  children,
  className,
  type,
  tooltip,
  isIndicator
}) => {
  const badgeRef = react.exports.useRef();
  const width = badgeRef.current ? badgeRef.current.offsetWidth : 0;
  const badgeStyles = useStyles({
    [styles$Q.badge]: true,
    [styles$Q[`badge--${type}`]]: type,
    [styles$Q['badge--indicator']]: isIndicator
  }, className);
  const tooltipStyles = useStyles({
    [styles$Q['badge__tooltip']]: tooltip
  });
  return /*#__PURE__*/React.createElement(Tooltip, {
    content: tooltip,
    disabled: !tooltip || width < 105
  }, /*#__PURE__*/React.createElement("span", {
    ref: badgeRef,
    className: badgeStyles
  }, /*#__PURE__*/React.createElement("span", {
    className: tooltipStyles
  }, children)));
};

Badge.displayName = 'Badge';
Badge.propTypes = {
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  type: propTypes.exports.oneOf(['primary', 'secondary', 'warning', 'alert', 'pending', 'success', 'info', 'indicator', 'paid', 'open', 'canceled', 'ai', 'accent-1', 'accent-2', 'accent-3', 'accent-4', 'accent-5', 'accent-6', 'accent-7', 'accent-8']),
  tooltip: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),
  isIndicator: propTypes.exports.bool
};
Badge.defaultProps = {
  className: '',
  type: 'primary',
  tooltip: null,
  isIndicator: false
};

var styles$P = {"text--truncate":"List-module_text--truncate__-G3ts","list":"List-module_list__yt0s5","list__item":"List-module_list__item__Zaere","list--inline":"List-module_list--inline__qtMYm","list-item--table":"List-module_list-item--table__BD36t","list-item--list":"List-module_list-item--list__RiUg-","list-item--block":"List-module_list-item--block__nLk7-","list-item--dropdown":"List-module_list-item--dropdown__tssPM","list-item--menu":"List-module_list-item--menu__auwtG","list-item--menu-active":"List-module_list-item--menu-active__F0gQs","list-item--small":"List-module_list-item--small__R-Mdx","list-item--margin":"List-module_list-item--margin__3zLPC","list--ordered-decimal":"List-module_list--ordered-decimal__G7mPj","list--ordered-disc":"List-module_list--ordered-disc__aYjeG","list--ordered-check":"List-module_list--ordered-check__Ms6JY"};

/**
 * List - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string} props.variant - Variant
 * @param {string|array} props.className - list of class names out of component
 * @param {string} props.listStyle - list style
 * @return {object} An object of children element
 */

const List = ({
  children,
  variant,
  className,
  listStyle
}) => {
  const elementClasses = useStyles({
    [styles$P['list']]: true,
    [styles$P['list--inline']]: variant === 'inline',
    [styles$P[`list--${listStyle}`]]: listStyle
  }, className);
  return /*#__PURE__*/React.createElement("ul", {
    className: elementClasses
  }, React.Children.toArray(children).filter(item => item));
};

List.displayName = 'List';
List.propTypes = {
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  listStyle: propTypes.exports.oneOf(['ordered-check', 'ordered-decimal', 'ordered-disc', '']),
  variant: propTypes.exports.oneOf(['inline', ''])
};
List.defaultProps = {
  className: '',
  listStyle: '',
  variant: ''
};

/**
 * ListItem - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string} props.variant - Variant `menu, dropdown, table`
 * @param {string} props.size - size
 * @param {string|array} props.className - list of class names, default: `list__item`,
 * @param {bool} props.margin - left margin
 * @return {object} An object of children element
 */

const ListItem = ({
  children,
  variant,
  size,
  className,
  margin
}) => {
  const elementClasses = useStyles({
    [styles$P['list__item']]: true,
    [styles$P[`list-item--${variant}`]]: variant,
    [styles$P['list-item--margin']]: margin,
    [styles$P['list-item--small']]: size === 'small'
  }, className);
  return /*#__PURE__*/React.createElement("li", {
    className: elementClasses
  }, /*#__PURE__*/React.createElement("div", null, children));
};

ListItem.displayName = 'ListItem';
ListItem.propTypes = {
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  margin: propTypes.exports.bool,
  size: propTypes.exports.oneOf(['small', '']),
  variant: propTypes.exports.oneOf(['menu', 'dropdown', 'table', 'list', 'block', ''])
};
ListItem.defaultProps = {
  className: '',
  margin: false,
  size: '',
  variant: ''
};

var styles$O = {"text--truncate":"Panel-module_text--truncate__cvEeJ","panel":"Panel-module_panel__nwNeT","panel--background":"Panel-module_panel--background__-eNL2","panel--padding-default":"Panel-module_panel--padding-default__ISqNw","panel--padding-tiny":"Panel-module_panel--padding-tiny__xKQgr","panel--padding-nolr":"Panel-module_panel--padding-nolr__9MCjC","panel--padding-none":"Panel-module_panel--padding-none__IyINM","panel--padding-bottom-tiny":"Panel-module_panel--padding-bottom-tiny__AdPMa","panel--padding-input":"Panel-module_panel--padding-input__WzDvo","panel--adjust-height":"Panel-module_panel--adjust-height__SQ9Ui","panel--shadow-none":"Panel-module_panel--shadow-none__L3VRp"};

/**
 * Panel - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {object} props.children - children
 * @param {string} props.variant - variant
 * @param {bool} props.adjustHeight - adjust panel height to container height
 * @param {bool} props.isBackground - add background
 * @param {bool} props.hasShadow - panel shadow, default true
 * @return {object} An object of children element
 */

const Panel = ({
  className,
  children,
  variant,
  adjustHeight,
  isBackground,
  hasShadow
}) => {
  const elementClasses = useStyles({
    [styles$O['panel']]: true,
    [styles$O['panel--adjust-height']]: adjustHeight,
    [styles$O['panel--background']]: isBackground,
    [styles$O['panel--background']]: !hasShadow,
    [styles$O[`panel--${variant}`]]: variant
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }, children);
};

Panel.displayName = 'Panel';
Panel.propTypes = {
  adjustHeight: propTypes.exports.bool,
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  hasShadow: propTypes.exports.bool,
  isBackground: propTypes.exports.bool,
  variant: propTypes.exports.oneOf(['padding-default', 'padding-nolr', 'padding-tiny', 'padding-none', 'padding-bottom-tiny', 'padding-input', 'padding-huge'])
};
Panel.defaultProps = {
  adjustHeight: false,
  className: '',
  hasShadow: true,
  isBackground: false,
  variant: 'padding-default'
};

var styles$N = {"text--truncate":"BlockSection-module_text--truncate__FuVvO","block-section":"BlockSection-module_block-section__5z7Lb","block-section__panel":"BlockSection-module_block-section__panel__OkppT","block-section__panel--reverse":"BlockSection-module_block-section__panel--reverse__rp-Q-","block-section__panel--content":"BlockSection-module_block-section__panel--content__HVbu7"};

/**
 * Block Section - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {string} props.title - title
 * @param {string} props.message - message
 * @param {string} props.button - button title
 * @param {func} props.onClick - button action
 * @param {string} props.url - image url
 * @param {bool} props.reverse - column reverse
 * @param {array} props.list - list
 * @return {object} An object of children element
 */

const BlockSection = ({
  className,
  title,
  message,
  button,
  onClick,
  url,
  reverse,
  list
}) => {
  const wrapperClasses = useStyles({
    [styles$N['block-section']]: true
  }, className);
  const elementClasses = useStyles({
    [styles$N['block-section__panel']]: true,
    [styles$N['block-section__panel--reverse']]: reverse
  });
  return /*#__PURE__*/React.createElement("div", {
    className: wrapperClasses
  }, /*#__PURE__*/React.createElement(Panel, {
    variant: "padding-none"
  }, /*#__PURE__*/React.createElement("div", {
    "data-testid": "panel",
    className: elementClasses
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$N['block-section__panel--content']
  }, /*#__PURE__*/React.createElement(Heading, {
    bold: true,
    level: 2
  }, title), /*#__PURE__*/React.createElement(Paragraph, {
    line: 20,
    padding: list ? 'none' : 'medium',
    weight: 400
  }, message), list && /*#__PURE__*/React.createElement(List, {
    listStyle: "ordered-disc"
  }, list.map(item => /*#__PURE__*/React.createElement(ListItem, {
    key: uuid_1(),
    variant: "block"
  }, item))), /*#__PURE__*/React.createElement(Spacer, {
    space: list ? 'medium' : 'small'
  }), /*#__PURE__*/React.createElement(Button$1, {
    onClick: onClick
  }, button)), /*#__PURE__*/React.createElement(Image$1, {
    size: 527,
    src: url
  }))));
};

BlockSection.displayName = 'Block Section';
BlockSection.propTypes = {
  button: propTypes.exports.string.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  list: propTypes.exports.arrayOf(propTypes.exports.string),
  message: propTypes.exports.string.isRequired,
  onClick: propTypes.exports.func,
  reverse: propTypes.exports.bool,
  title: propTypes.exports.string.isRequired,
  url: propTypes.exports.string.isRequired
};
BlockSection.defaultProps = {
  className: '',
  list: null,
  reverse: false,
  onClick: () => null
};

var styles$M = {"text--truncate":"BoxBackground-module_text--truncate__taorY","boxBackground":"BoxBackground-module_boxBackground__s84Mt","boxBackground--success":"BoxBackground-module_boxBackground--success__jcIbs","boxBackground--warning":"BoxBackground-module_boxBackground--warning__pDKF9","boxBackground--alert":"BoxBackground-module_boxBackground--alert__VF4f-","boxBackground--progress":"BoxBackground-module_boxBackground--progress__v5D0M","boxBackground--info":"BoxBackground-module_boxBackground--info__CnhIt"};

/**
 * Box Background - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {object} props.children - children element
 * @param {string} props.variant - variant
 * @return {object} An object of children element
 */

const BoxBackground = ({
  className,
  children,
  variant
}) => {
  const elementClasses = useStyles({
    [styles$M['boxBackground']]: true,
    [styles$M[`boxBackground--${variant}`]]: variant
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    className: elementClasses
  }, children);
};

BoxBackground.displayName = 'BoxBackground';
BoxBackground.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  children: propTypes.exports.node.isRequired,
  variant: propTypes.exports.oneOf(['success', 'warning', 'alert', 'progress', 'info']).isRequired
};
BoxBackground.defaultProps = {
  className: ''
};

var styles$L = {"text--truncate":"BoxOutline-module_text--truncate__JlpxK","box-outline":"BoxOutline-module_box-outline__-A2Lk","box-outline__disabled":"BoxOutline-module_box-outline__disabled__xPkQp","box-outline__default":"BoxOutline-module_box-outline__default__EnZf3","box-outline__default--hover":"BoxOutline-module_box-outline__default--hover__BMIg5","box-outline__background":"BoxOutline-module_box-outline__background__IlfR8","box-outline__background--hover":"BoxOutline-module_box-outline__background--hover__0qrtO","box-outline__no-padding":"BoxOutline-module_box-outline__no-padding__wsZ3w","box-outline__is-selected":"BoxOutline-module_box-outline__is-selected__vszMZ","box-outline__is-selected--hover":"BoxOutline-module_box-outline__is-selected--hover__4fhtH","box-outline__checkmark-status":"BoxOutline-module_box-outline__checkmark-status__vS22A","box-outline__checkmark-status--is-selected":"BoxOutline-module_box-outline__checkmark-status--is-selected__GbZhR"};

/**
 * Box outline - stateless presentational component
 * @param {object} children - children
 * @param {string|array} className - list of custom classes out of component
 * @param {string} variant - box variant
 * @param {boolean} isSelected - bool to decide if box was selected or not
 * @param {func} onClickHandler - callback to invoke when box was clicked
 * @param {func} onDoubleClickHandler - callback to invoke when box was clicked double times
 * @param {string} padding - deafult is set. Set 'none' to turn off
 * @param {boolean} disableHover - disable hover events only
 * @param {boolean} disabled - grayed contend and disable all events
 * @param {boolean} noCheckmark - selected without green checkmark on top right corner
 * @param {func} onMouseOver - onMouseOver
 * @param {func} onMouseLeave - onMouseLeave
 * @return {object} An object of children element
 */

const BoxOutline = ({
  children,
  className,
  variant,
  isSelected,
  onClickHandler,
  onDoubleClickHandler,
  padding,
  disableHover,
  disabled,
  noCheckmark,
  onMouseOver,
  onMouseLeave
}) => {
  const elementClasses = useStyles({
    [styles$L['box-outline']]: true,
    [styles$L[`box-outline__${variant}`]]: variant,
    [styles$L[`box-outline__${variant}--hover`]]: !disableHover,
    [styles$L['box-outline__is-selected']]: isSelected,
    [styles$L['box-outline__is-selected--hover']]: isSelected && !disableHover,
    [styles$L['box-outline__no-padding']]: padding === 'none',
    [styles$L['box-outline__disabled']]: disabled
  }, className);
  const checkmarkStatusClasses = useStyles({
    [styles$L['box-outline__checkmark-status']]: true,
    [styles$L['box-outline__checkmark-status--is-selected']]: isSelected
  });
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "box-outline",
    className: elementClasses,
    onClick: onClickHandler,
    onDoubleClick: onDoubleClickHandler,
    onMouseOver: onMouseOver,
    onMouseLeave: onMouseLeave
  }, isSelected && !noCheckmark && /*#__PURE__*/React.createElement("span", {
    className: checkmarkStatusClasses
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-ok",
    color: "white"
  })), children);
};

BoxOutline.propTypes = {
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  variant: propTypes.exports.oneOf(['default', 'background']),
  isSelected: propTypes.exports.bool,
  onClickHandler: propTypes.exports.func,
  onDoubleClickHandler: propTypes.exports.func,
  padding: propTypes.exports.oneOf(['', 'none']),
  disableHover: propTypes.exports.bool,
  disabled: propTypes.exports.bool,
  noCheckmark: propTypes.exports.bool,
  onMouseOver: propTypes.exports.func,
  onMouseLeave: propTypes.exports.func
};
BoxOutline.defaultProps = {
  className: '',
  variant: 'default',
  isSelected: false,
  onClick: () => null,
  onDoubleClick: () => null,
  padding: '',
  disableHover: false,
  disabled: false,
  noCheckmark: false,
  onMouseOver: () => null,
  onMouseLeave: () => null
};
BoxOutline.displayName = 'BoxOutline';

var styles$K = {"text--truncate":"Card-module_text--truncate__V1PAm","card":"Card-module_card__LzN-3","card--success":"Card-module_card--success__-xF1x","card--warning":"Card-module_card--warning__tTne9","card--alert":"Card-module_card--alert__krr0Y","container":"Card-module_container__K688s"};

/**
 * Card - stateless presentational component
 * @param {string|array} props.className - list of class names
 * @param {object} props.children - children
 * @param {string} props.variant - variant
 * @return {object} An object of children element
 */

const Card = ({
  className,
  children,
  variant
}) => {
  const elementClasses = useStyles({
    [styles$K['card']]: true,
    [styles$K[`card--${variant}`]]: variant
  }, className);
  const containerClasses = useStyles({
    [styles$K['container']]: true
  });
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "card",
    className: elementClasses
  }, /*#__PURE__*/React.createElement("div", {
    className: containerClasses
  }, React.Children.map(children, child => /*#__PURE__*/React.cloneElement(child))));
};

Card.displayName = 'Card';
Card.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  children: propTypes.exports.node.isRequired,
  variant: propTypes.exports.oneOf(['alert', 'warning', 'success']).isRequired
};
Card.defaultProps = {
  className: ''
};

var styles$J = {"text--truncate":"Check-module_text--truncate__wEnyK","check":"Check-module_check__TPGL4","check--positive":"Check-module_check--positive__uDYwI","check__line-through":"Check-module_check__line-through__JOHWg","check--crossed-out":"Check-module_check--crossed-out__TdCyC","strike":"Check-module_strike__X5waS"};

/**
 * Check - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {bool} positive - positive
 * @param {object} children - children
 * @param {string} iconWidth - iconWidth
 * @param {bool} crossedOutOnPositive - defines whether text crossing out animation will be player or not when positive prop changes to true
 * @return {object} An object of children element
 */

const Check = ({
  className,
  children,
  positive,
  iconWidth,
  crossedOutOnPositive
}) => {
  const wrapperStyles = useStyles({
    [styles$J['check']]: true,
    [styles$J['check--positive']]: positive,
    [styles$J['check--crossed-out']]: positive && crossedOutOnPositive
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    className: wrapperStyles
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: positive ? 'icon-ok' : 'icon-remove',
    style: {
      width: iconWidth
    }
  }), /*#__PURE__*/React.createElement(Spreader, {
    spread: "tiny"
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$J['check__line-through']
  }, children));
};

Check.displayName = 'Check';
Check.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  children: propTypes.exports.node.isRequired,
  positive: propTypes.exports.bool,
  iconWidth: propTypes.exports.string,
  crossedOutOnPositive: propTypes.exports.bool
};
Check.defaultProps = {
  className: '',
  positive: false,
  iconWidth: '1em',
  crossedOutOnPositive: false
};

var styles$I = {"text--truncate":"ColorLine-module_text--truncate__JivkU","color-line":"ColorLine-module_color-line__QPTPV","color-line--vertical":"ColorLine-module_color-line--vertical__yMjs8","color-line--success":"ColorLine-module_color-line--success__xojTC","color-line--warning":"ColorLine-module_color-line--warning__WgLxF","color-line--alert":"ColorLine-module_color-line--alert__BFNEa","color-line--info":"ColorLine-module_color-line--info__WR5vE"};

/**
 * Color line - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {string} props.variant - variant
 * @param {string} props.alignment - alignment
 * @return {object} An object of children element
 */

const ColorLine = ({
  className,
  variant,
  alignment
}) => {
  const elementClasses = useStyles({
    [styles$I['color-line']]: true,
    [styles$I[`color-line--${variant}`]]: variant,
    [styles$I[`color-line--${alignment}`]]: alignment
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    className: elementClasses
  });
};

ColorLine.displayName = 'ColorLine';
ColorLine.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  alignment: propTypes.exports.oneOf(['vertical', 'horizontal']),
  variant: propTypes.exports.oneOf(['alert', 'warning', 'success', 'info']).isRequired
};
ColorLine.defaultProps = {
  className: '',
  alignment: 'vertical'
};

var styles$H = {"text--truncate":"ColorNumber-module_text--truncate__IbM-X","color-number":"ColorNumber-module_color-number__ndYyD","color-number__color--success":"ColorNumber-module_color-number__color--success__m5gXO","color-number__color--warning":"ColorNumber-module_color-number__color--warning__7vZby","color-number__color--alert":"ColorNumber-module_color-number__color--alert__duAI3","color-number__color--progress":"ColorNumber-module_color-number__color--progress__3X41s","color-number__color--default":"ColorNumber-module_color-number__color--default__a-Ejb","color-number__color--brand":"ColorNumber-module_color-number__color--brand__dF6AM","color-number__color--white":"ColorNumber-module_color-number__color--white__k92gx","color-number__size--10":"ColorNumber-module_color-number__size--10__FFEeY","color-number__size--12":"ColorNumber-module_color-number__size--12__V5hcT","color-number__size--16":"ColorNumber-module_color-number__size--16__xMG5V","color-number__size--18":"ColorNumber-module_color-number__size--18__MbL8P","color-number__size--32":"ColorNumber-module_color-number__size--32__g90Ej","color-number__size--44":"ColorNumber-module_color-number__size--44__H0H9E","color-number__size--62":"ColorNumber-module_color-number__size--62__5gnuu"};

/**
 * ColorNumber - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {object} props.children - children
 * @param {string} props.color - color
 * @param {number} props.size - size
 * @return {object} An object of children element
 */

const ColorNumber = ({
  className,
  children,
  variant,
  size
}) => {
  const elementClasses = useStyles({
    [styles$H['color-number']]: true,
    [styles$H[`color-number__color--${variant}`]]: variant,
    [styles$H[`color-number__size--${size}`]]: size
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    className: elementClasses
  }, children);
};

ColorNumber.displayName = 'ColorNumber';
ColorNumber.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  children: propTypes.exports.node.isRequired,
  variant: propTypes.exports.oneOf(['alert', 'warning', 'success', 'default', 'progress', 'info', 'brand', 'white']).isRequired,
  size: propTypes.exports.oneOf([10, 12, 16, 18, 32, 44, 62])
};
ColorNumber.defaultProps = {
  className: '',
  size: 18
};

var styles$G = {"text--truncate":"CustomLink-module_text--truncate__zghoR","custom-link":"CustomLink-module_custom-link__TQ7IV","custom-link--active":"CustomLink-module_custom-link--active__-YlG5","custom-link--inactive":"CustomLink-module_custom-link--inactive__EHXH-","custom-link--dark":"CustomLink-module_custom-link--dark__jeEXt","custom-link--underlined":"CustomLink-module_custom-link--underlined__4n86P","custom-link--10":"CustomLink-module_custom-link--10__3ZqNk","custom-link--12":"CustomLink-module_custom-link--12__g9iqF","custom-link--14":"CustomLink-module_custom-link--14__WeHUW","custom-link--16":"CustomLink-module_custom-link--16__aU-k9"};

/**
 * Custom Link - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {string} props.variant - variant of color:  active, inactive, dark
 * @param {string} props.size - variant of font-size: 14, 16; default: 14
 * @param {string} props.target - target
 * @param {string} props.href - href
 * @param {string} props.label - label to display
 * @param {boolean} props.underlined - add underlined to link
 * @param {function} props.onClick - click handler
 * @return {object} An object of children element
 */

const CustomLink = ({
  className,
  variant,
  label,
  href,
  target,
  size,
  underlined,
  onClick
}) => {
  const customLinkStyles = useStyles({
    [styles$G['custom-link']]: true,
    [styles$G[`custom-link--${variant}`]]: variant,
    [styles$G[`custom-link--${size}`]]: size,
    [styles$G['custom-link--underlined']]: underlined
  }, className);
  return /*#__PURE__*/React.createElement("a", {
    "data-testid": "custom-link",
    className: customLinkStyles,
    href: href,
    onClick: onClick,
    target: target
  }, label);
};

CustomLink.displayName = 'CustomLink';
CustomLink.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  href: propTypes.exports.string,
  label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.node]).isRequired,
  size: propTypes.exports.oneOf([10, 12, 14, 16]),
  target: propTypes.exports.string,
  variant: propTypes.exports.oneOf(['active', 'inactive', 'dark']),
  onClick: propTypes.exports.func,
  underlined: propTypes.exports.bool
};
CustomLink.defaultProps = {
  className: '',
  size: 14,
  target: '_self',
  variant: 'active',
  underlined: false,
  href: null,
  onClick: () => null
};

var dist$1 = {};

var DateRange$1 = {};

var Calendar$1 = {};

var DayCell$1 = {};

var classnames = {exports: {}};

/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

(function (module) {
	/* global define */
	(function () {

	  var hasOwn = {}.hasOwnProperty;

	  function classNames() {
	    var classes = [];

	    for (var i = 0; i < arguments.length; i++) {
	      var arg = arguments[i];
	      if (!arg) continue;
	      var argType = typeof arg;

	      if (argType === 'string' || argType === 'number') {
	        classes.push(arg);
	      } else if (Array.isArray(arg)) {
	        if (arg.length) {
	          var inner = classNames.apply(null, arg);

	          if (inner) {
	            classes.push(inner);
	          }
	        }
	      } else if (argType === 'object') {
	        if (arg.toString === Object.prototype.toString) {
	          for (var key in arg) {
	            if (hasOwn.call(arg, key) && arg[key]) {
	              classes.push(key);
	            }
	          }
	        } else {
	          classes.push(arg.toString());
	        }
	      }
	    }

	    return classes.join(' ');
	  }

	  if (module.exports) {
	    classNames.default = classNames;
	    module.exports = classNames;
	  } else {
	    window.classNames = classNames;
	  }
	})();
} (classnames));

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */

function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument); // Clone the date

  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

      console.warn(new Error().stack);
    }

    return new Date(NaN);
  }
}

/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */

function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}

var endOfDay$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': endOfDay
});

var require$$8$1 = /*@__PURE__*/getAugmentedNamespace(endOfDay$1);

/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date that should be before the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */

function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}

var isBefore$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': isBefore
});

var require$$10 = /*@__PURE__*/getAugmentedNamespace(isBefore$1);

/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date that should be after the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */

function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}

var isAfter$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': isAfter
});

var require$$6$2 = /*@__PURE__*/getAugmentedNamespace(isAfter$1);

/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */

function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

var startOfDay$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': startOfDay
});

/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day (and year and month)?
 *
 * @description
 * Are the given dates in the same day (and year and month)?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day (and year and month)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 * 
 * @example
 * // Are 4 September and 4 October in the same day?
 * var result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
 * //=> false
 * 
 * @example
 * // Are 4 September, 2014 and 4 September, 2015 in the same day?
 * var result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
 * //=> false
 */

function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

var isSameDay$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': isSameDay
});

var require$$1 = /*@__PURE__*/getAugmentedNamespace(isSameDay$1);

/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {*} value - the value to check
 * @returns {boolean} true if the given value is a date
 * @throws {TypeError} 1 arguments required
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */

function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}

/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Now `isValid` doesn't throw an exception
 *   if the first argument is not an instance of Date.
 *   Instead, argument is converted beforehand using `toDate`.
 *
 *   Examples:
 *
 *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
 *   |---------------------------|---------------|---------------|
 *   | `new Date()`              | `true`        | `true`        |
 *   | `new Date('2016-01-01')`  | `true`        | `true`        |
 *   | `new Date('')`            | `false`       | `false`       |
 *   | `new Date(1488370835081)` | `true`        | `true`        |
 *   | `new Date(NaN)`           | `false`       | `false`       |
 *   | `'2016-01-01'`            | `TypeError`   | `false`       |
 *   | `''`                      | `TypeError`   | `false`       |
 *   | `1488370835081`           | `TypeError`   | `true`        |
 *   | `NaN`                     | `TypeError`   | `false`       |
 *
 *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
 *   that try to coerce arguments to the expected type
 *   (which is also the case with other *date-fns* functions).
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */

function isValid(dirtyDate) {
  requiredArgs(1, arguments);

  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
    return false;
  }

  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

var isValid$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': isValid
});

var formatDistanceLocale$1 = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};

var formatDistance$1 = function (token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale$1[token];

  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }

  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
};

var formatDistance$2 = formatDistance$1;

function buildFormatLongFn(args) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // TODO: Remove String()

    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

var dateFormats$1 = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$1 = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$1 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$2 = {
  date: buildFormatLongFn({
    formats: dateFormats$1,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1,
    defaultWidth: 'full'
  })
};
var formatLong$3 = formatLong$2;

var formatRelativeLocale$1 = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};

var formatRelative$1 = function (token, _date, _baseDate, _options) {
  return formatRelativeLocale$1[token];
};

var formatRelative$2 = formatRelative$1;

function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!

    return valuesArray[index];
  };
}

var eraValues$1 = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues$1 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
}; // Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.

var monthValues$1 = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues$1 = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues$1 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

var ordinalNumber$1 = function (dirtyNumber, _options) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
};

var localize$2 = {
  ordinalNumber: ordinalNumber$1,
  era: buildLocalizeFn({
    values: eraValues$1,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
var localize$3 = localize$2;

function buildMatchFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }

  return undefined;
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }

  return undefined;
}

function buildMatchPatternFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

var matchOrdinalNumberPattern$1 = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$1 = /\d+/i;
var matchEraPatterns$1 = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns$1 = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$1 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns$1 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns$1 = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$1 = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns$1 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$1 = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns$1 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match$2 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1,
    parsePattern: parseOrdinalNumberPattern$1,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1,
    defaultParseWidth: 'any'
  })
};
var match$3 = match$2;

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */

var locale$1 = {
  code: 'en-US',
  formatDistance: formatDistance$2,
  formatLong: formatLong$3,
  formatRelative: formatRelative$2,
  localize: localize$3,
  match: match$3,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};
var enUS = locale$1;

var enUS$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': enUS
});

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number;
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */

function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */

function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

var MILLISECONDS_IN_DAY$1 = 86400000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY$1) + 1;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}

var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();

  while (output.length < targetLength) {
    output = '0' + output;
  }

  return sign + output;
}

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */

var formatters$2 = {
  // Year
  y: function (date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
  },
  // Month
  M: function (date, token) {
    var month = date.getUTCMonth();
    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function (date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function (date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return dayPeriodEnumValue.toUpperCase();

      case 'aaa':
        return dayPeriodEnumValue;

      case 'aaaaa':
        return dayPeriodEnumValue[0];

      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  // Hour [1-12]
  h: function (date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function (date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function (date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function (date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function (date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var formatters$3 = formatters$2;

var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
};
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */

var formatters = {
  // Era
  G: function (date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;

    switch (token) {
      // AD, BC
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated'
        });
      // A, B

      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow'
        });
      // Anno Domini, Before Christ

      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide'
        });
    }
  },
  // Year
  y: function (date, token, localize) {
    // Ordinal number
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year'
      });
    }

    return formatters$3.y(date, token);
  },
  // Local week-numbering year
  Y: function (date, token, localize, options) {
    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    } // Ordinal number


    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year'
      });
    } // Padding


    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function (date, token) {
    var isoWeekYear = getUTCISOWeekYear(date); // Padding

    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function (date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'Q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'QQ':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting'
        });
      // 1st quarter, 2nd quarter, ...

      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone quarter
  q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'qq':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone'
        });
      // 1st quarter, 2nd quarter, ...

      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Month
  M: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      case 'M':
      case 'MM':
        return formatters$3.M(date, token);
      // 1st, 2nd, ..., 12th

      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // J, F, ..., D

      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting'
        });
      // January, February, ..., December

      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone month
  L: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      // 1, 2, ..., 12
      case 'L':
        return String(month + 1);
      // 01, 02, ..., 12

      case 'LL':
        return addLeadingZeros(month + 1, 2);
      // 1st, 2nd, ..., 12th

      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // J, F, ..., D

      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone'
        });
      // January, February, ..., December

      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Local week of year
  w: function (date, token, localize, options) {
    var week = getUTCWeek(date, options);

    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week'
      });
    }

    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function (date, token, localize) {
    var isoWeek = getUTCISOWeek(date);

    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week'
      });
    }

    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function (date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date'
      });
    }

    return formatters$3.d(date, token);
  },
  // Day of year
  D: function (date, token, localize) {
    var dayOfYear = getUTCDayOfYear(date);

    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear'
      });
    }

    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();

    switch (token) {
      // Tue
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Local day of week
  e: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case 'e':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'ee':
        return addLeadingZeros(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th

      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone local day of week
  c: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (same as in `e`)
      case 'c':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'cc':
        return addLeadingZeros(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th

      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // T

      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone'
        });
      // Tu

      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone'
        });
      // Tuesday

      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // ISO day of week
  i: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

    switch (token) {
      // 2
      case 'i':
        return String(isoDayOfWeek);
      // 02

      case 'ii':
        return addLeadingZeros(isoDayOfWeek, token.length);
      // 2nd

      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day'
        });
      // Tue

      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM or PM
  a: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM, PM, midnight, noon
  b: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }

    switch (token) {
      case 'b':
      case 'bb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Hour [1-12]
  h: function (date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return formatters$3.h(date, token);
  },
  // Hour [0-23]
  H: function (date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour'
      });
    }

    return formatters$3.H(date, token);
  },
  // Hour [0-11]
  K: function (date, token, localize) {
    var hours = date.getUTCHours() % 12;

    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function (date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;

    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function (date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute'
      });
    }

    return formatters$3.m(date, token);
  },
  // Second
  s: function (date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second'
      });
    }

    return formatters$3.s(date, token);
  },
  // Fraction of second
  S: function (date, token) {
    return formatters$3.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return 'Z';
    }

    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`

      case 'XXXX':
      case 'XX':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`

      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`

      case 'xxxx':
      case 'xx':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`

      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (GMT)
  O: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (specific non-location)
  z: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Seconds timestamp
  t: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};

function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;

  if (minutes === 0) {
    return sign + String(hours);
  }

  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}

function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }

  return formatTimezone(offset, dirtyDelimiter);
}

function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

var formatters$1 = formatters;

function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });

    case 'PP':
      return formatLong.date({
        width: 'medium'
      });

    case 'PPP':
      return formatLong.date({
        width: 'long'
      });

    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
}

function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });

    case 'pp':
      return formatLong.time({
        width: 'medium'
      });

    case 'ppp':
      return formatLong.time({
        width: 'long'
      });

    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
}

function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  var dateTimeFormat;

  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;

    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;

    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;

    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }

  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}

var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters$1 = longFormatters;

/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}

// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The second argument is now required for the sake of explicitness.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   format(new Date(2016, 0, 1))
 *
 *   // v2.0.0 onward
 *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
 *   ```
 *
 * - New format string API for `format` function
 *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
 *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
 *
 * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */

function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale = options.locale || enUS;
  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (!locale.localize) {
    throw new RangeError('locale must contain localize property');
  }

  if (!locale.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }

  var originalDate = toDate(dirtyDate);

  if (!isValid(originalDate)) {
    throw new RangeError('Invalid time value');
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp$1).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale.formatLong, formatterOptions);
    }

    return substring;
  }).join('').match(formattingTokensRegExp$1).map(function (substring) {
    // Replace two single quote characters with one single quote character
    if (substring === "''") {
      return "'";
    }

    var firstCharacter = substring[0];

    if (firstCharacter === "'") {
      return cleanEscapedString$1(substring);
    }

    var formatter = formatters$1[firstCharacter];

    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }

      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }

      return formatter(utcDate, substring, locale.localize, formatterOptions);
    }

    if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
    }

    return substring;
  }).join('');
  return result;
}

function cleanEscapedString$1(input) {
  return input.match(escapedStringRegExp$1)[1].replace(doubleQuoteRegExp$1, "'");
}

var format$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': format
});

var require$$24 = /*@__PURE__*/getAugmentedNamespace(format$1);

var require$$7$1 = /*@__PURE__*/getAugmentedNamespace(startOfDay$1);

function _typeof$7(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$7 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$7 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$7(obj);
}

Object.defineProperty(DayCell$1, "__esModule", {
  value: true
});
DayCell$1.default = DayCell$1.rangeShape = void 0;

var _react$7 = _interopRequireWildcard$7(react.exports);

var _propTypes$8 = _interopRequireDefault$a(propTypes.exports);

var _classnames4 = _interopRequireDefault$a(classnames.exports);

var _endOfDay$2 = _interopRequireDefault$a(require$$8$1);

var _isBefore$2 = _interopRequireDefault$a(require$$10);

var _isAfter$1 = _interopRequireDefault$a(require$$6$2);

var _isSameDay$3 = _interopRequireDefault$a(require$$1);

var _format$3 = _interopRequireDefault$a(require$$24);

var _startOfDay$2 = _interopRequireDefault$a(require$$7$1);

function _interopRequireDefault$a(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache$7(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache$7 = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard$7(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof$7(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache$7(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends$4() {
  _extends$4 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$4.apply(this, arguments);
}

function ownKeys$6(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread$6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$6(Object(source), true).forEach(function (key) {
        _defineProperty$8(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$6(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _toConsumableArray$1(arr) {
  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
}

function _nonIterableSpread$1() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray$1(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
}

function _iterableToArray$1(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles$1(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
}

function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck$7(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$7(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$7(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$7(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$7(Constructor, staticProps);
  return Constructor;
}

function _inherits$7(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf$7(subClass, superClass);
}

function _setPrototypeOf$7(o, p) {
  _setPrototypeOf$7 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$7(o, p);
}

function _createSuper$7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$7();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf$7(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$7(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn$7(this, result);
  };
}

function _possibleConstructorReturn$7(self, call) {
  if (call && (_typeof$7(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized$7(self);
}

function _assertThisInitialized$7(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct$7() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf$7(o) {
  _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$7(o);
}

function _defineProperty$8(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var DayCell = /*#__PURE__*/function (_Component) {
  _inherits$7(DayCell, _Component);

  var _super = _createSuper$7(DayCell);

  function DayCell(props, context) {
    var _this;

    _classCallCheck$7(this, DayCell);

    _this = _super.call(this, props, context);

    _defineProperty$8(_assertThisInitialized$7(_this), "handleKeyEvent", function (event) {
      var _this$props = _this.props,
          day = _this$props.day,
          onMouseDown = _this$props.onMouseDown,
          onMouseUp = _this$props.onMouseUp;

      if ([13
      /* space */
      , 32
      /* enter */
      ].includes(event.keyCode)) {
        if (event.type === 'keydown') onMouseDown(day);else onMouseUp(day);
      }
    });

    _defineProperty$8(_assertThisInitialized$7(_this), "handleMouseEvent", function (event) {
      var _this$props2 = _this.props,
          day = _this$props2.day,
          disabled = _this$props2.disabled,
          onPreviewChange = _this$props2.onPreviewChange,
          onMouseEnter = _this$props2.onMouseEnter,
          onMouseDown = _this$props2.onMouseDown,
          onMouseUp = _this$props2.onMouseUp;
      var stateChanges = {};

      if (disabled) {
        onPreviewChange();
        return;
      }

      switch (event.type) {
        case 'mouseenter':
          onMouseEnter(day);
          onPreviewChange(day);
          stateChanges.hover = true;
          break;

        case 'blur':
        case 'mouseleave':
          stateChanges.hover = false;
          break;

        case 'mousedown':
          stateChanges.active = true;
          onMouseDown(day);
          break;

        case 'mouseup':
          event.stopPropagation();
          stateChanges.active = false;
          onMouseUp(day);
          break;

        case 'focus':
          onPreviewChange(day);
          break;
      }

      if (Object.keys(stateChanges).length) {
        _this.setState(stateChanges);
      }
    });

    _defineProperty$8(_assertThisInitialized$7(_this), "getClassNames", function () {
      var _classnames;

      var _this$props3 = _this.props,
          isPassive = _this$props3.isPassive,
          isToday = _this$props3.isToday,
          isWeekend = _this$props3.isWeekend,
          isStartOfWeek = _this$props3.isStartOfWeek,
          isEndOfWeek = _this$props3.isEndOfWeek,
          isStartOfMonth = _this$props3.isStartOfMonth,
          isEndOfMonth = _this$props3.isEndOfMonth,
          disabled = _this$props3.disabled,
          styles = _this$props3.styles;
      return (0, _classnames4.default)(styles.day, (_classnames = {}, _defineProperty$8(_classnames, styles.dayPassive, isPassive), _defineProperty$8(_classnames, styles.dayDisabled, disabled), _defineProperty$8(_classnames, styles.dayToday, isToday), _defineProperty$8(_classnames, styles.dayWeekend, isWeekend), _defineProperty$8(_classnames, styles.dayStartOfWeek, isStartOfWeek), _defineProperty$8(_classnames, styles.dayEndOfWeek, isEndOfWeek), _defineProperty$8(_classnames, styles.dayStartOfMonth, isStartOfMonth), _defineProperty$8(_classnames, styles.dayEndOfMonth, isEndOfMonth), _defineProperty$8(_classnames, styles.dayHovered, _this.state.hover), _defineProperty$8(_classnames, styles.dayActive, _this.state.active), _classnames));
    });

    _defineProperty$8(_assertThisInitialized$7(_this), "renderPreviewPlaceholder", function () {
      var _classnames2;

      var _this$props4 = _this.props,
          preview = _this$props4.preview,
          day = _this$props4.day,
          styles = _this$props4.styles;
      if (!preview) return null;
      var startDate = preview.startDate ? (0, _endOfDay$2.default)(preview.startDate) : null;
      var endDate = preview.endDate ? (0, _startOfDay$2.default)(preview.endDate) : null;
      var isInRange = (!startDate || (0, _isAfter$1.default)(day, startDate)) && (!endDate || (0, _isBefore$2.default)(day, endDate));
      var isStartEdge = !isInRange && (0, _isSameDay$3.default)(day, startDate);
      var isEndEdge = !isInRange && (0, _isSameDay$3.default)(day, endDate);
      return /*#__PURE__*/_react$7.default.createElement("span", {
        className: (0, _classnames4.default)((_classnames2 = {}, _defineProperty$8(_classnames2, styles.dayStartPreview, isStartEdge), _defineProperty$8(_classnames2, styles.dayInPreview, isInRange), _defineProperty$8(_classnames2, styles.dayEndPreview, isEndEdge), _classnames2)),
        style: {
          color: preview.color
        }
      });
    });

    _defineProperty$8(_assertThisInitialized$7(_this), "renderSelectionPlaceholders", function () {
      var _this$props5 = _this.props,
          styles = _this$props5.styles,
          ranges = _this$props5.ranges,
          day = _this$props5.day;

      if (_this.props.displayMode === 'date') {
        var isSelected = (0, _isSameDay$3.default)(_this.props.day, _this.props.date);
        return isSelected ? /*#__PURE__*/_react$7.default.createElement("span", {
          className: styles.selected,
          style: {
            color: _this.props.color
          }
        }) : null;
      }

      var inRanges = ranges.reduce(function (result, range) {
        var startDate = range.startDate;
        var endDate = range.endDate;

        if (startDate && endDate && (0, _isBefore$2.default)(endDate, startDate)) {
          var _ref = [endDate, startDate];
          startDate = _ref[0];
          endDate = _ref[1];
        }

        startDate = startDate ? (0, _endOfDay$2.default)(startDate) : null;
        endDate = endDate ? (0, _startOfDay$2.default)(endDate) : null;
        var isInRange = (!startDate || (0, _isAfter$1.default)(day, startDate)) && (!endDate || (0, _isBefore$2.default)(day, endDate));
        var isStartEdge = !isInRange && (0, _isSameDay$3.default)(day, startDate);
        var isEndEdge = !isInRange && (0, _isSameDay$3.default)(day, endDate);

        if (isInRange || isStartEdge || isEndEdge) {
          return [].concat(_toConsumableArray$1(result), [_objectSpread$6({
            isStartEdge: isStartEdge,
            isEndEdge: isEndEdge,
            isInRange: isInRange
          }, range)]);
        }

        return result;
      }, []);
      return inRanges.map(function (range, i) {
        var _classnames3;

        return /*#__PURE__*/_react$7.default.createElement("span", {
          key: i,
          className: (0, _classnames4.default)((_classnames3 = {}, _defineProperty$8(_classnames3, styles.startEdge, range.isStartEdge), _defineProperty$8(_classnames3, styles.endEdge, range.isEndEdge), _defineProperty$8(_classnames3, styles.inRange, range.isInRange), _classnames3)),
          style: {
            color: range.color || _this.props.color
          }
        });
      });
    });

    _this.state = {
      hover: false,
      active: false
    };
    return _this;
  }

  _createClass$7(DayCell, [{
    key: "render",
    value: function render() {
      var dayContentRenderer = this.props.dayContentRenderer;
      return /*#__PURE__*/_react$7.default.createElement("button", _extends$4({
        type: "button",
        onMouseEnter: this.handleMouseEvent,
        onMouseLeave: this.handleMouseEvent,
        onFocus: this.handleMouseEvent,
        onMouseDown: this.handleMouseEvent,
        onMouseUp: this.handleMouseEvent,
        onBlur: this.handleMouseEvent,
        onPauseCapture: this.handleMouseEvent,
        onKeyDown: this.handleKeyEvent,
        onKeyUp: this.handleKeyEvent,
        className: this.getClassNames(this.props.styles)
      }, this.props.disabled || this.props.isPassive ? {
        tabIndex: -1
      } : {}, {
        style: {
          color: this.props.color
        }
      }), this.renderSelectionPlaceholders(), this.renderPreviewPlaceholder(), /*#__PURE__*/_react$7.default.createElement("span", {
        className: this.props.styles.dayNumber
      }, (dayContentRenderer === null || dayContentRenderer === void 0 ? void 0 : dayContentRenderer(this.props.day)) || /*#__PURE__*/_react$7.default.createElement("span", null, (0, _format$3.default)(this.props.day, this.props.dayDisplayFormat))));
    }
  }]);

  return DayCell;
}(_react$7.Component);

DayCell.defaultProps = {};

var rangeShape = _propTypes$8.default.shape({
  startDate: _propTypes$8.default.object,
  endDate: _propTypes$8.default.object,
  color: _propTypes$8.default.string,
  key: _propTypes$8.default.string,
  autoFocus: _propTypes$8.default.bool,
  disabled: _propTypes$8.default.bool,
  showDateDisplay: _propTypes$8.default.bool
});

DayCell$1.rangeShape = rangeShape;
DayCell.propTypes = {
  day: _propTypes$8.default.object.isRequired,
  dayDisplayFormat: _propTypes$8.default.string,
  date: _propTypes$8.default.object,
  ranges: _propTypes$8.default.arrayOf(rangeShape),
  preview: _propTypes$8.default.shape({
    startDate: _propTypes$8.default.object,
    endDate: _propTypes$8.default.object,
    color: _propTypes$8.default.string
  }),
  onPreviewChange: _propTypes$8.default.func,
  previewColor: _propTypes$8.default.string,
  disabled: _propTypes$8.default.bool,
  isPassive: _propTypes$8.default.bool,
  isToday: _propTypes$8.default.bool,
  isWeekend: _propTypes$8.default.bool,
  isStartOfWeek: _propTypes$8.default.bool,
  isEndOfWeek: _propTypes$8.default.bool,
  isStartOfMonth: _propTypes$8.default.bool,
  isEndOfMonth: _propTypes$8.default.bool,
  color: _propTypes$8.default.string,
  displayMode: _propTypes$8.default.oneOf(['dateRange', 'date']),
  styles: _propTypes$8.default.object,
  onMouseDown: _propTypes$8.default.func,
  onMouseUp: _propTypes$8.default.func,
  onMouseEnter: _propTypes$8.default.func,
  dayContentRenderer: _propTypes$8.default.func
};
var _default$8 = DayCell;
DayCell$1.default = _default$8;

var Month$1 = {};

/**
 * @name eachDayOfInterval
 * @category Interval Helpers
 * @summary Return the array of dates within the specified time interval.
 *
 * @description
 * Return the array of dates within the specified time interval.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The function was renamed from `eachDay` to `eachDayOfInterval`.
 *   This change was made to mirror the use of the word "interval" in standard ISO 8601:2004 terminology:
 *
 *   ```
 *   2.1.3
 *   time interval
 *   part of the time axis limited by two instants
 *   ```
 *
 *   Also, this function now accepts an object with `start` and `end` properties
 *   instead of two arguments as an interval.
 *   This function now throws `RangeError` if the start of the interval is after its end
 *   or if any date in the interval is `Invalid Date`.
 *
 *   ```javascript
 *   // Before v2.0.0
 *
 *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))
 *
 *   // v2.0.0 onward
 *
 *   eachDayOfInterval(
 *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }
 *   )
 *   ```
 *
 * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}
 * @param {Object} [options] - an object with options.
 * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.
 * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.step` must be a number greater than 1
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // Each day between 6 October 2014 and 10 October 2014:
 * const result = eachDayOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 9, 10)
 * })
 * //=> [
 * //   Mon Oct 06 2014 00:00:00,
 * //   Tue Oct 07 2014 00:00:00,
 * //   Wed Oct 08 2014 00:00:00,
 * //   Thu Oct 09 2014 00:00:00,
 * //   Fri Oct 10 2014 00:00:00
 * // ]
 */

function eachDayOfInterval(dirtyInterval, options) {
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`

  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError('Invalid interval');
  }

  var dates = [];
  var currentDate = startDate;
  currentDate.setHours(0, 0, 0, 0);
  var step = options && 'step' in options ? Number(options.step) : 1;
  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');

  while (currentDate.getTime() <= endTime) {
    dates.push(toDate(currentDate));
    currentDate.setDate(currentDate.getDate() + step);
    currentDate.setHours(0, 0, 0, 0);
  }

  return dates;
}

var eachDayOfInterval$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': eachDayOfInterval
});

var require$$23 = /*@__PURE__*/getAugmentedNamespace(eachDayOfInterval$1);

/**
 * @name isWithinInterval
 * @category Interval Helpers
 * @summary Is the given date within the interval?
 *
 * @description
 * Is the given date within the interval? (Including start and end.)
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The function was renamed from `isWithinRange` to `isWithinInterval`.
 *   This change was made to mirror the use of the word "interval" in standard ISO 8601:2004 terminology:
 *
 *   ```
 *   2.1.3
 *   time interval
 *   part of the time axis limited by two instants
 *   ```
 *
 *   Also, this function now accepts an object with `start` and `end` properties
 *   instead of two arguments as an interval.
 *   This function now throws `RangeError` if the start of the interval is after its end
 *   or if any date in the interval is `Invalid Date`.
 *
 *   ```javascript
 *   // Before v2.0.0
 *
 *   isWithinRange(
 *     new Date(2014, 0, 3),
 *     new Date(2014, 0, 1), new Date(2014, 0, 7)
 *   )
 *
 *   // v2.0.0 onward
 *
 *   isWithinInterval(
 *     new Date(2014, 0, 3),
 *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }
 *   )
 *   ```
 *
 * @param {Date|Number} date - the date to check
 * @param {Interval} interval - the interval to check
 * @returns {Boolean} the date is within the interval
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // For the date within the interval:
 * isWithinInterval(new Date(2014, 0, 3), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> true
 *
 * @example
 * // For the date outside of the interval:
 * isWithinInterval(new Date(2014, 0, 10), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> false
 *
 * @example
 * // For date equal to interval start:
 * isWithinInterval(date, { start, end: date }) // => true
 *
 * @example
 * // For date equal to interval end:
 * isWithinInterval(date, { start: date, end }) // => true
 */

function isWithinInterval(dirtyDate, interval) {
  requiredArgs(2, arguments);
  var time = toDate(dirtyDate).getTime();
  var startTime = toDate(interval.start).getTime();
  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`

  if (!(startTime <= endTime)) {
    throw new RangeError('Invalid interval');
  }

  return time >= startTime && time <= endTime;
}

var isWithinInterval$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': isWithinInterval
});

var require$$6$1 = /*@__PURE__*/getAugmentedNamespace(isWithinInterval$1);

/**
 * @name isWeekend
 * @category Weekday Helpers
 * @summary Does the given date fall on a weekend?
 *
 * @description
 * Does the given date fall on a weekend?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to check
 * @returns {Boolean} the date falls on a weekend
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Does 5 October 2014 fall on a weekend?
 * const result = isWeekend(new Date(2014, 9, 5))
 * //=> true
 */

function isWeekend(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day === 0 || day === 6;
}

var isWeekend$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': isWeekend
});

var require$$5$3 = /*@__PURE__*/getAugmentedNamespace(isWeekend$1);

/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the end of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */

function endOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}

var endOfWeek$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': endOfWeek
});

var require$$2 = /*@__PURE__*/getAugmentedNamespace(endOfWeek$1);

/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

var startOfWeek$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': startOfWeek
});

var require$$3$1 = /*@__PURE__*/getAugmentedNamespace(startOfWeek$1);

var utils = {};

/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} - the new date with the days added
 * @throws {TypeError} - 2 arguments required
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */

function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);

  if (isNaN(amount)) {
    return new Date(NaN);
  }

  if (!amount) {
    // If 0 days, no-op to avoid changing times in the hour before end of DST
    return date;
  }

  date.setDate(date.getDate() + amount);
  return date;
}

var addDays$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': addDays
});

var require$$9 = /*@__PURE__*/getAugmentedNamespace(addDays$1);

/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */

function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}

var differenceInCalendarMonths$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': differenceInCalendarMonths
});

var require$$16 = /*@__PURE__*/getAugmentedNamespace(differenceInCalendarMonths$1);

var MILLISECONDS_IN_DAY = 86400000;
/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar days
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */

function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer
  // because the number of milliseconds in a day is not constant
  // (e.g. it's different in the day of the daylight saving time clock shift)

  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}

var differenceInCalendarDays$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': differenceInCalendarDays
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(differenceInCalendarDays$1);

/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */

function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

var endOfMonth$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': endOfMonth
});

var require$$5$2 = /*@__PURE__*/getAugmentedNamespace(endOfMonth$1);

/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}

var startOfMonth$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': startOfMonth
});

var require$$6 = /*@__PURE__*/getAugmentedNamespace(startOfMonth$1);

Object.defineProperty(utils, "__esModule", {
  value: true
});
utils.calcFocusDate = calcFocusDate;
utils.findNextRangeIndex = findNextRangeIndex;
utils.getMonthDisplayRange = getMonthDisplayRange;
utils.generateStyles = generateStyles;

var _classnames$4 = _interopRequireDefault$9(classnames.exports);

var _addDays$3 = _interopRequireDefault$9(require$$9);

var _differenceInCalendarMonths$1 = _interopRequireDefault$9(require$$16);

var _differenceInCalendarDays$2 = _interopRequireDefault$9(require$$0);

var _endOfWeek$3 = _interopRequireDefault$9(require$$2);

var _startOfWeek$3 = _interopRequireDefault$9(require$$3$1);

var _endOfMonth$2 = _interopRequireDefault$9(require$$5$2);

var _startOfMonth$2 = _interopRequireDefault$9(require$$6);

function _interopRequireDefault$9(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function calcFocusDate(currentFocusedDate, props) {
  var shownDate = props.shownDate,
      date = props.date,
      months = props.months,
      ranges = props.ranges,
      focusedRange = props.focusedRange,
      displayMode = props.displayMode; // find primary date according the props

  var targetInterval;

  if (displayMode === 'dateRange') {
    var range = ranges[focusedRange[0]] || {};
    targetInterval = {
      start: range.startDate,
      end: range.endDate
    };
  } else {
    targetInterval = {
      start: date,
      end: date
    };
  }

  targetInterval.start = (0, _startOfMonth$2.default)(targetInterval.start || new Date());
  targetInterval.end = (0, _endOfMonth$2.default)(targetInterval.end || targetInterval.start);
  var targetDate = targetInterval.start || targetInterval.end || shownDate || new Date(); // initial focus

  if (!currentFocusedDate) return shownDate || targetDate; // // just return targetDate for native scrolled calendars
  // if (props.scroll.enabled) return targetDate;

  if ((0, _differenceInCalendarMonths$1.default)(targetInterval.start, targetInterval.end) > months) {
    // don't change focused if new selection in view area
    return currentFocusedDate;
  }

  return targetDate;
}

function findNextRangeIndex(ranges) {
  var currentRangeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
  var nextIndex = ranges.findIndex(function (range, i) {
    return i > currentRangeIndex && range.autoFocus !== false && !range.disabled;
  });
  if (nextIndex !== -1) return nextIndex;
  return ranges.findIndex(function (range) {
    return range.autoFocus !== false && !range.disabled;
  });
}

function getMonthDisplayRange(date, dateOptions, fixedHeight) {
  var startDateOfMonth = (0, _startOfMonth$2.default)(date, dateOptions);
  var endDateOfMonth = (0, _endOfMonth$2.default)(date, dateOptions);
  var startDateOfCalendar = (0, _startOfWeek$3.default)(startDateOfMonth, dateOptions);
  var endDateOfCalendar = (0, _endOfWeek$3.default)(endDateOfMonth, dateOptions);

  if (fixedHeight && (0, _differenceInCalendarDays$2.default)(endDateOfCalendar, startDateOfCalendar) <= 34) {
    endDateOfCalendar = (0, _addDays$3.default)(endDateOfCalendar, 7);
  }

  return {
    start: startDateOfCalendar,
    end: endDateOfCalendar,
    startDateOfMonth: startDateOfMonth,
    endDateOfMonth: endDateOfMonth
  };
}

function generateStyles(sources) {
  if (!sources.length) return {};
  var generatedStyles = sources.filter(function (source) {
    return Boolean(source);
  }).reduce(function (styles, styleSource) {
    Object.keys(styleSource).forEach(function (key) {
      styles[key] = (0, _classnames$4.default)(styles[key], styleSource[key]);
    });
    return styles;
  }, {});
  return generatedStyles;
}

function _typeof$6(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$6 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$6 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$6(obj);
}

Object.defineProperty(Month$1, "__esModule", {
  value: true
});
Month$1.default = void 0;

var _react$6 = _interopRequireWildcard$6(react.exports);

var _propTypes$7 = _interopRequireDefault$8(propTypes.exports);

var _DayCell$3 = _interopRequireWildcard$6(DayCell$1);

var _eachDayOfInterval$1 = _interopRequireDefault$8(require$$23);

var _isWithinInterval$1 = _interopRequireDefault$8(require$$6$1);

var _isWeekend = _interopRequireDefault$8(require$$5$3);

var _isAfter = _interopRequireDefault$8(require$$6$2);

var _isSameDay$2 = _interopRequireDefault$8(require$$1);

var _isBefore$1 = _interopRequireDefault$8(require$$10);

var _endOfWeek$2 = _interopRequireDefault$8(require$$2);

var _startOfWeek$2 = _interopRequireDefault$8(require$$3$1);

var _endOfDay$1 = _interopRequireDefault$8(require$$8$1);

var _startOfDay$1 = _interopRequireDefault$8(require$$7$1);

var _format$2 = _interopRequireDefault$8(require$$24);

var _utils$3 = utils;

function _interopRequireDefault$8(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache$6(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache$6 = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard$6(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof$6(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache$6(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends$3() {
  _extends$3 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$3.apply(this, arguments);
}

function ownKeys$5(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread$5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$5(Object(source), true).forEach(function (key) {
        _defineProperty$7(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$5(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty$7(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck$6(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$6(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$6(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$6(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$6(Constructor, staticProps);
  return Constructor;
}

function _inherits$6(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf$6(subClass, superClass);
}

function _setPrototypeOf$6(o, p) {
  _setPrototypeOf$6 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$6(o, p);
}

function _createSuper$6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$6();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf$6(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$6(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn$6(this, result);
  };
}

function _possibleConstructorReturn$6(self, call) {
  if (call && (_typeof$6(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized$6(self);
}

function _assertThisInitialized$6(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct$6() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf$6(o) {
  _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$6(o);
}

function renderWeekdays(styles, dateOptions, weekdayDisplayFormat) {
  var now = new Date();
  return /*#__PURE__*/_react$6.default.createElement("div", {
    className: styles.weekDays
  }, (0, _eachDayOfInterval$1.default)({
    start: (0, _startOfWeek$2.default)(now, dateOptions),
    end: (0, _endOfWeek$2.default)(now, dateOptions)
  }).map(function (day, i) {
    return /*#__PURE__*/_react$6.default.createElement("span", {
      className: styles.weekDay,
      key: i
    }, (0, _format$2.default)(day, weekdayDisplayFormat, dateOptions));
  }));
}

var Month = /*#__PURE__*/function (_PureComponent) {
  _inherits$6(Month, _PureComponent);

  var _super = _createSuper$6(Month);

  function Month() {
    _classCallCheck$6(this, Month);

    return _super.apply(this, arguments);
  }

  _createClass$6(Month, [{
    key: "render",
    value: function render() {
      var _this = this;

      var now = new Date();
      var _this$props = this.props,
          displayMode = _this$props.displayMode,
          focusedRange = _this$props.focusedRange,
          drag = _this$props.drag,
          styles = _this$props.styles,
          disabledDates = _this$props.disabledDates,
          disabledDay = _this$props.disabledDay;
      var minDate = this.props.minDate && (0, _startOfDay$1.default)(this.props.minDate);
      var maxDate = this.props.maxDate && (0, _endOfDay$1.default)(this.props.maxDate);
      var monthDisplay = (0, _utils$3.getMonthDisplayRange)(this.props.month, this.props.dateOptions, this.props.fixedHeight);
      var ranges = this.props.ranges;

      if (displayMode === 'dateRange' && drag.status) {
        var _drag$range = drag.range,
            startDate = _drag$range.startDate,
            endDate = _drag$range.endDate;
        ranges = ranges.map(function (range, i) {
          if (i !== focusedRange[0]) return range;
          return _objectSpread$5(_objectSpread$5({}, range), {}, {
            startDate: startDate,
            endDate: endDate
          });
        });
      }

      var showPreview = this.props.showPreview && !drag.disablePreview;
      return /*#__PURE__*/_react$6.default.createElement("div", {
        className: styles.month,
        style: this.props.style
      }, this.props.showMonthName ? /*#__PURE__*/_react$6.default.createElement("div", {
        className: styles.monthName
      }, (0, _format$2.default)(this.props.month, this.props.monthDisplayFormat, this.props.dateOptions)) : null, this.props.showWeekDays && renderWeekdays(styles, this.props.dateOptions, this.props.weekdayDisplayFormat), /*#__PURE__*/_react$6.default.createElement("div", {
        className: styles.days,
        onMouseLeave: this.props.onMouseLeave
      }, (0, _eachDayOfInterval$1.default)({
        start: monthDisplay.start,
        end: monthDisplay.end
      }).map(function (day, index) {
        var isStartOfMonth = (0, _isSameDay$2.default)(day, monthDisplay.startDateOfMonth);
        var isEndOfMonth = (0, _isSameDay$2.default)(day, monthDisplay.endDateOfMonth);
        var isOutsideMinMax = minDate && (0, _isBefore$1.default)(day, minDate) || maxDate && (0, _isAfter.default)(day, maxDate);
        var isDisabledSpecifically = disabledDates.some(function (disabledDate) {
          return (0, _isSameDay$2.default)(disabledDate, day);
        });
        var isDisabledDay = disabledDay(day);
        return /*#__PURE__*/_react$6.default.createElement(_DayCell$3.default, _extends$3({}, _this.props, {
          ranges: ranges,
          day: day,
          preview: showPreview ? _this.props.preview : null,
          isWeekend: (0, _isWeekend.default)(day, _this.props.dateOptions),
          isToday: (0, _isSameDay$2.default)(day, now),
          isStartOfWeek: (0, _isSameDay$2.default)(day, (0, _startOfWeek$2.default)(day, _this.props.dateOptions)),
          isEndOfWeek: (0, _isSameDay$2.default)(day, (0, _endOfWeek$2.default)(day, _this.props.dateOptions)),
          isStartOfMonth: isStartOfMonth,
          isEndOfMonth: isEndOfMonth,
          key: index,
          disabled: isOutsideMinMax || isDisabledSpecifically || isDisabledDay,
          isPassive: !(0, _isWithinInterval$1.default)(day, {
            start: monthDisplay.startDateOfMonth,
            end: monthDisplay.endDateOfMonth
          }),
          styles: styles,
          onMouseDown: _this.props.onDragSelectionStart,
          onMouseUp: _this.props.onDragSelectionEnd,
          onMouseEnter: _this.props.onDragSelectionMove,
          dragRange: drag.range,
          drag: drag.status
        }));
      })));
    }
  }]);

  return Month;
}(_react$6.PureComponent);

Month.defaultProps = {};
Month.propTypes = {
  style: _propTypes$7.default.object,
  styles: _propTypes$7.default.object,
  month: _propTypes$7.default.object,
  drag: _propTypes$7.default.object,
  dateOptions: _propTypes$7.default.object,
  disabledDates: _propTypes$7.default.array,
  disabledDay: _propTypes$7.default.func,
  preview: _propTypes$7.default.shape({
    startDate: _propTypes$7.default.object,
    endDate: _propTypes$7.default.object
  }),
  showPreview: _propTypes$7.default.bool,
  displayMode: _propTypes$7.default.oneOf(['dateRange', 'date']),
  minDate: _propTypes$7.default.object,
  maxDate: _propTypes$7.default.object,
  ranges: _propTypes$7.default.arrayOf(_DayCell$3.rangeShape),
  focusedRange: _propTypes$7.default.arrayOf(_propTypes$7.default.number),
  onDragSelectionStart: _propTypes$7.default.func,
  onDragSelectionEnd: _propTypes$7.default.func,
  onDragSelectionMove: _propTypes$7.default.func,
  onMouseLeave: _propTypes$7.default.func,
  monthDisplayFormat: _propTypes$7.default.string,
  weekdayDisplayFormat: _propTypes$7.default.string,
  dayDisplayFormat: _propTypes$7.default.string,
  showWeekDays: _propTypes$7.default.bool,
  showMonthName: _propTypes$7.default.bool,
  fixedHeight: _propTypes$7.default.bool
};
var _default$7 = Month;
Month$1.default = _default$7;

var DateInput$1 = {};

/**
 * @name isEqual
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to compare
 * @param {Date|Number} dateRight - the second date to compare
 * @returns {Boolean} the dates are equal
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * var result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0),
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */

function isEqual(dirtyLeftDate, dirtyRightDate) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyLeftDate);
  var dateRight = toDate(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime();
}

var isEqual$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': isEqual
});

var require$$3 = /*@__PURE__*/getAugmentedNamespace(isEqual$1);

var require$$4$1 = /*@__PURE__*/getAugmentedNamespace(isValid$1);

function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError('assign requires that input parameter not be null or undefined');
  }

  dirtyObject = dirtyObject || {};

  for (var property in dirtyObject) {
    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
      target[property] = dirtyObject[property];
    }
  }

  return target;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
  requiredArgs(2, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);

  if (day % 7 === 0) {
    day = day - 7;
  }

  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

var MILLISECONDS_IN_HOUR = 3600000;
var MILLISECONDS_IN_MINUTE = 60000;
var MILLISECONDS_IN_SECOND = 1000;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999

};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

function parseNumericPattern(pattern, string, valueCallback) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  }

  var value = parseInt(matchResult[0], 10);
  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length)
  };
}

function parseTimezonePattern(pattern, string) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  } // Input is 'Z'


  if (matchResult[0] === 'Z') {
    return {
      value: 0,
      rest: string.slice(1)
    };
  }

  var sign = matchResult[1] === '+' ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
    rest: string.slice(matchResult[0].length)
  };
}

function parseAnyDigitsSigned(string, valueCallback) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
}

function parseNDigits(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);

    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);

    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);

    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);

    default:
      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), string, valueCallback);
  }
}

function parseNDigitsSigned(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);

    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);

    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);

    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);

    default:
      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), string, valueCallback);
  }
}

function dayPeriodEnumToHours(enumValue) {
  switch (enumValue) {
    case 'morning':
      return 4;

    case 'evening':
      return 17;

    case 'pm':
    case 'noon':
    case 'afternoon':
      return 12;

    case 'am':
    case 'midnight':
    case 'night':
    default:
      return 0;
  }
}

function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0; // Absolute number of the current year:
  // 1 -> 1 AC
  // 0 -> 1 BC
  // -1 -> 2 BC

  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;

  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }

  return isCommonEra ? result : 1 - result;
}

var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation

function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */


var parsers = {
  // Era
  G: {
    priority: 140,
    parse: function (string, token, match, _options) {
      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return match.era(string, {
            width: 'abbreviated'
          }) || match.era(string, {
            width: 'narrow'
          });
        // A, B

        case 'GGGGG':
          return match.era(string, {
            width: 'narrow'
          });
        // Anno Domini, Before Christ

        case 'GGGG':
        default:
          return match.era(string, {
            width: 'wide'
          }) || match.era(string, {
            width: 'abbreviated'
          }) || match.era(string, {
            width: 'narrow'
          });
      }
    },
    set: function (date, flags, value, _options) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['R', 'u', 't', 'T']
  },
  // Year
  y: {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    priority: 130,
    parse: function (string, token, match, _options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'yy'
        };
      };

      switch (token) {
        case 'y':
          return parseNDigits(4, string, valueCallback);

        case 'yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function (_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function (date, flags, value, _options) {
      var currentYear = date.getUTCFullYear();

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }

      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']
  },
  // Local week-numbering year
  Y: {
    priority: 130,
    parse: function (string, token, match, _options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'YY'
        };
      };

      switch (token) {
        case 'Y':
          return parseNDigits(4, string, valueCallback);

        case 'Yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function (_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function (date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }

      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    },
    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
  },
  // ISO week-numbering year
  R: {
    priority: 130,
    parse: function (string, token, _match, _options) {
      if (token === 'R') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function (_date, _flags, value, _options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    },
    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
  },
  // Extended year
  u: {
    priority: 130,
    parse: function (string, token, _match, _options) {
      if (token === 'u') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function (date, _flags, value, _options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']
  },
  // Quarter
  Q: {
    priority: 120,
    parse: function (string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
        case 'QQ':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'Qo':
          return match.ordinalNumber(string, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'QQQ':
          return match.quarter(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'QQQQQ':
          return match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1st quarter, 2nd quarter, ...

        case 'QQQQ':
        default:
          return match.quarter(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Stand-alone quarter
  q: {
    priority: 120,
    parse: function (string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'q':
        case 'qq':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'qo':
          return match.ordinalNumber(string, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'qqq':
          return match.quarter(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'qqqqq':
          return match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1st quarter, 2nd quarter, ...

        case 'qqqq':
        default:
          return match.quarter(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Month
  M: {
    priority: 110,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'M':
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        // 01, 02, ..., 12

        case 'MM':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Mo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback
          });
        // Jan, Feb, ..., Dec

        case 'MMM':
          return match.month(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // J, F, ..., D

        case 'MMMMM':
          return match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // January, February, ..., December

        case 'MMMM':
        default:
          return match.month(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.month(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Stand-alone month
  L: {
    priority: 110,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        // 01, 02, ..., 12

        case 'LL':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Lo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback
          });
        // Jan, Feb, ..., Dec

        case 'LLL':
          return match.month(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // J, F, ..., D

        case 'LLLLL':
          return match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // January, February, ..., December

        case 'LLLL':
        default:
          return match.month(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.month(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Local week of year
  w: {
    priority: 100,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'w':
          return parseNumericPattern(numericPatterns.week, string);

        case 'wo':
          return match.ordinalNumber(string, {
            unit: 'week'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function (date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
  },
  // ISO week of year
  I: {
    priority: 100,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'I':
          return parseNumericPattern(numericPatterns.week, string);

        case 'Io':
          return match.ordinalNumber(string, {
            unit: 'week'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function (date, _flags, value, options) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);
    },
    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
  },
  // Day of the month
  d: {
    priority: 90,
    subPriority: 1,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'd':
          return parseNumericPattern(numericPatterns.date, string);

        case 'do':
          return match.ordinalNumber(string, {
            unit: 'date'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();

      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Day of year
  D: {
    priority: 90,
    subPriority: 1,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'D':
        case 'DD':
          return parseNumericPattern(numericPatterns.dayOfYear, string);

        case 'Do':
          return match.ordinalNumber(string, {
            unit: 'date'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);

      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']
  },
  // Day of week
  E: {
    priority: 90,
    parse: function (string, token, match, _options) {
      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // T

        case 'EEEEE':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'EEEEEE':
          return match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday

        case 'EEEE':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']
  },
  // Local day of week
  e: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'e':
        case 'ee':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'eo':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback
          });
        // Tue

        case 'eee':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // T

        case 'eeeee':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'eeeeee':
          return match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday

        case 'eeee':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']
  },
  // Stand-alone local day of week
  c: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'c':
        case 'cc':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'co':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback
          });
        // Tue

        case 'ccc':
          return match.day(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // T

        case 'ccccc':
          return match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tu

        case 'cccccc':
          return match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tuesday

        case 'cccc':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']
  },
  // ISO day of week
  i: {
    priority: 90,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        if (value === 0) {
          return 7;
        }

        return value;
      };

      switch (token) {
        // 2
        case 'i':
        case 'ii':
          // 02
          return parseNDigits(token.length, string);
        // 2nd

        case 'io':
          return match.ordinalNumber(string, {
            unit: 'day'
          });
        // Tue

        case 'iii':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // T

        case 'iiiii':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // Tu

        case 'iiiiii':
          return match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // Tuesday

        case 'iiii':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 7;
    },
    set: function (date, _flags, value, options) {
      date = setUTCISODay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']
  },
  // AM or PM
  a: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaaa':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaa':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']
  },
  // AM, PM, midnight
  b: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbbb':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbb':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']
  },
  // in the morning, in the afternoon, in the evening, at night
  B: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBBB':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBB':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 't', 'T']
  },
  // Hour [1-12]
  h: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'h':
          return parseNumericPattern(numericPatterns.hour12h, string);

        case 'ho':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 12;
    },
    set: function (date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['H', 'K', 'k', 't', 'T']
  },
  // Hour [0-23]
  H: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'H':
          return parseNumericPattern(numericPatterns.hour23h, string);

        case 'Ho':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 23;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']
  },
  // Hour [0-11]
  K: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'K':
          return parseNumericPattern(numericPatterns.hour11h, string);

        case 'Ko':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['h', 'H', 'k', 't', 'T']
  },
  // Hour [1-24]
  k: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'k':
          return parseNumericPattern(numericPatterns.hour24h, string);

        case 'ko':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 24;
    },
    set: function (date, _flags, value, _options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']
  },
  // Minute
  m: {
    priority: 60,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'm':
          return parseNumericPattern(numericPatterns.minute, string);

        case 'mo':
          return match.ordinalNumber(string, {
            unit: 'minute'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Second
  s: {
    priority: 50,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 's':
          return parseNumericPattern(numericPatterns.second, string);

        case 'so':
          return match.ordinalNumber(string, {
            unit: 'second'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCSeconds(value, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Fraction of second
  S: {
    priority: 30,
    parse: function (string, token, _match, _options) {
      var valueCallback = function (value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };

      return parseNDigits(token.length, string, valueCallback);
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMilliseconds(value);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Timezone (ISO-8601. +00:00 is `'Z'`)
  X: {
    priority: 10,
    parse: function (string, token, _match, _options) {
      switch (token) {
        case 'X':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);

        case 'XX':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'XXXX':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);

        case 'XXXXX':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);

        case 'XXX':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function (date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'x']
  },
  // Timezone (ISO-8601)
  x: {
    priority: 10,
    parse: function (string, token, _match, _options) {
      switch (token) {
        case 'x':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);

        case 'xx':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'xxxx':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);

        case 'xxxxx':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);

        case 'xxx':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function (date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'X']
  },
  // Seconds timestamp
  t: {
    priority: 40,
    parse: function (string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function (_date, _flags, value, _options) {
      return [new Date(value * 1000), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: '*'
  },
  // Milliseconds timestamp
  T: {
    priority: 20,
    parse: function (string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function (_date, _flags, value, _options) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: '*'
  }
};
var parsers$1 = parsers;

var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Old `parse` was renamed to `toDate`.
 *   Now `parse` is a new function which parses a string using a provided format.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   parse('2016-01-01')
 *
 *   // v2.0.0 onward (toDate no longer accepts a string)
 *   toDate(1392098430000) // Unix to timestamp
 *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date
 *   parse('2016-01-01', 'yyyy-MM-dd', new Date())
 *   ```
 *
 * @param {String} dateString - the string to parse
 * @param {String} formatString - the string of tokens
 * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {Date} the parsed date
 * @throws {TypeError} 3 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.locale` must contain `match` property
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */

function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options = dirtyOptions || {};
  var locale = options.locale || enUS;

  if (!locale.match) {
    throw new RangeError('locale must contain match property');
  }

  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (formatString === '') {
    if (dateString === '') {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }

  var subFnOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale
  }; // If timezone isn't specified, it will be set to the system timezone

  var setters = [{
    priority: TIMEZONE_UNIT_PRIORITY,
    subPriority: -1,
    set: dateToSystemTimezone,
    index: 0
  }];
  var i;
  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring, locale.formatLong, subFnOptions);
    }

    return substring;
  }).join('').match(formattingTokensRegExp);
  var usedTokens = [];

  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }

    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }

    var firstCharacter = token[0];
    var parser = parsers$1[firstCharacter];

    if (parser) {
      var incompatibleTokens = parser.incompatibleTokens;

      if (Array.isArray(incompatibleTokens)) {
        var incompatibleToken = void 0;

        for (var _i = 0; _i < usedTokens.length; _i++) {
          var usedToken = usedTokens[_i].token;

          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
            incompatibleToken = usedTokens[_i];
            break;
          }
        }

        if (incompatibleToken) {
          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
        }
      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {
        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
      }

      usedTokens.push({
        token: firstCharacter,
        fullToken: token
      });
      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);

      if (!parseResult) {
        return new Date(NaN);
      }

      setters.push({
        priority: parser.priority,
        subPriority: parser.subPriority || 0,
        set: parser.set,
        validate: parser.validate,
        value: parseResult.value,
        index: setters.length
      });
      dateString = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
      } // Replace two single quote characters with one single quote character


      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString(token);
      } // Cut token from string, or, if string doesn't match the token, return Invalid Date


      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN);
      }
    }
  } // Check if the remaining input contains something other than whitespace


  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }

  var uniquePrioritySetters = setters.map(function (setter) {
    return setter.priority;
  }).sort(function (a, b) {
    return b - a;
  }).filter(function (priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function (priority) {
    return setters.filter(function (setter) {
      return setter.priority === priority;
    }).sort(function (a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function (setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);

  if (isNaN(date)) {
    return new Date(NaN);
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37


  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};

  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];

    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
      return new Date(NaN);
    }

    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)

    if (result[0]) {
      utcDate = result[0];
      assign(flags, result[1]); // Result is date
    } else {
      utcDate = result;
    }
  }

  return utcDate;
}

function dateToSystemTimezone(date, flags) {
  if (flags.timestampIsSet) {
    return date;
  }

  var convertedDate = new Date(0);
  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
  return convertedDate;
}

function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

var parse$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': parse
});

var require$$5$1 = /*@__PURE__*/getAugmentedNamespace(parse$1);

function _typeof$5(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$5 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$5 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$5(obj);
}

Object.defineProperty(DateInput$1, "__esModule", {
  value: true
});
DateInput$1.default = void 0;

var _react$5 = _interopRequireWildcard$5(react.exports);

var _propTypes$6 = _interopRequireDefault$7(propTypes.exports);

var _classnames$3 = _interopRequireDefault$7(classnames.exports);

var _isEqual = _interopRequireDefault$7(require$$3);

var _isValid = _interopRequireDefault$7(require$$4$1);

var _parse = _interopRequireDefault$7(require$$5$1);

var _format$1 = _interopRequireDefault$7(require$$24);

function _interopRequireDefault$7(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache$5(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache$5 = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard$5(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof$5(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache$5(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _classCallCheck$5(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$5(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$5(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$5(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$5(Constructor, staticProps);
  return Constructor;
}

function _inherits$5(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf$5(subClass, superClass);
}

function _setPrototypeOf$5(o, p) {
  _setPrototypeOf$5 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$5(o, p);
}

function _createSuper$5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$5();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf$5(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$5(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn$5(this, result);
  };
}

function _possibleConstructorReturn$5(self, call) {
  if (call && (_typeof$5(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized$5(self);
}

function _assertThisInitialized$5(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct$5() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf$5(o) {
  _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$5(o);
}

function _defineProperty$6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var DateInput = /*#__PURE__*/function (_PureComponent) {
  _inherits$5(DateInput, _PureComponent);

  var _super = _createSuper$5(DateInput);

  function DateInput(props, context) {
    var _this;

    _classCallCheck$5(this, DateInput);

    _this = _super.call(this, props, context);

    _defineProperty$6(_assertThisInitialized$5(_this), "onKeyDown", function (e) {
      var value = _this.state.value;

      if (e.key === 'Enter') {
        _this.update(value);
      }
    });

    _defineProperty$6(_assertThisInitialized$5(_this), "onChange", function (e) {
      _this.setState({
        value: e.target.value,
        changed: true,
        invalid: false
      });
    });

    _defineProperty$6(_assertThisInitialized$5(_this), "onBlur", function () {
      var value = _this.state.value;

      _this.update(value);
    });

    _this.state = {
      invalid: false,
      changed: false,
      value: _this.formatDate(props)
    };
    return _this;
  }

  _createClass$5(DateInput, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var value = prevProps.value;

      if (!(0, _isEqual.default)(value, this.props.value)) {
        this.setState({
          value: this.formatDate(this.props)
        });
      }
    }
  }, {
    key: "formatDate",
    value: function formatDate(_ref) {
      var value = _ref.value,
          dateDisplayFormat = _ref.dateDisplayFormat,
          dateOptions = _ref.dateOptions;

      if (value && (0, _isValid.default)(value)) {
        return (0, _format$1.default)(value, dateDisplayFormat, dateOptions);
      }

      return '';
    }
  }, {
    key: "update",
    value: function update(value) {
      var _this$state = this.state,
          invalid = _this$state.invalid,
          changed = _this$state.changed;

      if (invalid || !changed || !value) {
        return;
      }

      var _this$props = this.props,
          onChange = _this$props.onChange,
          dateDisplayFormat = _this$props.dateDisplayFormat,
          dateOptions = _this$props.dateOptions;
      var parsed = (0, _parse.default)(value, dateDisplayFormat, new Date(), dateOptions);

      if ((0, _isValid.default)(parsed)) {
        this.setState({
          changed: false
        }, function () {
          return onChange(parsed);
        });
      } else {
        this.setState({
          invalid: true
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          readOnly = _this$props2.readOnly,
          placeholder = _this$props2.placeholder,
          ariaLabel = _this$props2.ariaLabel,
          disabled = _this$props2.disabled,
          onFocus = _this$props2.onFocus;
      var _this$state2 = this.state,
          value = _this$state2.value,
          invalid = _this$state2.invalid;
      return /*#__PURE__*/_react$5.default.createElement("span", {
        className: (0, _classnames$3.default)('rdrDateInput', className)
      }, /*#__PURE__*/_react$5.default.createElement("input", {
        readOnly: readOnly,
        disabled: disabled,
        value: value,
        placeholder: placeholder,
        "aria-label": ariaLabel,
        onKeyDown: this.onKeyDown,
        onChange: this.onChange,
        onBlur: this.onBlur,
        onFocus: onFocus
      }), invalid && /*#__PURE__*/_react$5.default.createElement("span", {
        className: "rdrWarning"
      }, "\u26A0"));
    }
  }]);

  return DateInput;
}(_react$5.PureComponent);

DateInput.propTypes = {
  value: _propTypes$6.default.object,
  placeholder: _propTypes$6.default.string,
  disabled: _propTypes$6.default.bool,
  readOnly: _propTypes$6.default.bool,
  dateOptions: _propTypes$6.default.object,
  dateDisplayFormat: _propTypes$6.default.string,
  ariaLabel: _propTypes$6.default.string,
  className: _propTypes$6.default.string,
  onFocus: _propTypes$6.default.func.isRequired,
  onChange: _propTypes$6.default.func.isRequired
};
DateInput.defaultProps = {
  readOnly: true,
  disabled: false,
  dateDisplayFormat: 'MMM D, YYYY'
};
var _default$6 = DateInput;
DateInput$1.default = _default$6;

var reactList = {exports: {}};

(function (module, exports) {
	(function (global, factory) {
	  {
	    factory(propTypes.exports, react.exports);
	  }
	})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : commonjsGlobal$1, function (_propTypes, _react) {

	  _propTypes = _interopRequireDefault(_propTypes);
	  _react = _interopRequireWildcard(_react);

	  var _class, _temp;

	  function _getRequireWildcardCache() {
	    if (typeof WeakMap !== "function") return null;
	    var cache = new WeakMap();

	    _getRequireWildcardCache = function _getRequireWildcardCache() {
	      return cache;
	    };

	    return cache;
	  }

	  function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	      return obj;
	    }

	    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
	      return {
	        "default": obj
	      };
	    }

	    var cache = _getRequireWildcardCache();

	    if (cache && cache.has(obj)) {
	      return cache.get(obj);
	    }

	    var newObj = {};
	    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

	        if (desc && (desc.get || desc.set)) {
	          Object.defineProperty(newObj, key, desc);
	        } else {
	          newObj[key] = obj[key];
	        }
	      }
	    }

	    newObj["default"] = obj;

	    if (cache) {
	      cache.set(obj, newObj);
	    }

	    return newObj;
	  }

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  }

	  function _typeof(obj) {
	    "@babel/helpers - typeof";

	    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	      _typeof = function _typeof(obj) {
	        return typeof obj;
	      };
	    } else {
	      _typeof = function _typeof(obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	      };
	    }

	    return _typeof(obj);
	  }

	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }

	  function _defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  function _createClass(Constructor, protoProps, staticProps) {
	    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) _defineProperties(Constructor, staticProps);
	    return Constructor;
	  }

	  function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        writable: true,
	        configurable: true
	      }
	    });
	    if (superClass) _setPrototypeOf(subClass, superClass);
	  }

	  function _setPrototypeOf(o, p) {
	    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	      o.__proto__ = p;
	      return o;
	    };

	    return _setPrototypeOf(o, p);
	  }

	  function _createSuper(Derived) {
	    var hasNativeReflectConstruct = _isNativeReflectConstruct();

	    return function _createSuperInternal() {
	      var Super = _getPrototypeOf(Derived),
	          result;

	      if (hasNativeReflectConstruct) {
	        var NewTarget = _getPrototypeOf(this).constructor;

	        result = Reflect.construct(Super, arguments, NewTarget);
	      } else {
	        result = Super.apply(this, arguments);
	      }

	      return _possibleConstructorReturn(this, result);
	    };
	  }

	  function _possibleConstructorReturn(self, call) {
	    if (call && (_typeof(call) === "object" || typeof call === "function")) {
	      return call;
	    }

	    return _assertThisInitialized(self);
	  }

	  function _assertThisInitialized(self) {
	    if (self === void 0) {
	      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }

	    return self;
	  }

	  function _isNativeReflectConstruct() {
	    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	    if (Reflect.construct.sham) return false;
	    if (typeof Proxy === "function") return true;

	    try {
	      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  function _getPrototypeOf(o) {
	    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	      return o.__proto__ || Object.getPrototypeOf(o);
	    };
	    return _getPrototypeOf(o);
	  }

	  function ownKeys(object, enumerableOnly) {
	    var keys = Object.keys(object);

	    if (Object.getOwnPropertySymbols) {
	      var symbols = Object.getOwnPropertySymbols(object);
	      if (enumerableOnly) symbols = symbols.filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	      });
	      keys.push.apply(keys, symbols);
	    }

	    return keys;
	  }

	  function _objectSpread(target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i] != null ? arguments[i] : {};

	      if (i % 2) {
	        ownKeys(Object(source), true).forEach(function (key) {
	          _defineProperty(target, key, source[key]);
	        });
	      } else if (Object.getOwnPropertyDescriptors) {
	        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	      } else {
	        ownKeys(Object(source)).forEach(function (key) {
	          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	        });
	      }
	    }

	    return target;
	  }

	  function _defineProperty(obj, key, value) {
	    if (key in obj) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	    } else {
	      obj[key] = value;
	    }

	    return obj;
	  }

	  var CLIENT_SIZE_KEYS = {
	    x: 'clientWidth',
	    y: 'clientHeight'
	  };
	  var CLIENT_START_KEYS = {
	    x: 'clientTop',
	    y: 'clientLeft'
	  };
	  var INNER_SIZE_KEYS = {
	    x: 'innerWidth',
	    y: 'innerHeight'
	  };
	  var OFFSET_SIZE_KEYS = {
	    x: 'offsetWidth',
	    y: 'offsetHeight'
	  };
	  var OFFSET_START_KEYS = {
	    x: 'offsetLeft',
	    y: 'offsetTop'
	  };
	  var OVERFLOW_KEYS = {
	    x: 'overflowX',
	    y: 'overflowY'
	  };
	  var SCROLL_SIZE_KEYS = {
	    x: 'scrollWidth',
	    y: 'scrollHeight'
	  };
	  var SCROLL_START_KEYS = {
	    x: 'scrollLeft',
	    y: 'scrollTop'
	  };
	  var SIZE_KEYS = {
	    x: 'width',
	    y: 'height'
	  };

	  var NOOP = function NOOP() {}; // If a browser doesn't support the `options` argument to
	  // add/removeEventListener, we need to check, otherwise we will
	  // accidentally set `capture` with a truthy value.


	  var PASSIVE = function () {
	    if (typeof window === 'undefined') return false;
	    var hasSupport = false;

	    try {
	      document.createElement('div').addEventListener('test', NOOP, {
	        get passive() {
	          hasSupport = true;
	          return false;
	        }

	      });
	    } catch (e) {// noop
	    }

	    return hasSupport;
	  }() ? {
	    passive: true
	  } : false;
	  var UNSTABLE_MESSAGE = 'ReactList failed to reach a stable state.';
	  var MAX_SYNC_UPDATES = 40;

	  var isEqualSubset = function isEqualSubset(a, b) {
	    for (var key in b) {
	      if (a[key] !== b[key]) return false;
	    }

	    return true;
	  };

	  var defaultScrollParentGetter = function defaultScrollParentGetter(component) {
	    var axis = component.props.axis;
	    var el = component.getEl();
	    var overflowKey = OVERFLOW_KEYS[axis];

	    while (el = el.parentElement) {
	      switch (window.getComputedStyle(el)[overflowKey]) {
	        case 'auto':
	        case 'scroll':
	        case 'overlay':
	          return el;
	      }
	    }

	    return window;
	  };

	  var defaultScrollParentViewportSizeGetter = function defaultScrollParentViewportSizeGetter(component) {
	    var axis = component.props.axis;
	    var scrollParent = component.scrollParent;
	    return scrollParent === window ? window[INNER_SIZE_KEYS[axis]] : scrollParent[CLIENT_SIZE_KEYS[axis]];
	  };

	  var constrain = function constrain(props, state) {
	    var length = props.length,
	        minSize = props.minSize,
	        type = props.type;
	    var from = state.from,
	        size = state.size,
	        itemsPerRow = state.itemsPerRow;
	    size = Math.max(size, minSize);
	    var mod = size % itemsPerRow;
	    if (mod) size += itemsPerRow - mod;
	    if (size > length) size = length;
	    from = type === 'simple' || !from ? 0 : Math.max(Math.min(from, length - size), 0);

	    if (mod = from % itemsPerRow) {
	      from -= mod;
	      size += mod;
	    }

	    if (from === state.from && size == state.size) return state;
	    return _objectSpread(_objectSpread({}, state), {}, {
	      from: from,
	      size: size
	    });
	  };

	  module.exports = (_temp = _class = /*#__PURE__*/function (_Component) {
	    _inherits(ReactList, _Component);

	    var _super = _createSuper(ReactList);

	    _createClass(ReactList, null, [{
	      key: "getDerivedStateFromProps",
	      value: function getDerivedStateFromProps(props, state) {
	        var newState = constrain(props, state);
	        return newState === state ? null : newState;
	      }
	    }]);

	    function ReactList(props) {
	      var _this;

	      _classCallCheck(this, ReactList);

	      _this = _super.call(this, props);
	      _this.state = constrain(props, {
	        itemsPerRow: 1,
	        from: props.initialIndex,
	        size: 0
	      });
	      _this.cache = {};
	      _this.cachedScrollPosition = null;
	      _this.prevPrevState = {};
	      _this.unstable = false;
	      _this.updateCounter = 0;
	      return _this;
	    }

	    _createClass(ReactList, [{
	      key: "componentDidMount",
	      value: function componentDidMount() {
	        this.updateFrameAndClearCache = this.updateFrameAndClearCache.bind(this);
	        window.addEventListener('resize', this.updateFrameAndClearCache);
	        this.updateFrame(this.scrollTo.bind(this, this.props.initialIndex));
	      }
	    }, {
	      key: "componentDidUpdate",
	      value: function componentDidUpdate(prevProps) {
	        var _this2 = this; // Viewport scroll is no longer useful if axis changes


	        if (this.props.axis !== prevProps.axis) this.clearSizeCache(); // If the list has reached an unstable state, prevent an infinite loop.

	        if (this.unstable) return;

	        if (++this.updateCounter > MAX_SYNC_UPDATES) {
	          this.unstable = true;
	          return console.error(UNSTABLE_MESSAGE);
	        }

	        if (!this.updateCounterTimeoutId) {
	          this.updateCounterTimeoutId = setTimeout(function () {
	            _this2.updateCounter = 0;
	            delete _this2.updateCounterTimeoutId;
	          }, 0);
	        }

	        this.updateFrame();
	      }
	    }, {
	      key: "maybeSetState",
	      value: function maybeSetState(b, cb) {
	        if (isEqualSubset(this.state, b)) return cb();
	        this.setState(b, cb);
	      }
	    }, {
	      key: "componentWillUnmount",
	      value: function componentWillUnmount() {
	        window.removeEventListener('resize', this.updateFrameAndClearCache);
	        this.scrollParent.removeEventListener('scroll', this.updateFrameAndClearCache, PASSIVE);
	        this.scrollParent.removeEventListener('mousewheel', NOOP, PASSIVE);
	      }
	    }, {
	      key: "getOffset",
	      value: function getOffset(el) {
	        var axis = this.props.axis;
	        var offset = el[CLIENT_START_KEYS[axis]] || 0;
	        var offsetKey = OFFSET_START_KEYS[axis];

	        do {
	          offset += el[offsetKey] || 0;
	        } while (el = el.offsetParent);

	        return offset;
	      }
	    }, {
	      key: "getEl",
	      value: function getEl() {
	        return this.el || this.items;
	      }
	    }, {
	      key: "getScrollPosition",
	      value: function getScrollPosition() {
	        // Cache scroll position as this causes a forced synchronous layout.
	        if (typeof this.cachedScrollPosition === 'number') {
	          return this.cachedScrollPosition;
	        }

	        var scrollParent = this.scrollParent;
	        var axis = this.props.axis;
	        var scrollKey = SCROLL_START_KEYS[axis];
	        var actual = scrollParent === window ? // Firefox always returns document.body[scrollKey] as 0 and Chrome/Safari
	        // always return document.documentElement[scrollKey] as 0, so take
	        // whichever has a value.
	        document.body[scrollKey] || document.documentElement[scrollKey] : scrollParent[scrollKey];
	        var max = this.getScrollSize() - this.props.scrollParentViewportSizeGetter(this);
	        var scroll = Math.max(0, Math.min(actual, max));
	        var el = this.getEl();
	        this.cachedScrollPosition = this.getOffset(scrollParent) + scroll - this.getOffset(el);
	        return this.cachedScrollPosition;
	      }
	    }, {
	      key: "setScroll",
	      value: function setScroll(offset) {
	        var scrollParent = this.scrollParent;
	        var axis = this.props.axis;
	        offset += this.getOffset(this.getEl());
	        if (scrollParent === window) return window.scrollTo(0, offset);
	        offset -= this.getOffset(this.scrollParent);
	        scrollParent[SCROLL_START_KEYS[axis]] = offset;
	      }
	    }, {
	      key: "getScrollSize",
	      value: function getScrollSize() {
	        var scrollParent = this.scrollParent;
	        var _document = document,
	            body = _document.body,
	            documentElement = _document.documentElement;
	        var key = SCROLL_SIZE_KEYS[this.props.axis];
	        return scrollParent === window ? Math.max(body[key], documentElement[key]) : scrollParent[key];
	      }
	    }, {
	      key: "hasDeterminateSize",
	      value: function hasDeterminateSize() {
	        var _this$props = this.props,
	            itemSizeGetter = _this$props.itemSizeGetter,
	            type = _this$props.type;
	        return type === 'uniform' || itemSizeGetter;
	      }
	    }, {
	      key: "getStartAndEnd",
	      value: function getStartAndEnd() {
	        var threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.threshold;
	        var scroll = this.getScrollPosition();
	        var start = Math.max(0, scroll - threshold);
	        var end = scroll + this.props.scrollParentViewportSizeGetter(this) + threshold;

	        if (this.hasDeterminateSize()) {
	          end = Math.min(end, this.getSpaceBefore(this.props.length));
	        }

	        return {
	          start: start,
	          end: end
	        };
	      }
	    }, {
	      key: "getItemSizeAndItemsPerRow",
	      value: function getItemSizeAndItemsPerRow() {
	        var _this$props2 = this.props,
	            axis = _this$props2.axis,
	            useStaticSize = _this$props2.useStaticSize;
	        var _this$state = this.state,
	            itemSize = _this$state.itemSize,
	            itemsPerRow = _this$state.itemsPerRow;

	        if (useStaticSize && itemSize && itemsPerRow) {
	          return {
	            itemSize: itemSize,
	            itemsPerRow: itemsPerRow
	          };
	        }

	        var itemEls = this.items.children;
	        if (!itemEls.length) return {};
	        var firstEl = itemEls[0]; // Firefox has a problem where it will return a *slightly* (less than
	        // thousandths of a pixel) different size for the same element between
	        // renders. This can cause an infinite render loop, so only change the
	        // itemSize when it is significantly different.

	        var firstElSize = firstEl[OFFSET_SIZE_KEYS[axis]];
	        var delta = Math.abs(firstElSize - itemSize);
	        if (isNaN(delta) || delta >= 1) itemSize = firstElSize;
	        if (!itemSize) return {};
	        var startKey = OFFSET_START_KEYS[axis];
	        var firstStart = firstEl[startKey];
	        itemsPerRow = 1;

	        for (var item = itemEls[itemsPerRow]; item && item[startKey] === firstStart; item = itemEls[itemsPerRow]) {
	          ++itemsPerRow;
	        }

	        return {
	          itemSize: itemSize,
	          itemsPerRow: itemsPerRow
	        };
	      }
	    }, {
	      key: "clearSizeCache",
	      value: function clearSizeCache() {
	        this.cachedScrollPosition = null;
	      } // Called by 'scroll' and 'resize' events, clears scroll position cache.

	    }, {
	      key: "updateFrameAndClearCache",
	      value: function updateFrameAndClearCache(cb) {
	        this.clearSizeCache();
	        return this.updateFrame(cb);
	      }
	    }, {
	      key: "updateFrame",
	      value: function updateFrame(cb) {
	        this.updateScrollParent();
	        if (typeof cb != 'function') cb = NOOP;

	        switch (this.props.type) {
	          case 'simple':
	            return this.updateSimpleFrame(cb);

	          case 'variable':
	            return this.updateVariableFrame(cb);

	          case 'uniform':
	            return this.updateUniformFrame(cb);
	        }
	      }
	    }, {
	      key: "updateScrollParent",
	      value: function updateScrollParent() {
	        var prev = this.scrollParent;
	        this.scrollParent = this.props.scrollParentGetter(this);
	        if (prev === this.scrollParent) return;

	        if (prev) {
	          prev.removeEventListener('scroll', this.updateFrameAndClearCache);
	          prev.removeEventListener('mousewheel', NOOP);
	        } // If we have a new parent, cached parent dimensions are no longer useful.


	        this.clearSizeCache();
	        this.scrollParent.addEventListener('scroll', this.updateFrameAndClearCache, PASSIVE); // You have to attach mousewheel listener to the scrollable element.
	        // Just an empty listener. After that onscroll events will be fired synchronously.

	        this.scrollParent.addEventListener('mousewheel', NOOP, PASSIVE);
	      }
	    }, {
	      key: "updateSimpleFrame",
	      value: function updateSimpleFrame(cb) {
	        var _this$getStartAndEnd = this.getStartAndEnd(),
	            end = _this$getStartAndEnd.end;

	        var itemEls = this.items.children;
	        var elEnd = 0;

	        if (itemEls.length) {
	          var axis = this.props.axis;
	          var firstItemEl = itemEls[0];
	          var lastItemEl = itemEls[itemEls.length - 1];
	          elEnd = this.getOffset(lastItemEl) + lastItemEl[OFFSET_SIZE_KEYS[axis]] - this.getOffset(firstItemEl);
	        }

	        if (elEnd > end) return cb();
	        var _this$props3 = this.props,
	            pageSize = _this$props3.pageSize,
	            length = _this$props3.length;
	        var size = Math.min(this.state.size + pageSize, length);
	        this.maybeSetState({
	          size: size
	        }, cb);
	      }
	    }, {
	      key: "updateVariableFrame",
	      value: function updateVariableFrame(cb) {
	        if (!this.props.itemSizeGetter) this.cacheSizes();

	        var _this$getStartAndEnd2 = this.getStartAndEnd(),
	            start = _this$getStartAndEnd2.start,
	            end = _this$getStartAndEnd2.end;

	        var _this$props4 = this.props,
	            length = _this$props4.length,
	            pageSize = _this$props4.pageSize;
	        var space = 0;
	        var from = 0;
	        var size = 0;
	        var maxFrom = length - 1;

	        while (from < maxFrom) {
	          var itemSize = this.getSizeOfItem(from);
	          if (itemSize == null || space + itemSize > start) break;
	          space += itemSize;
	          ++from;
	        }

	        var maxSize = length - from;

	        while (size < maxSize && space < end) {
	          var _itemSize = this.getSizeOfItem(from + size);

	          if (_itemSize == null) {
	            size = Math.min(size + pageSize, maxSize);
	            break;
	          }

	          space += _itemSize;
	          ++size;
	        }

	        this.maybeSetState(constrain(this.props, {
	          from: from,
	          itemsPerRow: 1,
	          size: size
	        }), cb);
	      }
	    }, {
	      key: "updateUniformFrame",
	      value: function updateUniformFrame(cb) {
	        var _this$getItemSizeAndI = this.getItemSizeAndItemsPerRow(),
	            itemSize = _this$getItemSizeAndI.itemSize,
	            itemsPerRow = _this$getItemSizeAndI.itemsPerRow;

	        if (!itemSize || !itemsPerRow) return cb();

	        var _this$getStartAndEnd3 = this.getStartAndEnd(),
	            start = _this$getStartAndEnd3.start,
	            end = _this$getStartAndEnd3.end;

	        var _constrain = constrain(this.props, {
	          from: Math.floor(start / itemSize) * itemsPerRow,
	          size: (Math.ceil((end - start) / itemSize) + 1) * itemsPerRow,
	          itemsPerRow: itemsPerRow
	        }),
	            from = _constrain.from,
	            size = _constrain.size;

	        return this.maybeSetState({
	          itemsPerRow: itemsPerRow,
	          from: from,
	          itemSize: itemSize,
	          size: size
	        }, cb);
	      }
	    }, {
	      key: "getSpaceBefore",
	      value: function getSpaceBefore(index) {
	        var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	        if (cache[index] != null) return cache[index]; // Try the static itemSize.

	        var _this$state2 = this.state,
	            itemSize = _this$state2.itemSize,
	            itemsPerRow = _this$state2.itemsPerRow;

	        if (itemSize) {
	          return cache[index] = Math.floor(index / itemsPerRow) * itemSize;
	        } // Find the closest space to index there is a cached value for.


	        var from = index;

	        while (from > 0 && cache[--from] == null) {
	        } // Finally, accumulate sizes of items from - index.


	        var space = cache[from] || 0;

	        for (var i = from; i < index; ++i) {
	          cache[i] = space;

	          var _itemSize2 = this.getSizeOfItem(i);

	          if (_itemSize2 == null) break;
	          space += _itemSize2;
	        }

	        return cache[index] = space;
	      }
	    }, {
	      key: "cacheSizes",
	      value: function cacheSizes() {
	        var cache = this.cache;
	        var from = this.state.from;
	        var itemEls = this.items.children;
	        var sizeKey = OFFSET_SIZE_KEYS[this.props.axis];

	        for (var i = 0, l = itemEls.length; i < l; ++i) {
	          cache[from + i] = itemEls[i][sizeKey];
	        }
	      }
	    }, {
	      key: "getSizeOfItem",
	      value: function getSizeOfItem(index) {
	        var cache = this.cache,
	            items = this.items;
	        var _this$props5 = this.props,
	            axis = _this$props5.axis,
	            itemSizeGetter = _this$props5.itemSizeGetter,
	            itemSizeEstimator = _this$props5.itemSizeEstimator,
	            type = _this$props5.type;
	        var _this$state3 = this.state,
	            from = _this$state3.from,
	            itemSize = _this$state3.itemSize,
	            size = _this$state3.size; // Try the static itemSize.

	        if (itemSize) return itemSize; // Try the itemSizeGetter.

	        if (itemSizeGetter) return itemSizeGetter(index); // Try the cache.

	        if (index in cache) return cache[index]; // Try the DOM.

	        if (type === 'simple' && index >= from && index < from + size && items) {
	          var itemEl = items.children[index - from];
	          if (itemEl) return itemEl[OFFSET_SIZE_KEYS[axis]];
	        } // Try the itemSizeEstimator.


	        if (itemSizeEstimator) return itemSizeEstimator(index, cache);
	      }
	    }, {
	      key: "scrollTo",
	      value: function scrollTo(index) {
	        if (index != null) this.setScroll(this.getSpaceBefore(index));
	      }
	    }, {
	      key: "scrollAround",
	      value: function scrollAround(index) {
	        var current = this.getScrollPosition();
	        var bottom = this.getSpaceBefore(index);
	        var top = bottom - this.props.scrollParentViewportSizeGetter(this) + this.getSizeOfItem(index);
	        var min = Math.min(top, bottom);
	        var max = Math.max(top, bottom);
	        if (current <= min) return this.setScroll(min);
	        if (current > max) return this.setScroll(max);
	      }
	    }, {
	      key: "getVisibleRange",
	      value: function getVisibleRange() {
	        var _this$state4 = this.state,
	            from = _this$state4.from,
	            size = _this$state4.size;

	        var _this$getStartAndEnd4 = this.getStartAndEnd(0),
	            start = _this$getStartAndEnd4.start,
	            end = _this$getStartAndEnd4.end;

	        var cache = {};
	        var first, last;

	        for (var i = from; i < from + size; ++i) {
	          var itemStart = this.getSpaceBefore(i, cache);
	          var itemEnd = itemStart + this.getSizeOfItem(i);
	          if (first == null && itemEnd > start) first = i;
	          if (first != null && itemStart < end) last = i;
	        }

	        return [first, last];
	      }
	    }, {
	      key: "renderItems",
	      value: function renderItems() {
	        var _this3 = this;

	        var _this$props6 = this.props,
	            itemRenderer = _this$props6.itemRenderer,
	            itemsRenderer = _this$props6.itemsRenderer;
	        var _this$state5 = this.state,
	            from = _this$state5.from,
	            size = _this$state5.size;
	        var items = [];

	        for (var i = 0; i < size; ++i) {
	          items.push(itemRenderer(from + i, i));
	        }

	        return itemsRenderer(items, function (c) {
	          return _this3.items = c;
	        });
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var _this4 = this;

	        var _this$props7 = this.props,
	            axis = _this$props7.axis,
	            length = _this$props7.length,
	            type = _this$props7.type,
	            useTranslate3d = _this$props7.useTranslate3d;
	        var _this$state6 = this.state,
	            from = _this$state6.from,
	            itemsPerRow = _this$state6.itemsPerRow;
	        var items = this.renderItems();
	        if (type === 'simple') return items;
	        var style = {
	          position: 'relative'
	        };
	        var cache = {};
	        var bottom = Math.ceil(length / itemsPerRow) * itemsPerRow;
	        var size = this.getSpaceBefore(bottom, cache);

	        if (size) {
	          style[SIZE_KEYS[axis]] = size;
	          if (axis === 'x') style.overflowX = 'hidden';
	        }

	        var offset = this.getSpaceBefore(from, cache);
	        var x = axis === 'x' ? offset : 0;
	        var y = axis === 'y' ? offset : 0;
	        var transform = useTranslate3d ? "translate3d(".concat(x, "px, ").concat(y, "px, 0)") : "translate(".concat(x, "px, ").concat(y, "px)");
	        var listStyle = {
	          msTransform: transform,
	          WebkitTransform: transform,
	          transform: transform
	        };
	        return /*#__PURE__*/_react["default"].createElement("div", {
	          style: style,
	          ref: function ref(c) {
	            return _this4.el = c;
	          }
	        }, /*#__PURE__*/_react["default"].createElement("div", {
	          style: listStyle
	        }, items));
	      }
	    }]);

	    return ReactList;
	  }(_react.Component), _defineProperty(_class, "displayName", 'ReactList'), _defineProperty(_class, "propTypes", {
	    axis: _propTypes["default"].oneOf(['x', 'y']),
	    initialIndex: _propTypes["default"].number,
	    itemRenderer: _propTypes["default"].func,
	    itemSizeEstimator: _propTypes["default"].func,
	    itemSizeGetter: _propTypes["default"].func,
	    itemsRenderer: _propTypes["default"].func,
	    length: _propTypes["default"].number,
	    minSize: _propTypes["default"].number,
	    pageSize: _propTypes["default"].number,
	    scrollParentGetter: _propTypes["default"].func,
	    scrollParentViewportSizeGetter: _propTypes["default"].func,
	    threshold: _propTypes["default"].number,
	    type: _propTypes["default"].oneOf(['simple', 'variable', 'uniform']),
	    useStaticSize: _propTypes["default"].bool,
	    useTranslate3d: _propTypes["default"].bool
	  }), _defineProperty(_class, "defaultProps", {
	    axis: 'y',
	    itemRenderer: function itemRenderer(index, key) {
	      return /*#__PURE__*/_react["default"].createElement("div", {
	        key: key
	      }, index);
	    },
	    itemsRenderer: function itemsRenderer(items, ref) {
	      return /*#__PURE__*/_react["default"].createElement("div", {
	        ref: ref
	      }, items);
	    },
	    length: 0,
	    minSize: 1,
	    pageSize: 10,
	    scrollParentGetter: defaultScrollParentGetter,
	    scrollParentViewportSizeGetter: defaultScrollParentViewportSizeGetter,
	    threshold: 100,
	    type: 'simple',
	    useStaticSize: false,
	    useTranslate3d: false
	  }), _temp);
	});
} (reactList));

function shallowEqualObjects(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (!objA || !objB) {
    return false;
  }

  var aKeys = Object.keys(objA);
  var bKeys = Object.keys(objB);
  var len = aKeys.length;

  if (bKeys.length !== len) {
    return false;
  }

  for (var i = 0; i < len; i++) {
    var key = aKeys[i];

    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
      return false;
    }
  }

  return true;
}

function shallowEqualArrays(arrA, arrB) {
  if (arrA === arrB) {
    return true;
  }

  if (!arrA || !arrB) {
    return false;
  }

  var len = arrA.length;

  if (arrB.length !== len) {
    return false;
  }

  for (var i = 0; i < len; i++) {
    if (arrA[i] !== arrB[i]) {
      return false;
    }
  }

  return true;
}

var index_esm = /*#__PURE__*/Object.freeze({
	__proto__: null,
	shallowEqualArrays: shallowEqualArrays,
	shallowEqualObjects: shallowEqualObjects
});

var require$$8 = /*@__PURE__*/getAugmentedNamespace(index_esm);

/**
 * @name max
 * @category Common Helpers
 * @summary Return the latest of the given dates.
 *
 * @description
 * Return the latest of the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - `max` function now accepts an array of dates rather than spread arguments.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   var date1 = new Date(1989, 6, 10)
 *   var date2 = new Date(1987, 1, 11)
 *   var maxDate = max(date1, date2)
 *
 *   // v2.0.0 onward:
 *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]
 *   var maxDate = max(dates)
 *   ```
 *
 * @param {Date[]|Number[]} datesArray - the dates to compare
 * @returns {Date} the latest of the dates
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which of these dates is the latest?
 * var result = max([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Sun Jul 02 1995 00:00:00
 */

function max(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method

  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {
    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.
  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    // `dirtyDatesArray` is non-iterable, return Invalid Date
    return new Date(NaN);
  }

  var result;
  datesArray.forEach(function (dirtyDate) {
    var currentDate = toDate(dirtyDate);

    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {
      result = currentDate;
    }
  });
  return result || new Date(NaN);
}

var max$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': max
});

var require$$5 = /*@__PURE__*/getAugmentedNamespace(max$1);

/**
 * @name min
 * @category Common Helpers
 * @summary Returns the earliest of the given dates.
 *
 * @description
 * Returns the earliest of the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - `min` function now accepts an array of dates rather than spread arguments.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   const date1 = new Date(1989, 6, 10)
 *   const date2 = new Date(1987, 1, 11)
 *   const minDate = min(date1, date2)
 *
 *   // v2.0.0 onward:
 *   const dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]
 *   const minDate = min(dates)
 *   ```
 *
 * @param {Date[]|Number[]} datesArray - the dates to compare
 * @returns {Date} - the earliest of the dates
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which of these dates is the earliest?
 * const result = min([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Wed Feb 11 1987 00:00:00
 */

function min(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method

  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {
    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.
  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    // `dirtyDatesArray` is non-iterable, return Invalid Date
    return new Date(NaN);
  }

  var result;
  datesArray.forEach(function (dirtyDate) {
    var currentDate = toDate(dirtyDate);

    if (result === undefined || result > currentDate || isNaN(currentDate.getDate())) {
      result = currentDate;
    }
  });
  return result || new Date(NaN);
}

var min$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': min
});

var require$$7 = /*@__PURE__*/getAugmentedNamespace(min$1);

// for accurate equality comparisons of UTC timestamps that end up
// having the same representation in local time, e.g. one hour before
// DST ends vs. the instant that DST ends.

function compareLocalAsc(dateLeft, dateRight) {
  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();

  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1; // Return 0 if diff is 0; return NaN if diff is NaN
  } else {
    return diff;
  }
}
/**
 * @name differenceInDays
 * @category Day Helpers
 * @summary Get the number of full days between the given dates.
 *
 * @description
 * Get the number of full day periods between two dates. Fractional days are
 * truncated towards zero.
 *
 * One "full day" is the distance between a local time in one day to the same
 * local time on the next or previous day. A full day can sometimes be less than
 * or more than 24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 24-hour periods, use this instead:
 * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.
 *
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of full days according to the local timezone
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 365
 * // How many full days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 0
 * // How many full days are between
 * // 1 March 2020 0:00 and 1 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 92 days, even in
 * // time zones where DST starts and the
 * // period has only 92*24-1 hours.
 * const result = differenceInDays(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 1)
 * )
//=> 92
 */


function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign = compareLocalAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
  // If so, result must be decreased by 1 in absolute value

  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);
  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero

  return result === 0 ? 0 : result;
}

var differenceInDays$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': differenceInDays
});

var require$$11 = /*@__PURE__*/getAugmentedNamespace(differenceInDays$1);

/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month (and year)?
 *
 * @description
 * Are the given dates in the same month (and year)?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month (and year)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 *
 * @example
 * // Are 2 September 2014 and 25 September 2015 in the same month?
 * var result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
 * //=> false
 */

function isSameMonth(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}

var isSameMonth$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': isSameMonth
});

var require$$12 = /*@__PURE__*/getAugmentedNamespace(isSameMonth$1);

/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the number of days in a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */

function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

/**
 * @name setMonth
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} month - the month of the new date
 * @returns {Date} the new date with the month set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set February to 1 September 2014:
 * const result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */

function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month
  // if the original date was the last day of the longer month

  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}

var setMonth$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': setMonth
});

var require$$17 = /*@__PURE__*/getAugmentedNamespace(setMonth$1);

/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * const result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */

function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date

  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }

  date.setFullYear(year);
  return date;
}

var setYear$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': setYear
});

var require$$18 = /*@__PURE__*/getAugmentedNamespace(setYear$1);

/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */

function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);

  if (isNaN(amount)) {
    return new Date(NaN);
  }

  if (!amount) {
    // If 0 months, no-op to avoid changing times in the hour before end of DST
    return date;
  }

  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for
  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
  // want except that dates will wrap around the end of a month, meaning that
  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
  // we'll default to the end of the desired month by adding 1 to the desired
  // month and using a date of 0 to back up one day to the end of the desired
  // month.

  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();

  if (dayOfMonth >= daysInMonth) {
    // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
  } else {
    // Otherwise, we now know that setting the original day-of-month value won't
    // cause an overflow, so set the desired day-of-month. Note that we can't
    // just set the date of `endOfDesiredMonth` because that object may have had
    // its time changed in the unusual case where where a DST transition was on
    // the last day of the month and its local time was in the hour skipped or
    // repeated next to a DST transition.  So we use `date` instead which is
    // guaranteed to still have the original time.
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}

var addMonths$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': addMonths
});

/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */

function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

var addYears$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': addYears
});

var require$$19 = /*@__PURE__*/getAugmentedNamespace(addYears$1);

/**
 * @name subMonths
 * @category Month Helpers
 * @summary Subtract the specified number of months from the given date.
 *
 * @description
 * Subtract the specified number of months from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 5 months from 1 February 2015:
 * const result = subMonths(new Date(2015, 1, 1), 5)
 * //=> Mon Sep 01 2014 00:00:00
 */

function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}

var subMonths$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': subMonths
});

var require$$25 = /*@__PURE__*/getAugmentedNamespace(subMonths$1);

var require$$4 = /*@__PURE__*/getAugmentedNamespace(addMonths$1);

var require$$27 = /*@__PURE__*/getAugmentedNamespace(enUS$1);

var styles$F = {};

Object.defineProperty(styles$F, "__esModule", {
  value: true
});
styles$F.default = void 0;
var _default$5 = {
  dateRangeWrapper: 'rdrDateRangeWrapper',
  calendarWrapper: 'rdrCalendarWrapper',
  dateDisplay: 'rdrDateDisplay',
  dateDisplayItem: 'rdrDateDisplayItem',
  dateDisplayItemActive: 'rdrDateDisplayItemActive',
  monthAndYearWrapper: 'rdrMonthAndYearWrapper',
  monthAndYearPickers: 'rdrMonthAndYearPickers',
  nextPrevButton: 'rdrNextPrevButton',
  month: 'rdrMonth',
  weekDays: 'rdrWeekDays',
  weekDay: 'rdrWeekDay',
  days: 'rdrDays',
  day: 'rdrDay',
  dayNumber: 'rdrDayNumber',
  dayPassive: 'rdrDayPassive',
  dayToday: 'rdrDayToday',
  dayStartOfWeek: 'rdrDayStartOfWeek',
  dayEndOfWeek: 'rdrDayEndOfWeek',
  daySelected: 'rdrDaySelected',
  dayDisabled: 'rdrDayDisabled',
  dayStartOfMonth: 'rdrDayStartOfMonth',
  dayEndOfMonth: 'rdrDayEndOfMonth',
  dayWeekend: 'rdrDayWeekend',
  dayStartPreview: 'rdrDayStartPreview',
  dayInPreview: 'rdrDayInPreview',
  dayEndPreview: 'rdrDayEndPreview',
  dayHovered: 'rdrDayHovered',
  dayActive: 'rdrDayActive',
  inRange: 'rdrInRange',
  endEdge: 'rdrEndEdge',
  startEdge: 'rdrStartEdge',
  prevButton: 'rdrPprevButton',
  nextButton: 'rdrNextButton',
  selected: 'rdrSelected',
  months: 'rdrMonths',
  monthPicker: 'rdrMonthPicker',
  yearPicker: 'rdrYearPicker',
  dateDisplayWrapper: 'rdrDateDisplayWrapper',
  definedRangesWrapper: 'rdrDefinedRangesWrapper',
  staticRanges: 'rdrStaticRanges',
  staticRange: 'rdrStaticRange',
  inputRanges: 'rdrInputRanges',
  inputRange: 'rdrInputRange',
  inputRangeInput: 'rdrInputRangeInput',
  dateRangePickerWrapper: 'rdrDateRangePickerWrapper',
  staticRangeLabel: 'rdrStaticRangeLabel',
  staticRangeSelected: 'rdrStaticRangeSelected',
  monthName: 'rdrMonthName',
  infiniteMonths: 'rdrInfiniteMonths',
  monthsVertical: 'rdrMonthsVertical',
  monthsHorizontal: 'rdrMonthsHorizontal'
};
styles$F.default = _default$5;

var accessibility = {};

Object.defineProperty(accessibility, "__esModule", {
  value: true
});
accessibility.ariaLabelsShape = void 0;

var _propTypes$5 = _interopRequireDefault$6(propTypes.exports);

function _interopRequireDefault$6(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var ariaLabelsShape = _propTypes$5.default.shape({
  dateInput: _propTypes$5.default.objectOf(_propTypes$5.default.shape({
    startDate: _propTypes$5.default.string,
    endDate: _propTypes$5.default.string
  })),
  monthPicker: _propTypes$5.default.string,
  yearPicker: _propTypes$5.default.string,
  prevButton: _propTypes$5.default.string,
  nextButton: _propTypes$5.default.string
});

accessibility.ariaLabelsShape = ariaLabelsShape;

function _typeof$4(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$4 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$4 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$4(obj);
}

Object.defineProperty(Calendar$1, "__esModule", {
  value: true
});
Calendar$1.default = void 0;

var _react$4 = _interopRequireWildcard$4(react.exports);

var _propTypes$4 = _interopRequireDefault$5(propTypes.exports);

var _DayCell$2 = DayCell$1;

var _Month = _interopRequireDefault$5(Month$1);

var _DateInput = _interopRequireDefault$5(DateInput$1);

var _utils$2 = utils;

var _classnames3 = _interopRequireDefault$5(classnames.exports);

var _reactList = _interopRequireDefault$5(reactList.exports);

var _shallowEqual = require$$8;

var _max$1 = _interopRequireDefault$5(require$$5);

var _min$1 = _interopRequireDefault$5(require$$7);

var _differenceInDays = _interopRequireDefault$5(require$$11);

var _isSameMonth = _interopRequireDefault$5(require$$12);

var _addDays$2 = _interopRequireDefault$5(require$$9);

var _endOfMonth$1 = _interopRequireDefault$5(require$$5$2);

var _startOfMonth$1 = _interopRequireDefault$5(require$$6);

var _differenceInCalendarMonths = _interopRequireDefault$5(require$$16);

var _setMonth2 = _interopRequireDefault$5(require$$17);

var _setYear2 = _interopRequireDefault$5(require$$18);

var _addYears = _interopRequireDefault$5(require$$19);

var _isSameDay$1 = _interopRequireDefault$5(require$$1);

var _endOfWeek$1 = _interopRequireDefault$5(require$$2);

var _startOfWeek$1 = _interopRequireDefault$5(require$$3$1);

var _eachDayOfInterval = _interopRequireDefault$5(require$$23);

var _format = _interopRequireDefault$5(require$$24);

var _subMonths = _interopRequireDefault$5(require$$25);

var _addMonths$1 = _interopRequireDefault$5(require$$4);

var _enUS = _interopRequireDefault$5(require$$27);

var _styles$3 = _interopRequireDefault$5(styles$F);

var _accessibility = accessibility;

function _interopRequireDefault$5(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache$4(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache$4 = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard$4(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof$4(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache$4(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends$2() {
  _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$2.apply(this, arguments);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function ownKeys$4(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread$4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$4(Object(source), true).forEach(function (key) {
        _defineProperty$5(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$4(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck$4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$4(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$4(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$4(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$4(Constructor, staticProps);
  return Constructor;
}

function _inherits$4(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf$4(subClass, superClass);
}

function _setPrototypeOf$4(o, p) {
  _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$4(o, p);
}

function _createSuper$4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf$4(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$4(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn$4(this, result);
  };
}

function _possibleConstructorReturn$4(self, call) {
  if (call && (_typeof$4(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized$4(self);
}

function _assertThisInitialized$4(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct$4() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf$4(o) {
  _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$4(o);
}

function _defineProperty$5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var Calendar = /*#__PURE__*/function (_PureComponent) {
  _inherits$4(Calendar, _PureComponent);

  var _super = _createSuper$4(Calendar);

  function Calendar(_props, context) {
    var _this;

    _classCallCheck$4(this, Calendar);

    _this = _super.call(this, _props, context);

    _defineProperty$5(_assertThisInitialized$4(_this), "focusToDate", function (date) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props;
      var preventUnnecessary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (!props.scroll.enabled) {
        if (preventUnnecessary && props.preventSnapRefocus) {
          var focusedDateDiff = (0, _differenceInCalendarMonths.default)(date, _this.state.focusedDate);
          var isAllowedForward = props.calendarFocus === 'forwards' && focusedDateDiff >= 0;
          var isAllowedBackward = props.calendarFocus === 'backwards' && focusedDateDiff <= 0;

          if ((isAllowedForward || isAllowedBackward) && Math.abs(focusedDateDiff) < props.months) {
            return;
          }
        }

        _this.setState({
          focusedDate: date
        });

        return;
      }

      var targetMonthIndex = (0, _differenceInCalendarMonths.default)(date, props.minDate, _this.dateOptions);

      var visibleMonths = _this.list.getVisibleRange();

      if (preventUnnecessary && visibleMonths.includes(targetMonthIndex)) return;
      _this.isFirstRender = true;

      _this.list.scrollTo(targetMonthIndex);

      _this.setState({
        focusedDate: date
      });
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "updateShownDate", function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;
      var newProps = props.scroll.enabled ? _objectSpread$4(_objectSpread$4({}, props), {}, {
        months: _this.list.getVisibleRange().length
      }) : props;
      var newFocus = (0, _utils$2.calcFocusDate)(_this.state.focusedDate, newProps);

      _this.focusToDate(newFocus, newProps);
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "updatePreview", function (val) {
      if (!val) {
        _this.setState({
          preview: null
        });

        return;
      }

      var preview = {
        startDate: val,
        endDate: val,
        color: _this.props.color
      };

      _this.setState({
        preview: preview
      });
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "changeShownDate", function (value) {
      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'set';
      var focusedDate = _this.state.focusedDate;
      var _this$props = _this.props,
          onShownDateChange = _this$props.onShownDateChange,
          minDate = _this$props.minDate,
          maxDate = _this$props.maxDate;
      var modeMapper = {
        monthOffset: function monthOffset() {
          return (0, _addMonths$1.default)(focusedDate, value);
        },
        setMonth: function (_setMonth) {
          function setMonth() {
            return _setMonth.apply(this, arguments);
          }

          setMonth.toString = function () {
            return _setMonth.toString();
          };

          return setMonth;
        }(function () {
          return (0, _setMonth2.default)(focusedDate, value);
        }),
        setYear: function (_setYear) {
          function setYear() {
            return _setYear.apply(this, arguments);
          }

          setYear.toString = function () {
            return _setYear.toString();
          };

          return setYear;
        }(function () {
          return (0, _setYear2.default)(focusedDate, value);
        }),
        set: function set() {
          return value;
        }
      };
      var newDate = (0, _min$1.default)([(0, _max$1.default)([modeMapper[mode](), minDate]), maxDate]);

      _this.focusToDate(newDate, _this.props, false);

      onShownDateChange && onShownDateChange(newDate);
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "handleRangeFocusChange", function (rangesIndex, rangeItemIndex) {
      _this.props.onRangeFocusChange && _this.props.onRangeFocusChange([rangesIndex, rangeItemIndex]);
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "handleScroll", function () {
      var _this$props2 = _this.props,
          onShownDateChange = _this$props2.onShownDateChange,
          minDate = _this$props2.minDate;
      var focusedDate = _this.state.focusedDate;

      var _assertThisInitialize = _assertThisInitialized$4(_this),
          isFirstRender = _assertThisInitialize.isFirstRender;

      var visibleMonths = _this.list.getVisibleRange(); // prevent scroll jump with wrong visible value


      if (visibleMonths[0] === undefined) return;
      var visibleMonth = (0, _addMonths$1.default)(minDate, visibleMonths[0] || 0);
      var isFocusedToDifferent = !(0, _isSameMonth.default)(visibleMonth, focusedDate);

      if (isFocusedToDifferent && !isFirstRender) {
        _this.setState({
          focusedDate: visibleMonth
        });

        onShownDateChange && onShownDateChange(visibleMonth);
      }

      _this.isFirstRender = false;
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "renderMonthAndYear", function (focusedDate, changeShownDate, props) {
      var showMonthArrow = props.showMonthArrow,
          minDate = props.minDate,
          maxDate = props.maxDate,
          showMonthAndYearPickers = props.showMonthAndYearPickers,
          ariaLabels = props.ariaLabels;
      var upperYearLimit = (maxDate || Calendar.defaultProps.maxDate).getFullYear();
      var lowerYearLimit = (minDate || Calendar.defaultProps.minDate).getFullYear();
      var styles = _this.styles;
      return /*#__PURE__*/_react$4.default.createElement("div", {
        onMouseUp: function onMouseUp(e) {
          return e.stopPropagation();
        },
        className: styles.monthAndYearWrapper
      }, showMonthArrow ? /*#__PURE__*/_react$4.default.createElement("button", {
        type: "button",
        className: (0, _classnames3.default)(styles.nextPrevButton, styles.prevButton),
        onClick: function onClick() {
          return changeShownDate(-1, 'monthOffset');
        },
        "aria-label": ariaLabels.prevButton
      }, /*#__PURE__*/_react$4.default.createElement("i", null)) : null, showMonthAndYearPickers ? /*#__PURE__*/_react$4.default.createElement("span", {
        className: styles.monthAndYearPickers
      }, /*#__PURE__*/_react$4.default.createElement("span", {
        className: styles.monthPicker
      }, /*#__PURE__*/_react$4.default.createElement("select", {
        value: focusedDate.getMonth(),
        onChange: function onChange(e) {
          return changeShownDate(e.target.value, 'setMonth');
        },
        "aria-label": ariaLabels.monthPicker
      }, _this.state.monthNames.map(function (monthName, i) {
        return /*#__PURE__*/_react$4.default.createElement("option", {
          key: i,
          value: i
        }, monthName);
      }))), /*#__PURE__*/_react$4.default.createElement("span", {
        className: styles.monthAndYearDivider
      }), /*#__PURE__*/_react$4.default.createElement("span", {
        className: styles.yearPicker
      }, /*#__PURE__*/_react$4.default.createElement("select", {
        value: focusedDate.getFullYear(),
        onChange: function onChange(e) {
          return changeShownDate(e.target.value, 'setYear');
        },
        "aria-label": ariaLabels.yearPicker
      }, new Array(upperYearLimit - lowerYearLimit + 1).fill(upperYearLimit).map(function (val, i) {
        var year = val - i;
        return /*#__PURE__*/_react$4.default.createElement("option", {
          key: year,
          value: year
        }, year);
      })))) : /*#__PURE__*/_react$4.default.createElement("span", {
        className: styles.monthAndYearPickers
      }, _this.state.monthNames[focusedDate.getMonth()], " ", focusedDate.getFullYear()), showMonthArrow ? /*#__PURE__*/_react$4.default.createElement("button", {
        type: "button",
        className: (0, _classnames3.default)(styles.nextPrevButton, styles.nextButton),
        onClick: function onClick() {
          return changeShownDate(+1, 'monthOffset');
        },
        "aria-label": ariaLabels.nextButton
      }, /*#__PURE__*/_react$4.default.createElement("i", null)) : null);
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "renderDateDisplay", function () {
      var _this$props3 = _this.props,
          focusedRange = _this$props3.focusedRange,
          color = _this$props3.color,
          ranges = _this$props3.ranges,
          rangeColors = _this$props3.rangeColors,
          dateDisplayFormat = _this$props3.dateDisplayFormat,
          editableDateInputs = _this$props3.editableDateInputs,
          startDatePlaceholder = _this$props3.startDatePlaceholder,
          endDatePlaceholder = _this$props3.endDatePlaceholder,
          ariaLabels = _this$props3.ariaLabels;
      var defaultColor = rangeColors[focusedRange[0]] || color;
      var styles = _this.styles;
      return /*#__PURE__*/_react$4.default.createElement("div", {
        className: styles.dateDisplayWrapper
      }, ranges.map(function (range, i) {
        if (range.showDateDisplay === false || range.disabled && !range.showDateDisplay) return null;
        return /*#__PURE__*/_react$4.default.createElement("div", {
          className: styles.dateDisplay,
          key: i,
          style: {
            color: range.color || defaultColor
          }
        }, /*#__PURE__*/_react$4.default.createElement(_DateInput.default, {
          className: (0, _classnames3.default)(styles.dateDisplayItem, _defineProperty$5({}, styles.dateDisplayItemActive, focusedRange[0] === i && focusedRange[1] === 0)),
          readOnly: !editableDateInputs,
          disabled: range.disabled,
          value: range.startDate,
          placeholder: startDatePlaceholder,
          dateOptions: _this.dateOptions,
          dateDisplayFormat: dateDisplayFormat,
          ariaLabel: ariaLabels.dateInput && ariaLabels.dateInput[range.key] && ariaLabels.dateInput[range.key].startDate,
          onChange: _this.onDragSelectionEnd,
          onFocus: function onFocus() {
            return _this.handleRangeFocusChange(i, 0);
          }
        }), /*#__PURE__*/_react$4.default.createElement(_DateInput.default, {
          className: (0, _classnames3.default)(styles.dateDisplayItem, _defineProperty$5({}, styles.dateDisplayItemActive, focusedRange[0] === i && focusedRange[1] === 1)),
          readOnly: !editableDateInputs,
          disabled: range.disabled,
          value: range.endDate,
          placeholder: endDatePlaceholder,
          dateOptions: _this.dateOptions,
          dateDisplayFormat: dateDisplayFormat,
          ariaLabel: ariaLabels.dateInput && ariaLabels.dateInput[range.key] && ariaLabels.dateInput[range.key].endDate,
          onChange: _this.onDragSelectionEnd,
          onFocus: function onFocus() {
            return _this.handleRangeFocusChange(i, 1);
          }
        }));
      }));
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "onDragSelectionStart", function (date) {
      var _this$props4 = _this.props,
          onChange = _this$props4.onChange,
          dragSelectionEnabled = _this$props4.dragSelectionEnabled;

      if (dragSelectionEnabled) {
        _this.setState({
          drag: {
            status: true,
            range: {
              startDate: date,
              endDate: date
            },
            disablePreview: true
          }
        });
      } else {
        onChange && onChange(date);
      }
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "onDragSelectionEnd", function (date) {
      var _this$props5 = _this.props,
          updateRange = _this$props5.updateRange,
          displayMode = _this$props5.displayMode,
          onChange = _this$props5.onChange,
          dragSelectionEnabled = _this$props5.dragSelectionEnabled;
      if (!dragSelectionEnabled) return;

      if (displayMode === 'date' || !_this.state.drag.status) {
        onChange && onChange(date);
        return;
      }

      var newRange = {
        startDate: _this.state.drag.range.startDate,
        endDate: date
      };

      if (displayMode !== 'dateRange' || (0, _isSameDay$1.default)(newRange.startDate, date)) {
        _this.setState({
          drag: {
            status: false,
            range: {}
          }
        }, function () {
          return onChange && onChange(date);
        });
      } else {
        _this.setState({
          drag: {
            status: false,
            range: {}
          }
        }, function () {
          updateRange && updateRange(newRange);
        });
      }
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "onDragSelectionMove", function (date) {
      var drag = _this.state.drag;
      if (!drag.status || !_this.props.dragSelectionEnabled) return;

      _this.setState({
        drag: {
          status: drag.status,
          range: {
            startDate: drag.range.startDate,
            endDate: date
          },
          disablePreview: true
        }
      });
    });

    _defineProperty$5(_assertThisInitialized$4(_this), "estimateMonthSize", function (index, cache) {
      var _this$props6 = _this.props,
          direction = _this$props6.direction,
          minDate = _this$props6.minDate;
      var scrollArea = _this.state.scrollArea;

      if (cache) {
        _this.listSizeCache = cache;
        if (cache[index]) return cache[index];
      }

      if (direction === 'horizontal') return scrollArea.monthWidth;
      var monthStep = (0, _addMonths$1.default)(minDate, index);

      var _getMonthDisplayRange = (0, _utils$2.getMonthDisplayRange)(monthStep, _this.dateOptions),
          start = _getMonthDisplayRange.start,
          end = _getMonthDisplayRange.end;

      var isLongMonth = (0, _differenceInDays.default)(end, start, _this.dateOptions) + 1 > 7 * 5;
      return isLongMonth ? scrollArea.longMonthHeight : scrollArea.monthHeight;
    });

    _this.dateOptions = {
      locale: _props.locale
    };
    if (_props.weekStartsOn !== undefined) _this.dateOptions.weekStartsOn = _props.weekStartsOn;
    _this.styles = (0, _utils$2.generateStyles)([_styles$3.default, _props.classNames]);
    _this.listSizeCache = {};
    _this.isFirstRender = true;
    _this.state = {
      monthNames: _this.getMonthNames(),
      focusedDate: (0, _utils$2.calcFocusDate)(null, _props),
      drag: {
        status: false,
        range: {
          startDate: null,
          endDate: null
        },
        disablePreview: false
      },
      scrollArea: _this.calcScrollArea(_props)
    };
    return _this;
  }

  _createClass$4(Calendar, [{
    key: "getMonthNames",
    value: function getMonthNames() {
      var _this2 = this;

      return _toConsumableArray(Array(12).keys()).map(function (i) {
        return _this2.props.locale.localize.month(i);
      });
    }
  }, {
    key: "calcScrollArea",
    value: function calcScrollArea(props) {
      var direction = props.direction,
          months = props.months,
          scroll = props.scroll;
      if (!scroll.enabled) return {
        enabled: false
      };
      var longMonthHeight = scroll.longMonthHeight || scroll.monthHeight;

      if (direction === 'vertical') {
        return {
          enabled: true,
          monthHeight: scroll.monthHeight || 220,
          longMonthHeight: longMonthHeight || 260,
          calendarWidth: 'auto',
          calendarHeight: (scroll.calendarHeight || longMonthHeight || 240) * months
        };
      }

      return {
        enabled: true,
        monthWidth: scroll.monthWidth || 332,
        calendarWidth: (scroll.calendarWidth || scroll.monthWidth || 332) * months,
        monthHeight: longMonthHeight || 300,
        calendarHeight: longMonthHeight || 300
      };
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      if (this.props.scroll.enabled) {
        // prevent react-list's initial render focus problem
        setTimeout(function () {
          return _this3.focusToDate(_this3.state.focusedDate);
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var propMapper = {
        dateRange: 'ranges',
        date: 'date'
      };
      var targetProp = propMapper[this.props.displayMode];

      if (this.props[targetProp] !== prevProps[targetProp]) {
        this.updateShownDate(this.props);
      }

      if (prevProps.locale !== this.props.locale || prevProps.weekStartsOn !== this.props.weekStartsOn) {
        this.dateOptions = {
          locale: this.props.locale
        };
        if (this.props.weekStartsOn !== undefined) this.dateOptions.weekStartsOn = this.props.weekStartsOn;
        this.setState({
          monthNames: this.getMonthNames()
        });
      }

      if (!(0, _shallowEqual.shallowEqualObjects)(prevProps.scroll, this.props.scroll)) {
        this.setState({
          scrollArea: this.calcScrollArea(this.props)
        });
      }
    }
  }, {
    key: "renderWeekdays",
    value: function renderWeekdays() {
      var _this4 = this;

      var now = new Date();
      return /*#__PURE__*/_react$4.default.createElement("div", {
        className: this.styles.weekDays
      }, (0, _eachDayOfInterval.default)({
        start: (0, _startOfWeek$1.default)(now, this.dateOptions),
        end: (0, _endOfWeek$1.default)(now, this.dateOptions)
      }).map(function (day, i) {
        return /*#__PURE__*/_react$4.default.createElement("span", {
          className: _this4.styles.weekDay,
          key: i
        }, (0, _format.default)(day, _this4.props.weekdayDisplayFormat, _this4.dateOptions));
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var _this$props7 = this.props,
          showDateDisplay = _this$props7.showDateDisplay,
          onPreviewChange = _this$props7.onPreviewChange,
          scroll = _this$props7.scroll,
          direction = _this$props7.direction,
          disabledDates = _this$props7.disabledDates,
          disabledDay = _this$props7.disabledDay,
          maxDate = _this$props7.maxDate,
          minDate = _this$props7.minDate,
          rangeColors = _this$props7.rangeColors,
          color = _this$props7.color,
          navigatorRenderer = _this$props7.navigatorRenderer,
          className = _this$props7.className,
          preview = _this$props7.preview;
      var _this$state = this.state,
          scrollArea = _this$state.scrollArea,
          focusedDate = _this$state.focusedDate;
      var isVertical = direction === 'vertical';
      var monthAndYearRenderer = navigatorRenderer || this.renderMonthAndYear;
      var ranges = this.props.ranges.map(function (range, i) {
        return _objectSpread$4(_objectSpread$4({}, range), {}, {
          color: range.color || rangeColors[i] || color
        });
      });
      return /*#__PURE__*/_react$4.default.createElement("div", {
        className: (0, _classnames3.default)(this.styles.calendarWrapper, className),
        onMouseUp: function onMouseUp() {
          return _this5.setState({
            drag: {
              status: false,
              range: {}
            }
          });
        },
        onMouseLeave: function onMouseLeave() {
          _this5.setState({
            drag: {
              status: false,
              range: {}
            }
          });
        }
      }, showDateDisplay && this.renderDateDisplay(), monthAndYearRenderer(focusedDate, this.changeShownDate, this.props), scroll.enabled ? /*#__PURE__*/_react$4.default.createElement("div", null, isVertical && this.renderWeekdays(this.dateOptions), /*#__PURE__*/_react$4.default.createElement("div", {
        className: (0, _classnames3.default)(this.styles.infiniteMonths, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal),
        onMouseLeave: function onMouseLeave() {
          return onPreviewChange && onPreviewChange();
        },
        style: {
          width: scrollArea.calendarWidth + 11,
          height: scrollArea.calendarHeight + 11
        },
        onScroll: this.handleScroll
      }, /*#__PURE__*/_react$4.default.createElement(_reactList.default, {
        length: (0, _differenceInCalendarMonths.default)((0, _endOfMonth$1.default)(maxDate), (0, _addDays$2.default)((0, _startOfMonth$1.default)(minDate), -1), this.dateOptions),
        treshold: 500,
        type: "variable",
        ref: function ref(target) {
          return _this5.list = target;
        },
        itemSizeEstimator: this.estimateMonthSize,
        axis: isVertical ? 'y' : 'x',
        itemRenderer: function itemRenderer(index, key) {
          var monthStep = (0, _addMonths$1.default)(minDate, index);
          return /*#__PURE__*/_react$4.default.createElement(_Month.default, _extends$2({}, _this5.props, {
            onPreviewChange: onPreviewChange || _this5.updatePreview,
            preview: preview || _this5.state.preview,
            ranges: ranges,
            key: key,
            drag: _this5.state.drag,
            dateOptions: _this5.dateOptions,
            disabledDates: disabledDates,
            disabledDay: disabledDay,
            month: monthStep,
            onDragSelectionStart: _this5.onDragSelectionStart,
            onDragSelectionEnd: _this5.onDragSelectionEnd,
            onDragSelectionMove: _this5.onDragSelectionMove,
            onMouseLeave: function onMouseLeave() {
              return onPreviewChange && onPreviewChange();
            },
            styles: _this5.styles,
            style: isVertical ? {
              height: _this5.estimateMonthSize(index)
            } : {
              height: scrollArea.monthHeight,
              width: _this5.estimateMonthSize(index)
            },
            showMonthName: true,
            showWeekDays: !isVertical
          }));
        }
      }))) : /*#__PURE__*/_react$4.default.createElement("div", {
        className: (0, _classnames3.default)(this.styles.months, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal)
      }, new Array(this.props.months).fill(null).map(function (_, i) {
        var monthStep = (0, _addMonths$1.default)(_this5.state.focusedDate, i);

        if (_this5.props.calendarFocus === 'backwards') {
          monthStep = (0, _subMonths.default)(_this5.state.focusedDate, _this5.props.months - 1 - i);
        }

        return /*#__PURE__*/_react$4.default.createElement(_Month.default, _extends$2({}, _this5.props, {
          onPreviewChange: onPreviewChange || _this5.updatePreview,
          preview: preview || _this5.state.preview,
          ranges: ranges,
          key: i,
          drag: _this5.state.drag,
          dateOptions: _this5.dateOptions,
          disabledDates: disabledDates,
          disabledDay: disabledDay,
          month: monthStep,
          onDragSelectionStart: _this5.onDragSelectionStart,
          onDragSelectionEnd: _this5.onDragSelectionEnd,
          onDragSelectionMove: _this5.onDragSelectionMove,
          onMouseLeave: function onMouseLeave() {
            return onPreviewChange && onPreviewChange();
          },
          styles: _this5.styles,
          showWeekDays: !isVertical || i === 0,
          showMonthName: !isVertical || i > 0
        }));
      })));
    }
  }]);

  return Calendar;
}(_react$4.PureComponent);

Calendar.defaultProps = {
  showMonthArrow: true,
  showMonthAndYearPickers: true,
  disabledDates: [],
  disabledDay: function disabledDay() {},
  classNames: {},
  locale: _enUS.default,
  ranges: [],
  focusedRange: [0, 0],
  dateDisplayFormat: 'MMM d, yyyy',
  monthDisplayFormat: 'MMM yyyy',
  weekdayDisplayFormat: 'E',
  dayDisplayFormat: 'd',
  showDateDisplay: true,
  showPreview: true,
  displayMode: 'date',
  months: 1,
  color: '#3d91ff',
  scroll: {
    enabled: false
  },
  direction: 'vertical',
  maxDate: (0, _addYears.default)(new Date(), 20),
  minDate: (0, _addYears.default)(new Date(), -100),
  rangeColors: ['#3d91ff', '#3ecf8e', '#fed14c'],
  startDatePlaceholder: 'Early',
  endDatePlaceholder: 'Continuous',
  editableDateInputs: false,
  dragSelectionEnabled: true,
  fixedHeight: false,
  calendarFocus: 'forwards',
  preventSnapRefocus: false,
  ariaLabels: {}
};
Calendar.propTypes = {
  showMonthArrow: _propTypes$4.default.bool,
  showMonthAndYearPickers: _propTypes$4.default.bool,
  disabledDates: _propTypes$4.default.array,
  disabledDay: _propTypes$4.default.func,
  minDate: _propTypes$4.default.object,
  maxDate: _propTypes$4.default.object,
  date: _propTypes$4.default.object,
  onChange: _propTypes$4.default.func,
  onPreviewChange: _propTypes$4.default.func,
  onRangeFocusChange: _propTypes$4.default.func,
  classNames: _propTypes$4.default.object,
  locale: _propTypes$4.default.object,
  shownDate: _propTypes$4.default.object,
  onShownDateChange: _propTypes$4.default.func,
  ranges: _propTypes$4.default.arrayOf(_DayCell$2.rangeShape),
  preview: _propTypes$4.default.shape({
    startDate: _propTypes$4.default.object,
    endDate: _propTypes$4.default.object,
    color: _propTypes$4.default.string
  }),
  dateDisplayFormat: _propTypes$4.default.string,
  monthDisplayFormat: _propTypes$4.default.string,
  weekdayDisplayFormat: _propTypes$4.default.string,
  weekStartsOn: _propTypes$4.default.number,
  dayDisplayFormat: _propTypes$4.default.string,
  focusedRange: _propTypes$4.default.arrayOf(_propTypes$4.default.number),
  initialFocusedRange: _propTypes$4.default.arrayOf(_propTypes$4.default.number),
  months: _propTypes$4.default.number,
  className: _propTypes$4.default.string,
  showDateDisplay: _propTypes$4.default.bool,
  showPreview: _propTypes$4.default.bool,
  displayMode: _propTypes$4.default.oneOf(['dateRange', 'date']),
  color: _propTypes$4.default.string,
  updateRange: _propTypes$4.default.func,
  scroll: _propTypes$4.default.shape({
    enabled: _propTypes$4.default.bool,
    monthHeight: _propTypes$4.default.number,
    longMonthHeight: _propTypes$4.default.number,
    monthWidth: _propTypes$4.default.number,
    calendarWidth: _propTypes$4.default.number,
    calendarHeight: _propTypes$4.default.number
  }),
  direction: _propTypes$4.default.oneOf(['vertical', 'horizontal']),
  startDatePlaceholder: _propTypes$4.default.string,
  endDatePlaceholder: _propTypes$4.default.string,
  navigatorRenderer: _propTypes$4.default.func,
  rangeColors: _propTypes$4.default.arrayOf(_propTypes$4.default.string),
  editableDateInputs: _propTypes$4.default.bool,
  dragSelectionEnabled: _propTypes$4.default.bool,
  fixedHeight: _propTypes$4.default.bool,
  calendarFocus: _propTypes$4.default.string,
  preventSnapRefocus: _propTypes$4.default.bool,
  ariaLabels: _accessibility.ariaLabelsShape
};
var _default$4 = Calendar;
Calendar$1.default = _default$4;

function _typeof$3(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$3 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$3 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$3(obj);
}

Object.defineProperty(DateRange$1, "__esModule", {
  value: true
});
DateRange$1.default = void 0;

var _react$3 = _interopRequireWildcard$3(react.exports);

var _propTypes$3 = _interopRequireDefault$4(propTypes.exports);

var _Calendar = _interopRequireDefault$4(Calendar$1);

var _DayCell$1 = DayCell$1;

var _utils$1 = utils;

var _max = _interopRequireDefault$4(require$$5);

var _isWithinInterval = _interopRequireDefault$4(require$$6$1);

var _min = _interopRequireDefault$4(require$$7);

var _addDays$1 = _interopRequireDefault$4(require$$9);

var _differenceInCalendarDays$1 = _interopRequireDefault$4(require$$0);

var _isBefore = _interopRequireDefault$4(require$$10);

var _classnames$2 = _interopRequireDefault$4(classnames.exports);

var _styles$2 = _interopRequireDefault$4(styles$F);

function _interopRequireDefault$4(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache$3(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache$3 = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard$3(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof$3(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache$3(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}

function ownKeys$3(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$3(Object(source), true).forEach(function (key) {
        _defineProperty$4(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$3(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck$3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$3(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$3(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$3(Constructor, staticProps);
  return Constructor;
}

function _inherits$3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf$3(subClass, superClass);
}

function _setPrototypeOf$3(o, p) {
  _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$3(o, p);
}

function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf$3(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$3(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn$3(this, result);
  };
}

function _possibleConstructorReturn$3(self, call) {
  if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized$3(self);
}

function _assertThisInitialized$3(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf$3(o) {
  _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$3(o);
}

function _defineProperty$4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var DateRange = /*#__PURE__*/function (_Component) {
  _inherits$3(DateRange, _Component);

  var _super = _createSuper$3(DateRange);

  function DateRange(props, context) {
    var _this;

    _classCallCheck$3(this, DateRange);

    _this = _super.call(this, props, context);

    _defineProperty$4(_assertThisInitialized$3(_this), "calcNewSelection", function (value) {
      var isSingleValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var focusedRange = _this.props.focusedRange || _this.state.focusedRange;
      var _this$props = _this.props,
          ranges = _this$props.ranges,
          onChange = _this$props.onChange,
          maxDate = _this$props.maxDate,
          moveRangeOnFirstSelection = _this$props.moveRangeOnFirstSelection,
          retainEndDateOnFirstSelection = _this$props.retainEndDateOnFirstSelection,
          disabledDates = _this$props.disabledDates;
      var focusedRangeIndex = focusedRange[0];
      var selectedRange = ranges[focusedRangeIndex];
      if (!selectedRange || !onChange) return {};
      var startDate = selectedRange.startDate,
          endDate = selectedRange.endDate;
      var now = new Date();
      var nextFocusRange;

      if (!isSingleValue) {
        startDate = value.startDate;
        endDate = value.endDate;
      } else if (focusedRange[1] === 0) {
        // startDate selection
        var dayOffset = (0, _differenceInCalendarDays$1.default)(endDate || now, startDate);

        var calculateEndDate = function calculateEndDate() {
          if (moveRangeOnFirstSelection) {
            return (0, _addDays$1.default)(value, dayOffset);
          }

          if (retainEndDateOnFirstSelection) {
            if (!endDate || (0, _isBefore.default)(value, endDate)) {
              return endDate;
            }

            return value;
          }

          return value || now;
        };

        startDate = value;
        endDate = calculateEndDate();
        if (maxDate) endDate = (0, _min.default)([endDate, maxDate]);
        nextFocusRange = [focusedRange[0], 1];
      } else {
        endDate = value;
      } // reverse dates if startDate before endDate


      var isStartDateSelected = focusedRange[1] === 0;

      if ((0, _isBefore.default)(endDate, startDate)) {
        isStartDateSelected = !isStartDateSelected;
        var _ref = [endDate, startDate];
        startDate = _ref[0];
        endDate = _ref[1];
      }

      var inValidDatesWithinRange = disabledDates.filter(function (disabledDate) {
        return (0, _isWithinInterval.default)(disabledDate, {
          start: startDate,
          end: endDate
        });
      });

      if (inValidDatesWithinRange.length > 0) {
        if (isStartDateSelected) {
          startDate = (0, _addDays$1.default)((0, _max.default)(inValidDatesWithinRange), 1);
        } else {
          endDate = (0, _addDays$1.default)((0, _min.default)(inValidDatesWithinRange), -1);
        }
      }

      if (!nextFocusRange) {
        var nextFocusRangeIndex = (0, _utils$1.findNextRangeIndex)(_this.props.ranges, focusedRange[0]);
        nextFocusRange = [nextFocusRangeIndex, 0];
      }

      return {
        wasValid: !(inValidDatesWithinRange.length > 0),
        range: {
          startDate: startDate,
          endDate: endDate
        },
        nextFocusRange: nextFocusRange
      };
    });

    _defineProperty$4(_assertThisInitialized$3(_this), "setSelection", function (value, isSingleValue) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          ranges = _this$props2.ranges,
          onRangeFocusChange = _this$props2.onRangeFocusChange;
      var focusedRange = _this.props.focusedRange || _this.state.focusedRange;
      var focusedRangeIndex = focusedRange[0];
      var selectedRange = ranges[focusedRangeIndex];
      if (!selectedRange) return;

      var newSelection = _this.calcNewSelection(value, isSingleValue);

      onChange(_defineProperty$4({}, selectedRange.key || "range".concat(focusedRangeIndex + 1), _objectSpread$3(_objectSpread$3({}, selectedRange), newSelection.range)));

      _this.setState({
        focusedRange: newSelection.nextFocusRange,
        preview: null
      });

      onRangeFocusChange && onRangeFocusChange(newSelection.nextFocusRange);
    });

    _defineProperty$4(_assertThisInitialized$3(_this), "handleRangeFocusChange", function (focusedRange) {
      _this.setState({
        focusedRange: focusedRange
      });

      _this.props.onRangeFocusChange && _this.props.onRangeFocusChange(focusedRange);
    });

    _defineProperty$4(_assertThisInitialized$3(_this), "updatePreview", function (val) {
      var _ranges$focusedRange$;

      if (!val) {
        _this.setState({
          preview: null
        });

        return;
      }

      var _this$props3 = _this.props,
          rangeColors = _this$props3.rangeColors,
          ranges = _this$props3.ranges;
      var focusedRange = _this.props.focusedRange || _this.state.focusedRange;
      var color = ((_ranges$focusedRange$ = ranges[focusedRange[0]]) === null || _ranges$focusedRange$ === void 0 ? void 0 : _ranges$focusedRange$.color) || rangeColors[focusedRange[0]] || color;

      _this.setState({
        preview: _objectSpread$3(_objectSpread$3({}, val.range), {}, {
          color: color
        })
      });
    });

    _this.state = {
      focusedRange: props.initialFocusedRange || [(0, _utils$1.findNextRangeIndex)(props.ranges), 0],
      preview: null
    };
    _this.styles = (0, _utils$1.generateStyles)([_styles$2.default, props.classNames]);
    return _this;
  }

  _createClass$3(DateRange, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/_react$3.default.createElement(_Calendar.default, _extends$1({
        focusedRange: this.state.focusedRange,
        onRangeFocusChange: this.handleRangeFocusChange,
        preview: this.state.preview,
        onPreviewChange: function onPreviewChange(value) {
          _this2.updatePreview(value ? _this2.calcNewSelection(value) : null);
        }
      }, this.props, {
        displayMode: "dateRange",
        className: (0, _classnames$2.default)(this.styles.dateRangeWrapper, this.props.className),
        onChange: this.setSelection,
        updateRange: function updateRange(val) {
          return _this2.setSelection(val, false);
        },
        ref: function ref(target) {
          _this2.calendar = target;
        }
      }));
    }
  }]);

  return DateRange;
}(_react$3.Component);

DateRange.defaultProps = {
  classNames: {},
  ranges: [],
  moveRangeOnFirstSelection: false,
  retainEndDateOnFirstSelection: false,
  rangeColors: ['#3d91ff', '#3ecf8e', '#fed14c'],
  disabledDates: []
};
DateRange.propTypes = _objectSpread$3(_objectSpread$3({}, _Calendar.default.propTypes), {}, {
  onChange: _propTypes$3.default.func,
  onRangeFocusChange: _propTypes$3.default.func,
  className: _propTypes$3.default.string,
  ranges: _propTypes$3.default.arrayOf(_DayCell$1.rangeShape),
  moveRangeOnFirstSelection: _propTypes$3.default.bool,
  retainEndDateOnFirstSelection: _propTypes$3.default.bool
});
var _default$3 = DateRange;
DateRange$1.default = _default$3;

var DateRangePicker$1 = {};

var DefinedRange$1 = {};

var defaultRanges = {};

Object.defineProperty(defaultRanges, "__esModule", {
  value: true
});
defaultRanges.createStaticRanges = createStaticRanges;
defaultRanges.defaultInputRanges = defaultRanges.defaultStaticRanges = void 0;

var _differenceInCalendarDays = _interopRequireDefault$3(require$$0);

var _isSameDay = _interopRequireDefault$3(require$$1);

var _endOfWeek = _interopRequireDefault$3(require$$2);

var _startOfWeek = _interopRequireDefault$3(require$$3$1);

var _addMonths = _interopRequireDefault$3(require$$4);

var _endOfMonth = _interopRequireDefault$3(require$$5$2);

var _startOfMonth = _interopRequireDefault$3(require$$6);

var _startOfDay = _interopRequireDefault$3(require$$7$1);

var _endOfDay = _interopRequireDefault$3(require$$8$1);

var _addDays = _interopRequireDefault$3(require$$9);

function _interopRequireDefault$3(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$2(Object(source), true).forEach(function (key) {
        _defineProperty$3(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty$3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineds = {
  startOfWeek: (0, _startOfWeek.default)(new Date()),
  endOfWeek: (0, _endOfWeek.default)(new Date()),
  startOfLastWeek: (0, _startOfWeek.default)((0, _addDays.default)(new Date(), -7)),
  endOfLastWeek: (0, _endOfWeek.default)((0, _addDays.default)(new Date(), -7)),
  startOfToday: (0, _startOfDay.default)(new Date()),
  endOfToday: (0, _endOfDay.default)(new Date()),
  startOfYesterday: (0, _startOfDay.default)((0, _addDays.default)(new Date(), -1)),
  endOfYesterday: (0, _endOfDay.default)((0, _addDays.default)(new Date(), -1)),
  startOfMonth: (0, _startOfMonth.default)(new Date()),
  endOfMonth: (0, _endOfMonth.default)(new Date()),
  startOfLastMonth: (0, _startOfMonth.default)((0, _addMonths.default)(new Date(), -1)),
  endOfLastMonth: (0, _endOfMonth.default)((0, _addMonths.default)(new Date(), -1))
};
var staticRangeHandler = {
  range: {},
  isSelected: function isSelected(range) {
    var definedRange = this.range();
    return (0, _isSameDay.default)(range.startDate, definedRange.startDate) && (0, _isSameDay.default)(range.endDate, definedRange.endDate);
  }
};

function createStaticRanges(ranges) {
  return ranges.map(function (range) {
    return _objectSpread$2(_objectSpread$2({}, staticRangeHandler), range);
  });
}

var defaultStaticRanges = createStaticRanges([{
  label: 'Today',
  range: function range() {
    return {
      startDate: defineds.startOfToday,
      endDate: defineds.endOfToday
    };
  }
}, {
  label: 'Yesterday',
  range: function range() {
    return {
      startDate: defineds.startOfYesterday,
      endDate: defineds.endOfYesterday
    };
  }
}, {
  label: 'This Week',
  range: function range() {
    return {
      startDate: defineds.startOfWeek,
      endDate: defineds.endOfWeek
    };
  }
}, {
  label: 'Last Week',
  range: function range() {
    return {
      startDate: defineds.startOfLastWeek,
      endDate: defineds.endOfLastWeek
    };
  }
}, {
  label: 'This Month',
  range: function range() {
    return {
      startDate: defineds.startOfMonth,
      endDate: defineds.endOfMonth
    };
  }
}, {
  label: 'Last Month',
  range: function range() {
    return {
      startDate: defineds.startOfLastMonth,
      endDate: defineds.endOfLastMonth
    };
  }
}]);
defaultRanges.defaultStaticRanges = defaultStaticRanges;
var defaultInputRanges = [{
  label: 'days up to today',
  range: function range(value) {
    return {
      startDate: (0, _addDays.default)(defineds.startOfToday, (Math.max(Number(value), 1) - 1) * -1),
      endDate: defineds.endOfToday
    };
  },
  getCurrentValue: function getCurrentValue(range) {
    if (!(0, _isSameDay.default)(range.endDate, defineds.endOfToday)) return '-';
    if (!range.startDate) return '∞';
    return (0, _differenceInCalendarDays.default)(defineds.endOfToday, range.startDate) + 1;
  }
}, {
  label: 'days starting today',
  range: function range(value) {
    var today = new Date();
    return {
      startDate: today,
      endDate: (0, _addDays.default)(today, Math.max(Number(value), 1) - 1)
    };
  },
  getCurrentValue: function getCurrentValue(range) {
    if (!(0, _isSameDay.default)(range.startDate, defineds.startOfToday)) return '-';
    if (!range.endDate) return '∞';
    return (0, _differenceInCalendarDays.default)(range.endDate, defineds.startOfToday) + 1;
  }
}];
defaultRanges.defaultInputRanges = defaultInputRanges;

var InputRangeField$1 = {};

function _typeof$2(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$2 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$2 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$2(obj);
}

Object.defineProperty(InputRangeField$1, "__esModule", {
  value: true
});
InputRangeField$1.default = void 0;

var _react$2 = _interopRequireWildcard$2(react.exports);

var _propTypes$2 = _interopRequireDefault$2(propTypes.exports);

function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache$2(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache$2 = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard$2(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof$2(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache$2(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _classCallCheck$2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$2(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$2(Constructor, staticProps);
  return Constructor;
}

function _inherits$2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf$2(subClass, superClass);
}

function _setPrototypeOf$2(o, p) {
  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$2(o, p);
}

function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf$2(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$2(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn$2(this, result);
  };
}

function _possibleConstructorReturn$2(self, call) {
  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized$2(self);
}

function _assertThisInitialized$2(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf$2(o) {
  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$2(o);
}

function _defineProperty$2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var MIN = 0;
var MAX = 99999;

var InputRangeField = /*#__PURE__*/function (_Component) {
  _inherits$2(InputRangeField, _Component);

  var _super = _createSuper$2(InputRangeField);

  function InputRangeField(props, context) {
    var _this;

    _classCallCheck$2(this, InputRangeField);

    _this = _super.call(this, props, context);

    _defineProperty$2(_assertThisInitialized$2(_this), "onChange", function (e) {
      var onChange = _this.props.onChange;
      var value = parseInt(e.target.value, 10);
      value = isNaN(value) ? 0 : Math.max(Math.min(MAX, value), MIN);
      onChange(value);
    });

    return _this;
  }

  _createClass$2(InputRangeField, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var _this$props = this.props,
          value = _this$props.value,
          label = _this$props.label,
          placeholder = _this$props.placeholder;
      return value !== nextProps.value || label !== nextProps.label || placeholder !== nextProps.placeholder;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          label = _this$props2.label,
          placeholder = _this$props2.placeholder,
          value = _this$props2.value,
          styles = _this$props2.styles,
          onBlur = _this$props2.onBlur,
          onFocus = _this$props2.onFocus;
      return /*#__PURE__*/_react$2.default.createElement("div", {
        className: styles.inputRange
      }, /*#__PURE__*/_react$2.default.createElement("input", {
        className: styles.inputRangeInput,
        placeholder: placeholder,
        value: value,
        min: MIN,
        max: MAX,
        onChange: this.onChange,
        onFocus: onFocus,
        onBlur: onBlur
      }), /*#__PURE__*/_react$2.default.createElement("span", {
        className: styles.inputRangeLabel
      }, label));
    }
  }]);

  return InputRangeField;
}(_react$2.Component);

InputRangeField.propTypes = {
  value: _propTypes$2.default.oneOfType([_propTypes$2.default.string, _propTypes$2.default.number]),
  label: _propTypes$2.default.oneOfType([_propTypes$2.default.element, _propTypes$2.default.node]).isRequired,
  placeholder: _propTypes$2.default.string,
  styles: _propTypes$2.default.shape({
    inputRange: _propTypes$2.default.string,
    inputRangeInput: _propTypes$2.default.string,
    inputRangeLabel: _propTypes$2.default.string
  }).isRequired,
  onBlur: _propTypes$2.default.func.isRequired,
  onFocus: _propTypes$2.default.func.isRequired,
  onChange: _propTypes$2.default.func.isRequired
};
InputRangeField.defaultProps = {
  value: '',
  placeholder: '-'
};
var _default$2 = InputRangeField;
InputRangeField$1.default = _default$2;

function _typeof$1(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$1 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$1(obj);
}

Object.defineProperty(DefinedRange$1, "__esModule", {
  value: true
});
DefinedRange$1.default = void 0;

var _react$1 = _interopRequireWildcard$1(react.exports);

var _propTypes$1 = _interopRequireDefault$1(propTypes.exports);

var _styles$1 = _interopRequireDefault$1(styles$F);

var _defaultRanges = defaultRanges;

var _DayCell = DayCell$1;

var _InputRangeField = _interopRequireDefault$1(InputRangeField$1);

var _classnames$1 = _interopRequireDefault$1(classnames.exports);

function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache$1(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache$1 = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard$1(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof$1(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache$1(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  return Constructor;
}

function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf$1(subClass, superClass);
}

function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$1(o, p);
}

function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf$1(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$1(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn$1(this, result);
  };
}

function _possibleConstructorReturn$1(self, call) {
  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized$1(self);
}

function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$1(o);
}

function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var DefinedRange = /*#__PURE__*/function (_Component) {
  _inherits$1(DefinedRange, _Component);

  var _super = _createSuper$1(DefinedRange);

  function DefinedRange(props) {
    var _this;

    _classCallCheck$1(this, DefinedRange);

    _this = _super.call(this, props);

    _defineProperty$1(_assertThisInitialized$1(_this), "handleRangeChange", function (range) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          ranges = _this$props.ranges,
          focusedRange = _this$props.focusedRange;
      var selectedRange = ranges[focusedRange[0]];
      if (!onChange || !selectedRange) return;
      onChange(_defineProperty$1({}, selectedRange.key || "range".concat(focusedRange[0] + 1), _objectSpread$1(_objectSpread$1({}, selectedRange), range)));
    });

    _this.state = {
      rangeOffset: 0,
      focusedInput: -1
    };
    return _this;
  }

  _createClass$1(DefinedRange, [{
    key: "getRangeOptionValue",
    value: function getRangeOptionValue(option) {
      var _this$props2 = this.props,
          _this$props2$ranges = _this$props2.ranges,
          ranges = _this$props2$ranges === void 0 ? [] : _this$props2$ranges,
          _this$props2$focusedR = _this$props2.focusedRange,
          focusedRange = _this$props2$focusedR === void 0 ? [] : _this$props2$focusedR;

      if (typeof option.getCurrentValue !== 'function') {
        return '';
      }

      var selectedRange = ranges[focusedRange[0]] || {};
      return option.getCurrentValue(selectedRange) || '';
    }
  }, {
    key: "getSelectedRange",
    value: function getSelectedRange(ranges, staticRange) {
      var focusedRangeIndex = ranges.findIndex(function (range) {
        if (!range.startDate || !range.endDate || range.disabled) return false;
        return staticRange.isSelected(range);
      });
      var selectedRange = ranges[focusedRangeIndex];
      return {
        selectedRange: selectedRange,
        focusedRangeIndex: focusedRangeIndex
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          headerContent = _this$props3.headerContent,
          footerContent = _this$props3.footerContent,
          onPreviewChange = _this$props3.onPreviewChange,
          inputRanges = _this$props3.inputRanges,
          staticRanges = _this$props3.staticRanges,
          ranges = _this$props3.ranges,
          renderStaticRangeLabel = _this$props3.renderStaticRangeLabel,
          rangeColors = _this$props3.rangeColors,
          className = _this$props3.className;
      return /*#__PURE__*/_react$1.default.createElement("div", {
        className: (0, _classnames$1.default)(_styles$1.default.definedRangesWrapper, className)
      }, headerContent, /*#__PURE__*/_react$1.default.createElement("div", {
        className: _styles$1.default.staticRanges
      }, staticRanges.map(function (staticRange, i) {
        var _this2$getSelectedRan = _this2.getSelectedRange(ranges, staticRange),
            selectedRange = _this2$getSelectedRan.selectedRange,
            focusedRangeIndex = _this2$getSelectedRan.focusedRangeIndex;

        var labelContent;

        if (staticRange.hasCustomRendering) {
          labelContent = renderStaticRangeLabel(staticRange);
        } else {
          labelContent = staticRange.label;
        }

        return /*#__PURE__*/_react$1.default.createElement("button", {
          type: "button",
          className: (0, _classnames$1.default)(_styles$1.default.staticRange, _defineProperty$1({}, _styles$1.default.staticRangeSelected, Boolean(selectedRange))),
          style: {
            color: selectedRange ? selectedRange.color || rangeColors[focusedRangeIndex] : null
          },
          key: i,
          onClick: function onClick() {
            return _this2.handleRangeChange(staticRange.range(_this2.props));
          },
          onFocus: function onFocus() {
            return onPreviewChange && onPreviewChange(staticRange.range(_this2.props));
          },
          onMouseOver: function onMouseOver() {
            return onPreviewChange && onPreviewChange(staticRange.range(_this2.props));
          },
          onMouseLeave: function onMouseLeave() {
            onPreviewChange && onPreviewChange();
          }
        }, /*#__PURE__*/_react$1.default.createElement("span", {
          tabIndex: -1,
          className: _styles$1.default.staticRangeLabel
        }, labelContent));
      })), /*#__PURE__*/_react$1.default.createElement("div", {
        className: _styles$1.default.inputRanges
      }, inputRanges.map(function (rangeOption, i) {
        return /*#__PURE__*/_react$1.default.createElement(_InputRangeField.default, {
          key: i,
          styles: _styles$1.default,
          label: rangeOption.label,
          onFocus: function onFocus() {
            return _this2.setState({
              focusedInput: i,
              rangeOffset: 0
            });
          },
          onBlur: function onBlur() {
            return _this2.setState({
              rangeOffset: 0
            });
          },
          onChange: function onChange(value) {
            return _this2.handleRangeChange(rangeOption.range(value, _this2.props));
          },
          value: _this2.getRangeOptionValue(rangeOption)
        });
      })), footerContent);
    }
  }]);

  return DefinedRange;
}(_react$1.Component);

DefinedRange.propTypes = {
  inputRanges: _propTypes$1.default.array,
  staticRanges: _propTypes$1.default.array,
  ranges: _propTypes$1.default.arrayOf(_DayCell.rangeShape),
  focusedRange: _propTypes$1.default.arrayOf(_propTypes$1.default.number),
  onPreviewChange: _propTypes$1.default.func,
  onChange: _propTypes$1.default.func,
  footerContent: _propTypes$1.default.any,
  headerContent: _propTypes$1.default.any,
  rangeColors: _propTypes$1.default.arrayOf(_propTypes$1.default.string),
  className: _propTypes$1.default.string,
  renderStaticRangeLabel: _propTypes$1.default.func
};
DefinedRange.defaultProps = {
  inputRanges: _defaultRanges.defaultInputRanges,
  staticRanges: _defaultRanges.defaultStaticRanges,
  ranges: [],
  rangeColors: ['#3d91ff', '#3ecf8e', '#fed14c'],
  focusedRange: [0, 0]
};
var _default$1 = DefinedRange;
DefinedRange$1.default = _default$1;

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(DateRangePicker$1, "__esModule", {
  value: true
});
DateRangePicker$1.default = void 0;

var _react = _interopRequireWildcard(react.exports);

var _propTypes = _interopRequireDefault(propTypes.exports);

var _DateRange = _interopRequireDefault(DateRange$1);

var _DefinedRange = _interopRequireDefault(DefinedRange$1);

var _utils = utils;

var _classnames = _interopRequireDefault(classnames.exports);

var _styles = _interopRequireDefault(styles$F);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var DateRangePicker = /*#__PURE__*/function (_Component) {
  _inherits(DateRangePicker, _Component);

  var _super = _createSuper(DateRangePicker);

  function DateRangePicker(props) {
    var _this;

    _classCallCheck(this, DateRangePicker);

    _this = _super.call(this, props);
    _this.state = {
      focusedRange: [(0, _utils.findNextRangeIndex)(props.ranges), 0]
    };
    _this.styles = (0, _utils.generateStyles)([_styles.default, props.classNames]);
    return _this;
  }

  _createClass(DateRangePicker, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var focusedRange = this.state.focusedRange;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)(this.styles.dateRangePickerWrapper, this.props.className)
      }, /*#__PURE__*/_react.default.createElement(_DefinedRange.default, _extends({
        focusedRange: focusedRange,
        onPreviewChange: function onPreviewChange(value) {
          return _this2.dateRange.updatePreview(value ? _this2.dateRange.calcNewSelection(value, typeof value === 'string') : null);
        }
      }, this.props, {
        range: this.props.ranges[focusedRange[0]],
        className: undefined
      })), /*#__PURE__*/_react.default.createElement(_DateRange.default, _extends({
        onRangeFocusChange: function onRangeFocusChange(focusedRange) {
          return _this2.setState({
            focusedRange: focusedRange
          });
        },
        focusedRange: focusedRange
      }, this.props, {
        ref: function ref(t) {
          return _this2.dateRange = t;
        },
        className: undefined
      })));
    }
  }]);

  return DateRangePicker;
}(_react.Component);

DateRangePicker.defaultProps = {};
DateRangePicker.propTypes = _objectSpread(_objectSpread(_objectSpread({}, _DateRange.default.propTypes), _DefinedRange.default.propTypes), {}, {
  className: _propTypes.default.string
});
var _default = DateRangePicker;
DateRangePicker$1.default = _default;

(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "DateRange", {
	  enumerable: true,
	  get: function get() {
	    return _DateRange.default;
	  }
	});
	Object.defineProperty(exports, "Calendar", {
	  enumerable: true,
	  get: function get() {
	    return _Calendar.default;
	  }
	});
	Object.defineProperty(exports, "DateRangePicker", {
	  enumerable: true,
	  get: function get() {
	    return _DateRangePicker.default;
	  }
	});
	Object.defineProperty(exports, "DefinedRange", {
	  enumerable: true,
	  get: function get() {
	    return _DefinedRange.default;
	  }
	});
	Object.defineProperty(exports, "defaultInputRanges", {
	  enumerable: true,
	  get: function get() {
	    return _defaultRanges.defaultInputRanges;
	  }
	});
	Object.defineProperty(exports, "defaultStaticRanges", {
	  enumerable: true,
	  get: function get() {
	    return _defaultRanges.defaultStaticRanges;
	  }
	});
	Object.defineProperty(exports, "createStaticRanges", {
	  enumerable: true,
	  get: function get() {
	    return _defaultRanges.createStaticRanges;
	  }
	});

	var _DateRange = _interopRequireDefault(DateRange$1);

	var _Calendar = _interopRequireDefault(Calendar$1);

	var _DateRangePicker = _interopRequireDefault(DateRangePicker$1);

	var _DefinedRange = _interopRequireDefault(DefinedRange$1);

	var _defaultRanges = defaultRanges;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}
} (dist$1));

// See issue: https://github.com/date-fns/date-fns/issues/376

function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {
  requiredArgs(2, arguments);
  var dateLeftStartOfWeek = startOfUTCWeek(dirtyDateLeft, options);
  var dateRightStartOfWeek = startOfUTCWeek(dirtyDateRight, options);
  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
}

function declensionGroup(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }

  var rem100 = count % 100; // ends with 11-20

  if (rem100 <= 20 && rem100 > 10) {
    return scheme.other;
  }

  var rem10 = rem100 % 10; // ends with 2, 3, 4

  if (rem10 >= 2 && rem10 <= 4) {
    return scheme.twoFour;
  }

  return scheme.other;
}

function declension(scheme, count, time) {
  time = time || 'regular';
  var group = declensionGroup(scheme, count);
  var finalText = group[time] || group;
  return finalText.replace('{{count}}', count);
}

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      regular: 'mniej niż sekunda',
      past: 'mniej niż sekundę',
      future: 'mniej niż sekundę'
    },
    twoFour: 'mniej niż {{count}} sekundy',
    other: 'mniej niż {{count}} sekund'
  },
  xSeconds: {
    one: {
      regular: 'sekunda',
      past: 'sekundę',
      future: 'sekundę'
    },
    twoFour: '{{count}} sekundy',
    other: '{{count}} sekund'
  },
  halfAMinute: {
    one: 'pół minuty',
    twoFour: 'pół minuty',
    other: 'pół minuty'
  },
  lessThanXMinutes: {
    one: {
      regular: 'mniej niż minuta',
      past: 'mniej niż minutę',
      future: 'mniej niż minutę'
    },
    twoFour: 'mniej niż {{count}} minuty',
    other: 'mniej niż {{count}} minut'
  },
  xMinutes: {
    one: {
      regular: 'minuta',
      past: 'minutę',
      future: 'minutę'
    },
    twoFour: '{{count}} minuty',
    other: '{{count}} minut'
  },
  aboutXHours: {
    one: {
      regular: 'około godziny',
      past: 'około godziny',
      future: 'około godzinę'
    },
    twoFour: 'około {{count}} godziny',
    other: 'około {{count}} godzin'
  },
  xHours: {
    one: {
      regular: 'godzina',
      past: 'godzinę',
      future: 'godzinę'
    },
    twoFour: '{{count}} godziny',
    other: '{{count}} godzin'
  },
  xDays: {
    one: {
      regular: 'dzień',
      past: 'dzień',
      future: '1 dzień'
    },
    twoFour: '{{count}} dni',
    other: '{{count}} dni'
  },
  aboutXWeeks: {
    one: 'około tygodnia',
    twoFour: 'około {{count}} tygodni',
    other: 'około {{count}} tygodni'
  },
  xWeeks: {
    one: 'tydzień',
    twoFour: '{{count}} tygodnie',
    other: '{{count}} tygodni'
  },
  aboutXMonths: {
    one: 'około miesiąc',
    twoFour: 'około {{count}} miesiące',
    other: 'około {{count}} miesięcy'
  },
  xMonths: {
    one: 'miesiąc',
    twoFour: '{{count}} miesiące',
    other: '{{count}} miesięcy'
  },
  aboutXYears: {
    one: 'około rok',
    twoFour: 'około {{count}} lata',
    other: 'około {{count}} lat'
  },
  xYears: {
    one: 'rok',
    twoFour: '{{count}} lata',
    other: '{{count}} lat'
  },
  overXYears: {
    one: 'ponad rok',
    twoFour: 'ponad {{count}} lata',
    other: 'ponad {{count}} lat'
  },
  almostXYears: {
    one: 'prawie rok',
    twoFour: 'prawie {{count}} lata',
    other: 'prawie {{count}} lat'
  }
};
function formatDistance(token, count, options) {
  options = options || {};
  var scheme = formatDistanceLocale[token];

  if (!options.addSuffix) {
    return declension(scheme, count);
  }

  if (options.comparison > 0) {
    return 'za ' + declension(scheme, count, 'future');
  } else {
    return declension(scheme, count, 'past') + ' temu';
  }
}

var dateFormats = {
  full: 'EEEE, do MMMM y',
  long: 'do MMMM y',
  medium: 'do MMM y',
  short: 'dd.MM.y'
};
var timeFormats = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
var formatLong$1 = formatLong;

var adjectivesLastWeek = {
  masculine: 'ostatni',
  feminine: 'ostatnia'
};
var adjectivesThisWeek = {
  masculine: 'ten',
  feminine: 'ta'
};
var adjectivesNextWeek = {
  masculine: 'następny',
  feminine: 'następna'
};
var dayGrammaticalGender = {
  0: 'feminine',
  1: 'masculine',
  2: 'masculine',
  3: 'feminine',
  4: 'masculine',
  5: 'masculine',
  6: 'feminine'
};

function getAdjectives(token, date, baseDate, options) {
  if (isSameUTCWeek(date, baseDate, options)) {
    return adjectivesThisWeek;
  } else if (token === 'lastWeek') {
    return adjectivesLastWeek;
  } else if (token === 'nextWeek') {
    return adjectivesNextWeek;
  } else {
    throw new Error("Cannot determine adjectives for token ".concat(token));
  }
}

function getAdjective(token, date, baseDate, options) {
  var day = date.getUTCDay();
  var adjectives = getAdjectives(token, date, baseDate, options);
  var grammaticalGender = dayGrammaticalGender[day];
  return adjectives[grammaticalGender];
}

function dayAndTimeWithAdjective(token, date, baseDate, options) {
  var adjective = getAdjective(token, date, baseDate, options);
  return "'".concat(adjective, "' eeee 'o' p");
}

var formatRelativeLocale = {
  lastWeek: dayAndTimeWithAdjective,
  yesterday: "'wczoraj o' p",
  today: "'dzisiaj o' p",
  tomorrow: "'jutro o' p",
  nextWeek: dayAndTimeWithAdjective,
  other: 'P'
};
function formatRelative(token, date, baseDate, options) {
  var format = formatRelativeLocale[token];

  if (typeof format === 'function') {
    return format(token, date, baseDate, options);
  }

  return format;
}

function ordinalNumber(dirtyNumber) {
  var number = Number(dirtyNumber);
  return String(number);
}

var eraValues = {
  narrow: ['p.n.e.', 'n.e.'],
  abbreviated: ['p.n.e.', 'n.e.'],
  wide: ['przed naszą erą', 'naszej ery']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['I kw.', 'II kw.', 'III kw.', 'IV kw.'],
  wide: ['I kwartał', 'II kwartał', 'III kwartał', 'IV kwartał']
};
var monthValues = {
  narrow: ['S', 'L', 'M', 'K', 'M', 'C', 'L', 'S', 'W', 'P', 'L', 'G'],
  abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru'],
  wide: ['styczeń', 'luty', 'marzec', 'kwiecień', 'maj', 'czerwiec', 'lipiec', 'sierpień', 'wrzesień', 'październik', 'listopad', 'grudzień']
};
var monthFormattingValues = {
  narrow: ['s', 'l', 'm', 'k', 'm', 'c', 'l', 's', 'w', 'p', 'l', 'g'],
  abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru'],
  wide: ['stycznia', 'lutego', 'marca', 'kwietnia', 'maja', 'czerwca', 'lipca', 'sierpnia', 'września', 'października', 'listopada', 'grudnia']
};
var dayValues = {
  narrow: ['N', 'P', 'W', 'Ś', 'C', 'P', 'S'],
  short: ['nie', 'pon', 'wto', 'śro', 'czw', 'pią', 'sob'],
  abbreviated: ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'],
  wide: ['niedziela', 'poniedziałek', 'wtorek', 'środa', 'czwartek', 'piątek', 'sobota']
};
var dayFormattingValues = {
  narrow: ['n', 'p', 'w', 'ś', 'c', 'p', 's'],
  short: ['nie', 'pon', 'wto', 'śro', 'czw', 'pią', 'sob'],
  abbreviated: ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'],
  wide: ['niedziela', 'poniedziałek', 'wtorek', 'środa', 'czwartek', 'piątek', 'sobota']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'półn.',
    noon: 'poł',
    morning: 'rano',
    afternoon: 'popoł.',
    evening: 'wiecz.',
    night: 'noc'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'północ',
    noon: 'południe',
    morning: 'rano',
    afternoon: 'popołudnie',
    evening: 'wieczór',
    night: 'noc'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'północ',
    noon: 'południe',
    morning: 'rano',
    afternoon: 'popołudnie',
    evening: 'wieczór',
    night: 'noc'
  }
};
var dayPeriodFormattingValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'o półn.',
    noon: 'w poł.',
    morning: 'rano',
    afternoon: 'po poł.',
    evening: 'wiecz.',
    night: 'w nocy'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o północy',
    noon: 'w południe',
    morning: 'rano',
    afternoon: 'po południu',
    evening: 'wieczorem',
    night: 'w nocy'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o północy',
    noon: 'w południe',
    morning: 'rano',
    afternoon: 'po południu',
    evening: 'wieczorem',
    night: 'w nocy'
  }
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide',
    formattingValues: monthFormattingValues,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide',
    formattingValues: dayFormattingValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: dayPeriodFormattingValues,
    defaultFormattingWidth: 'wide'
  })
};
var localize$1 = localize;

var matchOrdinalNumberPattern = /^(\d+)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  wide: /^(przed\s*nasz(ą|a)\s*er(ą|a)|naszej\s*ery)/i
};
var parseEraPatterns = {
  any: [/^p/i, /^n/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
  wide: /^(I|II|III|IV)\s*kwarta(ł|l)/i
};
var parseQuarterPatterns = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/^I kw/i, /^II kw/i, /^III kw/i, /^IV kw/i]
};
var matchMonthPatterns = {
  narrow: /^[slmkcwpg]/i,
  abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(ź|z)|lis|gru)/i,
  wide: /^(stycznia|stycze(ń|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(ń|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(ń|n)|wrze(ś|s)nia|wrzesie(ń|n)|pa(ź|z)dziernika|pa(ź|z)dziernik|listopada|listopad|grudnia|grudzie(ń|n))/i
};
var parseMonthPatterns = {
  narrow: [/^s/i, /^l/i, /^m/i, /^k/i, /^m/i, /^c/i, /^l/i, /^s/i, /^w/i, /^p/i, /^l/i, /^g/i],
  any: [/^st/i, /^lu/i, /^mar/i, /^k/i, /^maj/i, /^c/i, /^lip/i, /^si/i, /^w/i, /^p/i, /^lis/i, /^g/i]
};
var matchDayPatterns = {
  narrow: /^[npwścs]/i,
  short: /^(nie|pon|wto|(ś|s)ro|czw|pi(ą|a)|sob)/i,
  abbreviated: /^(niedz|pon|wt|(ś|s)r|czw|pt|sob)\.?/i,
  wide: /^(niedziela|poniedzia(ł|l)ek|wtorek|(ś|s)roda|czwartek|pi(ą|a)tek|sobota)/i
};
var parseDayPatterns = {
  narrow: [/^n/i, /^p/i, /^w/i, /^ś/i, /^c/i, /^p/i, /^s/i],
  abbreviated: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pt/i, /^so/i],
  any: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pi/i, /^so/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(^a$|^p$|pó(ł|l)n\.?|o\s*pó(ł|l)n\.?|po(ł|l)\.?|w\s*po(ł|l)\.?|po\s*po(ł|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
  any: /^(am|pm|pó(ł|l)noc|o\s*pó(ł|l)nocy|po(ł|l)udnie|w\s*po(ł|l)udnie|popo(ł|l)udnie|po\s*po(ł|l)udniu|rano|wieczór|wieczorem|noc|w\s*nocy)/i
};
var parseDayPeriodPatterns = {
  narrow: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /pó(ł|l)n/i,
    noon: /po(ł|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(ł|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  },
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /pó(ł|l)n/i,
    noon: /po(ł|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(ł|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
var match$1 = match;

/**
 * @type {Locale}
 * @category Locales
 * @summary Polish locale.
 * @language Polish
 * @iso-639-2 pol
 * @author Mateusz Derks [@ertrzyiks]{@link https://github.com/ertrzyiks}
 * @author Just RAG [@justrag]{@link https://github.com/justrag}
 * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Mateusz Tokarski [@mutisz]{@link https://github.com/mutisz}
 */

var locale = {
  code: 'pl',
  formatDistance: formatDistance,
  formatLong: formatLong$1,
  formatRelative: formatRelative,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};
var pl = locale;

const getLanguage = typeof document !== `undefined` && document.documentElement.lang || 'en';

/**
 * Date Time Picker - stateless presentational component
 * this component is a wrapper for react-date-range calendar
 * we modify ui and add handler to confirm date pick
 * @param {object} props - props
 * @param {function} props.setDate - date handler
 * @param {string} props.minDate - defines minimum date - disabled earlier dates
 * @param {object} props.i18n
 * @param {date} props.maxDate - defines maximum date - disabled later dates (Calendar)
 * @param {bool} props.oneDatePicker - should render picker for one date - disabled date ranges
 * @param {date} props.selectedDateCalendar - defines selected date for calendar
 * @param {bool} props.showMonthAndYearPickers - should render select list for month and year
 */

const DateTimePicker = ({
  setDate,
  minDate,
  maxDate,
  oneDatePicker,
  selectedDateCalendar,
  showMonthAndYearPickers,
  i18n
}) => {
  const [state, setState] = react.exports.useState([{
    startDate: getAgoDate(7),
    endDate: getTodayDate(),
    key: 'selection'
  }]);

  const addElements = () => {
    document.querySelector('.rdrNextButton i').classList.add('fas', 'fa-arrow-right');
    document.querySelector('.rdrPprevButton i').classList.add('fas', 'fa-arrow-left');

    if (showMonthAndYearPickers) {
      const monthArrow = document.createElement('i');
      const yearArrow = document.createElement('i');
      monthArrow.classList.add('fas', 'fa-caret-down');
      yearArrow.classList.add('fas', 'fa-caret-down');
      document.querySelector('.rdrMonthPicker').append(monthArrow);
      document.querySelector('.rdrYearPicker').append(yearArrow);
    }
  };

  react.exports.useEffect(() => {
    addElements();
  }, []);
  const handleApply = react.exports.useCallback(() => setDate(...state));

  const handleChange = item => setState([item.selection]);

  return /*#__PURE__*/React.createElement("div", {
    className: "react-datetimepicker"
  }, oneDatePicker ? /*#__PURE__*/React.createElement(dist$1.Calendar, {
    date: selectedDateCalendar || new Date(),
    onChange: setDate,
    locale: getLanguage === 'pl' ? pl : enUS,
    minDate: minDate ? new Date(minDate) : undefined,
    maxDate: maxDate,
    color: '#EDECEC',
    showMonthAndYearPickers: showMonthAndYearPickers,
    direction: "horizontal"
  }) : /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement(dist$1.DateRange, {
    locale: getLanguage === 'pl' ? pl : enUS,
    onChange: handleChange,
    showSelectionPreview: true,
    moveRangeOnFirstSelection: false,
    rangeColors: ['#EDECEC'],
    months: 1,
    ranges: state,
    showDateDisplay: false,
    direction: "horizontal",
    weekStartsOn: 1,
    maxDate: new Date(),
    minDate: minDate ? new Date(minDate) : undefined,
    showMonthAndYearPickers: showMonthAndYearPickers
  }), /*#__PURE__*/React.createElement(Button$1, {
    onClick: handleApply,
    size: "tiny",
    "data-testid": "apply-button"
  }, i18n.apply)));
};

DateTimePicker.displayName = 'DateTimePicker';
DateTimePicker.propTypes = {
  setDate: propTypes.exports.func.isRequired,
  minDate: propTypes.exports.string,
  maxDate: propTypes.exports.instanceOf(Date),
  oneDatePicker: propTypes.exports.bool,
  selectedDateCalendar: propTypes.exports.instanceOf(Date),
  showMonthAndYearPickers: propTypes.exports.bool,
  i18n: propTypes.exports.shape({
    apply: propTypes.exports.string
  })
};
DateTimePicker.defaultProps = {
  minDate: null,
  maxDate: undefined,
  oneDatePicker: false,
  showMonthAndYearPickers: true,
  i18n: {}
};

var styles$E = {"text--truncate":"Divider-module_text--truncate__o6509","divider":"Divider-module_divider__uz6wt","divider--dropdown":"Divider-module_divider--dropdown__Yrzn6","divider--normal":"Divider-module_divider--normal__PqCJT","divider--menu":"Divider-module_divider--menu__gSSUt","divider--horizontal":"Divider-module_divider--horizontal__UV8Jb","divider--vertical":"Divider-module_divider--vertical__Lkyfx"};

/**
 * Divider - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {string} props.variant - variant `normal, menu, dropdown, horizontal`
 * @param {string} props.align - align `vertical`
 * @return {object} An object of children element
 */

const Divider = ({
  className,
  variant,
  align
}) => {
  const elementClasses = useStyles({
    [styles$E['divider']]: true,
    [styles$E['divider--dropdown']]: variant === 'dropdown',
    [styles$E['divider--horizontal']]: variant === 'horizontal',
    [styles$E['divider--menu']]: variant === 'menu',
    [styles$E['divider--normal']]: variant === 'normal',
    [styles$E['divider--vertical']]: align === 'vertical'
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  });
};

Divider.displayName = 'Divider';
Divider.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  align: propTypes.exports.string,
  variant: propTypes.exports.oneOf(['dropdown', 'horizontal', 'menu', 'normal'])
};
Divider.defaultProps = {
  className: '',
  align: '',
  variant: 'normal'
};

var build = {exports: {}};

(() => {
  var e = {
    703: (e, t, n) => {

      var r = n(414);

      function o() {}

      function a() {}

      a.resetWarningCache = o, e.exports = function () {
        function e(e, t, n, o, a, s) {
          if (s !== r) {
            var i = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
            throw i.name = "Invariant Violation", i;
          }
        }

        function t() {
          return e;
        }

        e.isRequired = e;
        var n = {
          array: e,
          bool: e,
          func: e,
          number: e,
          object: e,
          string: e,
          symbol: e,
          any: e,
          arrayOf: t,
          element: e,
          elementType: e,
          instanceOf: t,
          node: e,
          objectOf: t,
          oneOf: t,
          oneOfType: t,
          shape: t,
          exact: t,
          checkPropTypes: a,
          resetWarningCache: o
        };
        return n.PropTypes = n, n;
      };
    },
    697: (e, t, n) => {
      e.exports = n(703)();
    },
    414: e => {

      e.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    }
  },
      t = {};

  function n(r) {
    var o = t[r];
    if (void 0 !== o) return o.exports;
    var a = t[r] = {
      exports: {}
    };
    return e[r](a, a.exports, n), a.exports;
  }

  n.n = e => {
    var t = e && e.__esModule ? () => e.default : () => e;
    return n.d(t, {
      a: t
    }), t;
  }, n.d = (e, t) => {
    for (var r in t) n.o(t, r) && !n.o(e, r) && Object.defineProperty(e, r, {
      enumerable: !0,
      get: t[r]
    });
  }, n.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), n.r = e => {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
      value: "Module"
    }), Object.defineProperty(e, "__esModule", {
      value: !0
    });
  };
  var r = {};
  (() => {

    n.r(r), n.d(r, {
      Column: () => P,
      Layout: () => S,
      Row: () => C
    });

    const e = react.exports;

    var t = n.n(e),
        o = n(697),
        a = n.n(o);

    function s(e) {
      return (s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      })(e);
    }

    var i = ["style", "column", "rowReverse", "columnReverse", "justifyContent", "alignContent", "alignItems", "alignSelf", "wrap", "wrapReverse", "flexGrow", "flexShrink", "flexBasis", "flex", "breakpoints", "className", "componentRef", "element"],
        l = ["reverse", "vertical", "horizontal", "justifyContent", "alignItems", "alignSelf", "alignContent", "flex", "flexGrow", "flexShrink", "flexBasis"],
        c = ["reverse", "vertical", "horizontal", "justifyContent", "alignItems", "alignSelf", "alignContent", "flex", "flexGrow", "flexShrink", "flexBasis"];

    function f() {
      return (f = Object.assign || function (e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = arguments[t];

          for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        }

        return e;
      }).apply(this, arguments);
    }

    function u(e, t) {
      var n = Object.keys(e);

      if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(e);
        t && (r = r.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), n.push.apply(n, r);
      }

      return n;
    }

    function p(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = null != arguments[t] ? arguments[t] : {};
        t % 2 ? u(Object(n), !0).forEach(function (t) {
          j(e, t, n[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : u(Object(n)).forEach(function (t) {
          Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
        });
      }

      return e;
    }

    function d(e, t) {
      if (null == e) return {};

      var n,
          r,
          o = function (e, t) {
        if (null == e) return {};
        var n,
            r,
            o = {},
            a = Object.keys(e);

        for (r = 0; r < a.length; r++) n = a[r], t.indexOf(n) >= 0 || (o[n] = e[n]);

        return o;
      }(e, t);

      if (Object.getOwnPropertySymbols) {
        var a = Object.getOwnPropertySymbols(e);

        for (r = 0; r < a.length; r++) n = a[r], t.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(e, n) && (o[n] = e[n]);
      }

      return o;
    }

    function y(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }

    function b(e, t) {
      for (var n = 0; n < t.length; n++) {
        var r = t[n];
        r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
      }
    }

    function v(e, t, n) {
      return t && b(e.prototype, t), n && b(e, n), e;
    }

    function x(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
      e.prototype = Object.create(t && t.prototype, {
        constructor: {
          value: e,
          writable: !0,
          configurable: !0
        }
      }), t && h(e, t);
    }

    function h(e, t) {
      return (h = Object.setPrototypeOf || function (e, t) {
        return e.__proto__ = t, e;
      })(e, t);
    }

    function g(e) {
      var t = function () {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;

        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
        } catch (e) {
          return !1;
        }
      }();

      return function () {
        var n,
            r = O(e);

        if (t) {
          var o = O(this).constructor;
          n = Reflect.construct(r, arguments, o);
        } else n = r.apply(this, arguments);

        return m(this, n);
      };
    }

    function m(e, t) {
      return !t || "object" !== s(t) && "function" != typeof t ? w(e) : t;
    }

    function w(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }

    function O(e) {
      return (O = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {
        return e.__proto__ || Object.getPrototypeOf(e);
      })(e);
    }

    function j(e, t, n) {
      return t in e ? Object.defineProperty(e, t, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = n, e;
    }

    var S = function (e) {
      x(r, e);
      var n = g(r);

      function r() {
        var e;
        y(this, r);

        for (var t = arguments.length, o = new Array(t), a = 0; a < t; a++) o[a] = arguments[a];

        return j(w(e = n.call.apply(n, [this].concat(o))), "getMainAxisAlign", function (e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];

          switch (e) {
            case "flex-start":
            case "start":
              return "flex-start";

            case "center":
              return "center";

            case "flex-end":
            case "end":
              return "flex-end";

            case "space-between":
            case "spaced":
              return "space-between";

            case "space-around":
            case "around":
              return "space-around";

            case "space-evenly":
              return t ? "flex-start" : "space-evenly";

            case "stretch":
              return t ? "stretch" : "flex-start";

            default:
              return "flex-start";
          }
        }), j(w(e), "getCrossAxisAlign", function (e) {
          switch (e) {
            case "flex-start":
            case "start":
              return "flex-start";

            case "center":
              return "center";

            case "flex-end":
            case "end":
              return "flex-end";

            case "stretch":
              return "stretch";

            case "baseline":
              return "baseline";

            default:
              return "stretch";
          }
        }), e;
      }

      return v(r, [{
        key: "render",
        value: function () {
          var e = this.props,
              n = e.style,
              r = e.column,
              o = void 0 !== r && r,
              a = e.rowReverse,
              s = void 0 !== a && a,
              l = e.columnReverse,
              c = void 0 !== l && l,
              u = e.justifyContent,
              y = e.alignContent,
              b = e.alignItems,
              v = e.alignSelf,
              x = e.wrap,
              h = void 0 !== x && x,
              g = e.wrapReverse,
              m = void 0 !== g && g,
              w = e.flexGrow,
              O = e.flexShrink,
              j = e.flexBasis,
              S = e.flex,
              C = e.breakpoints,
              P = e.className,
              R = e.componentRef,
              k = e.element,
              _ = d(e, i),
              T = {
            flexDirection: "row"
          };

          o && (T = {
            flexDirection: "column"
          }), s ? T = {
            flexDirection: "row-reverse"
          } : c && (T = {
            flexDirection: "column-reverse"
          });
          var I = {
            flexWrap: "nowrap"
          };
          h ? I = {
            flexWrap: "wrap"
          } : m && (I = {
            flexWrap: "wrap-reverse"
          });
          var B = u && {
            justifyContent: this.getMainAxisAlign(u)
          } || {},
              E = b && {
            alignItems: this.getCrossAxisAlign(b)
          } || {},
              A = v && {
            alignSelf: this.getCrossAxisAlign(v)
          } || {},
              G = y && {
            alignContent: this.getMainAxisAlign(y, !0)
          } || {},
              D = w && {
            flexGrow: w
          } || {},
              W = O && {
            flexShrink: O
          } || {},
              z = j && {
            flexBasis: j
          } || {},
              M = S && {
            flex: S
          } || {},
              N = [],
              q = C ? Object.keys(C).sort(function (e, t) {
            return t - e;
          }).reduce(function (e, t) {
            if (isNaN(t)) return e;
            var n = C[t];
            return "string" == typeof n ? ["column", "column-reverse", "row", "row-reverse"].includes(n) ? p(p({}, e), window && window.innerWidth <= +t ? {
              flexDirection: n
            } : {}) : (window && window.innerWidth <= +t && N.push(n), e) : p(p({}, e), window && window.innerWidth <= +t ? n : {});
          }, {}) : {},
              L = "".concat(P || "", " ").concat(N.join(" ")).trim(),
              U = p(p(p(p(p(p(p(p(p(p(p(p({
            display: "flex"
          }, T), B), E), A), G), I), D), W), z), M), n), q),
              F = t().createElement(k || "div");
          return t().createElement(F.type, f({
            ref: R,
            style: U,
            className: L
          }, _), this.props.children);
        }
      }]), r;
    }(t().PureComponent);

    j(S, "propTypes", {
      style: a().object,
      column: a().bool,
      rowReverse: a().bool,
      columnReverse: a().bool,
      justifyContent: a().oneOf(["start", "flex-start", "center", "end", "flex-end", "spaced", "space-between", "around", "space-around", "space-evenly"]),
      alignItems: a().oneOf(["start", "center", "end", "stretch", "baseline"]),
      alignSelf: a().oneOf(["start", "center", "end", "stretch", "baseline"]),
      alignContent: a().oneOf(["start", "flex-start", "center", "end", "flex-end", "spaced", "space-between", "around", "space-around", "stretch"]),
      wrap: a().bool,
      wrapReverse: a().bool,
      flexGrow: a().number,
      flexShrink: a().number,
      flexBasis: a().string,
      flex: a().string,
      breakpoints: a().object,
      element: a().oneOf(["article", "aside", "div", "figure", "footer", "form", "header", "main", "nav", "section"]),
      componentRef: a().oneOfType([a().func, a().shape({
        current: a().object
      })]),
      children: a().node.isRequired
    });

    var C = function (e) {
      x(r, e);
      var n = g(r);

      function r() {
        return y(this, r), n.apply(this, arguments);
      }

      return v(r, [{
        key: "render",
        value: function () {
          var e = this.props,
              n = e.reverse,
              r = void 0 !== n && n,
              o = e.vertical,
              a = e.horizontal,
              s = e.justifyContent,
              i = e.alignItems,
              c = e.alignSelf,
              u = e.alignContent,
              p = e.flex,
              y = e.flexGrow,
              b = e.flexShrink,
              v = e.flexBasis,
              x = d(e, l),
              h = r;
          return t().createElement(S, f({
            rowReverse: h,
            alignItems: o || i,
            justifyContent: a || s,
            alignSelf: c,
            alignContent: u,
            flexGrow: y,
            flexBasis: v,
            flexShrink: b,
            flex: p
          }, x), this.props.children);
        }
      }]), r;
    }(t().PureComponent);

    j(C, "propTypes", {
      reverse: a().bool,
      vertical: a().oneOf(["start", "center", "end", "stretch", "baseline"]),
      horizontal: a().oneOf(["start", "flex-start", "center", "end", "flex-end", "spaced", "space-between", "around", "space-around", "space-evenly"]),
      justifyContent: a().oneOf(["start", "flex-start", "center", "end", "flex-end", "spaced", "space-between", "around", "space-around", "space-evenly"]),
      alignItems: a().oneOf(["start", "center", "end", "stretch", "baseline"]),
      alignSelf: a().oneOf(["start", "center", "end", "stretch", "baseline"]),
      alignContent: a().oneOf(["start", "flex-start", "center", "end", "flex-end", "spaced", "space-between", "around", "space-around", "stretch"]),
      flex: a().string,
      flexGrow: a().number,
      flexShrink: a().number,
      flexBasis: a().string,
      breakpoints: a().object,
      element: a().oneOf(["article", "aside", "div", "figure", "footer", "form", "header", "main", "nav", "section"]),
      children: a().node.isRequired
    });

    var P = function (e) {
      x(r, e);
      var n = g(r);

      function r() {
        return y(this, r), n.apply(this, arguments);
      }

      return v(r, [{
        key: "render",
        value: function () {
          var e = this.props,
              n = e.reverse,
              r = void 0 !== n && n,
              o = e.vertical,
              a = e.horizontal,
              s = e.justifyContent,
              i = e.alignItems,
              l = e.alignSelf,
              u = e.alignContent,
              p = e.flex,
              y = e.flexGrow,
              b = e.flexShrink,
              v = e.flexBasis,
              x = d(e, c),
              h = r;
          return t().createElement(S, f({
            column: !0,
            columnReverse: h,
            alignItems: a || i,
            justifyContent: o || s,
            alignSelf: l,
            alignContent: u,
            flexGrow: y,
            flexBasis: v,
            flexShrink: b,
            flex: p
          }, x), this.props.children);
        }
      }]), r;
    }(t().PureComponent);

    j(P, "propTypes", {
      reverse: a().bool,
      horizontal: a().oneOf(["start", "center", "end", "stretch"]),
      vertical: a().oneOf(["start", "flex-start", "center", "end", "flex-end", "spaced", "space-between", "around", "space-around", "space-evenly"]),
      justifyContent: a().oneOf(["start", "flex-start", "center", "end", "flex-end", "spaced", "space-between", "around", "space-around", "space-evenly"]),
      alignItems: a().oneOf(["start", "center", "end", "stretch", "baseline"]),
      alignSelf: a().oneOf(["start", "center", "end", "stretch", "baseline"]),
      alignContent: a().oneOf(["start", "flex-start", "center", "end", "flex-end", "spaced", "space-between", "around", "space-around", "stretch"]),
      flex: a().string,
      flexGrow: a().number,
      flexShrink: a().number,
      flexBasis: a().string,
      breakpoints: a().object,
      element: a().oneOf(["article", "aside", "div", "figure", "footer", "form", "header", "main", "nav", "section"]),
      children: a().node.isRequired
    });
  })(), build.exports = r;
})();

var styles$D = {"text--truncate":"Dot-module_text--truncate__k7TMC","dot":"Dot-module_dot__8mbuu","dot--brand":"Dot-module_dot--brand__z3IG4","dot--accent-1":"Dot-module_dot--accent-1__BM2Gm","dot--accent-2":"Dot-module_dot--accent-2__SIN4q","dot--accent-3":"Dot-module_dot--accent-3__d9fyF","dot--accent-4":"Dot-module_dot--accent-4__3YTdg","dot--accent-5":"Dot-module_dot--accent-5__956Go","dot--accent-6":"Dot-module_dot--accent-6__WjuZ6","dot--accent-7":"Dot-module_dot--accent-7__le9BF","dot--alert":"Dot-module_dot--alert__YeaEc","dot--warning":"Dot-module_dot--warning__Puj-v","dot--success":"Dot-module_dot--success__E5yj5","dot--info":"Dot-module_dot--info__-Jkhb","dot--pending":"Dot-module_dot--pending__oos-k"};

/**
 * Dot - stateless ui component
 * @param {string} props.variant - dot color
 * @param {string} props.label - optional label
 * @param {string | array} props.className - additional styles
 * @return {object} An object of children element
 */

const Dot = ({
  variant,
  label,
  className
}) => {
  const wrapperStyles = useStyles({}, className);
  const dotStyles = useStyles({
    [styles$D.dot]: true,
    [styles$D[`dot--${variant}`]]: true
  });
  return /*#__PURE__*/React.createElement(build.exports.Row, {
    alignItems: "center",
    className: wrapperStyles
  }, /*#__PURE__*/React.createElement("div", {
    className: dotStyles
  }), /*#__PURE__*/React.createElement(Spreader, {
    spread: "tiny"
  }), label ? /*#__PURE__*/React.createElement("span", null, label) : null);
};

Dot.displayName = 'Dot';
Dot.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  variant: propTypes.exports.oneOf(['brand', 'alert', 'warning', 'success', 'info', 'pending', 'accent-1', 'accent-2', 'accent-3', 'accent-4', 'accent-5', 'accent-6', 'accent-7']),
  label: propTypes.exports.string
};
Dot.defaultProps = {
  className: '',
  variant: 'brand',
  label: null
};

/**
 * Position of child to parent element
 * @function centerParent
 * @param {number} parentWidth
 * @param {number} childWidth
 * @param {number} parentOffsetLeft
 * @return {number} Returns position
 */
const centerParent = (parentWidth, childWidth, parentOffsetLeft) => {
  const calc = Math.floor(parentWidth / 2 - childWidth / 2 + parentOffsetLeft);
  return isNaN(calc) ? 0 : calc;
};
/**
 * Element bounding
 * @param {node} element The element
 * @return {object} getBoundingClientRect()
 */

const getBoundings = element => element && element.getBoundingClientRect();

/**
 * Creates a throttled function that only invokes func at most once per
 * every wait milliseconds
 * @param {function} Func to throttle
 * @param {number} [interval=0] The number of milliseconds to delay
 * @return {function} Returns the new throttled function
 */
const throttle = (func, interval) => {
  let timeout;
  return function (...args) {
    const later = function () {
      timeout = false;
    };

    if (!timeout) {
      func.apply(this, args);
      timeout = true;
      setTimeout(later, interval);
    }
  };
};
/**
 * Creates a debounced function that delays invoking func until after wait
 * milliseconds have elapsed since the last time the debounced function was
 * invoked
 * @param {function} Func The function to throttle
 * @param {number} [interval=0] The number of milliseconds to delay
 * @return {function} Returns the new debounced function
 */

const debounce = (func, interval) => {
  let timeout;
  return function (...args) {
    const context = () => func.apply(this, args);

    clearTimeout(timeout);
    timeout = setTimeout(context, interval);
  };
};

/**
 * composeRefs func - help with composing multiple refs in React functional components
 * eg. <Input ref={composeRefs(ref1,ref2)}/>
 * @param  {...any} args
 * @return {object}
 */
const composeRefs = (...args) => {
  return ref => {
    args.forEach(arg => {
      if (!arg) {
        return;
      }

      if (typeof arg === 'function') {
        arg(ref);
        return;
      }

      arg.current = ref;
    });
  };
};

var styles$C = {"text--truncate":"Dropdown-module_text--truncate__2gSL1","dropdown":"Dropdown-module_dropdown__HMCqD","dropdown__head":"Dropdown-module_dropdown__head__396jT","dropdown__wrapper":"Dropdown-module_dropdown__wrapper__1egqO","dropdown__wrapper__icon":"Dropdown-module_dropdown__wrapper__icon__Jyo6a","dropdown__wrapper--isOnlyIcon":"Dropdown-module_dropdown__wrapper--isOnlyIcon__axCFS","dropdown__wrapper--spaced":"Dropdown-module_dropdown__wrapper--spaced__P9FzW","dropdown__wrapper--end":"Dropdown-module_dropdown__wrapper--end__bP-0-","dropdown__wrapper--input":"Dropdown-module_dropdown__wrapper--input__OrJSn","dropdown__wrapper--as-input":"Dropdown-module_dropdown__wrapper--as-input__RJFIb","dropdown__wrapper--input--disabled":"Dropdown-module_dropdown__wrapper--input--disabled__yqS5m","dropdown__body":"Dropdown-module_dropdown__body__S2eLp","dropdown__label":"Dropdown-module_dropdown__label__6N61W","dropdown__label--placeholder":"Dropdown-module_dropdown__label--placeholder__ofJhe","dropdown--auto":"Dropdown-module_dropdown--auto__nkM1m","dropdown--mini":"Dropdown-module_dropdown--mini__by6XY","dropdown--small":"Dropdown-module_dropdown--small__SuG5D","dropdown--medium":"Dropdown-module_dropdown--medium__O0sjc","dropdown--big":"Dropdown-module_dropdown--big__9WvMv","dropdown--large":"Dropdown-module_dropdown--large__6mAkI","dropdown--huge":"Dropdown-module_dropdown--huge__a5SP3","dropdown--extra-huge":"Dropdown-module_dropdown--extra-huge__HP5py","dropdown--hidden":"Dropdown-module_dropdown--hidden__lm-mk"};

/**
 * Dropdown - stateless presentational component
 * @return {object} An object of children element
 */

const Dropdown = /*#__PURE__*/react.exports.forwardRef(({
  children,
  className,
  icon,
  tooltip,
  tooltipPlacement,
  label,
  offset,
  size,
  hasArrow,
  arrowType,
  alignment,
  dropdownPlacement,
  button,
  handleOnClick,
  handleOnOpen,
  handleOnClose,
  linkComponent,
  renderAsSmaller,
  hasInput,
  hasFullInputStyle,
  asPlaceholder,
  inModalName,
  custom,
  isOpenDisabled,
  isOnlyIcon,
  ['data-testid']: dataTestId
}, ref) => {
  const [style, setStyle] = react.exports.useState({});
  const [isOpen, setIsOpen] = react.exports.useState(false);
  const containerRef = react.exports.useRef(null);
  const dropdownRef = react.exports.useRef(null);
  const dropdownWrapperWithTooltipStyles = useStyles({
    [styles$C['dropdown__wrapper']]: true,
    [styles$C['dropdown__wrapper--isOnlyIcon']]: isOnlyIcon
  });
  const dropdownWrapperStyles = useStyles({
    [styles$C['dropdown__wrapper']]: true,
    [styles$C[`dropdown__wrapper--${alignment}`]]: alignment
  });
  const dropdownWrapperIconStyles = useStyles({
    [styles$C['dropdown__wrapper']]: true,
    [styles$C['dropdown__wrapper__icon']]: true,
    [styles$C['dropdown__wrapper--isOnlyIcon']]: isOnlyIcon
  });
  const dropdownBodySizeStyles = useStyles({
    [styles$C['dropdown']]: true,
    [styles$C[`dropdown--${size}`]]: size,
    [styles$C['dropdown--hidden']]: isEmpty(style)
  }, className);
  const dropdownBodyStyles = useStyles({
    [styles$C['dropdown__body']]: true
  });
  const dropdownLabelStyles = useStyles({
    [styles$C['dropdown__label']]: true,
    [styles$C['dropdown__label--placeholder']]: asPlaceholder
  });
  const dropdownStyles = useStyles({
    [styles$C['dropdown__wrapper']]: !custom,
    [styles$C[`dropdown__wrapper--${alignment}`]]: alignment,
    [styles$C['dropdown__wrapper--disabled']]: isOpenDisabled,
    [styles$C['dropdown__wrapper--input']]: hasInput,
    [styles$C['dropdown__wrapper--as-input']]: hasFullInputStyle,
    [styles$C['dropdown__wrapper--input--disabled']]: hasInput && isOpenDisabled,
    [styles$C['dropdown__wrapper--isOnlyIcon']]: isOnlyIcon
  }, className);
  const handleShow = react.exports.useCallback(event => {
    event.stopPropagation();

    if (isOpenDisabled) {
      return;
    }

    !isOpen && handleOnOpen();
    setIsOpen(isOpen => !isOpen);
  }, [isOpen, isOpenDisabled]);
  const handleClose = react.exports.useCallback(event => {
    event.stopPropagation();

    if (containerRef.current && !containerRef.current.contains(event.target) && dropdownRef.current && !dropdownRef.current.contains(event.target)) {
      setIsOpen(isOpen => !isOpen);
      handleOnClose();
    }
  }, [isOpen, containerRef, dropdownRef]);

  const makeClose = () => setIsOpen(false);

  const handlePosition = () => {
    const container = getBoundings(containerRef.current);
    const dropdown = getBoundings(dropdownRef.current);
    const renderAbove = window.innerHeight <= dropdown?.height + container?.top + offset;

    if (inModalName) {
      const modal = document.getElementsByClassName(inModalName)[0];
      const modalWidth = modal?.offsetWidth || 600;
      const modalHeight = modal?.offsetHeight || 600;
      setStyle({
        left: container.left - (window.innerWidth - modalWidth) / 2,
        top: renderAbove ? container.top - dropdown.height : container.bottom - (window.innerHeight - modalHeight) / 2 + offset
      });
    } else {
      if (size === 'fixed') {
        setStyle({
          left: container?.left,
          top: renderAbove ? container?.top - dropdown?.height : container?.bottom + offset,
          width: container?.width
        });
      } else if (size === 'huge') {
        setStyle({
          left: dropdownPlacement === 'left' ? (renderAsSmaller ? centerParent(container?.width, 480, container?.left) : centerParent(container?.width, dropdown?.width, container?.left)) - 150 : centerParent(container?.width, dropdown?.width, container?.left) - 100 + dropdown?.width,
          top: renderAbove ? container?.top - dropdown?.height : container?.bottom + offset
        });
      } else {
        setStyle({
          left: dropdownPlacement === 'left' ? (renderAsSmaller ? centerParent(container?.width, 240, container?.left) : centerParent(container?.width, dropdown?.width, container?.left)) - 40 : centerParent(container?.width, dropdown?.width, container?.left) - 100 + dropdown?.width,
          top: renderAbove ? container?.top - dropdown?.height : container?.bottom + offset
        });
      }
    }
  };

  const handleResize = () => {
    if (isOpen) {
      handlePosition();
    }
  };

  const renderDropdownWithTooltip = () => /*#__PURE__*/React.createElement(Tooltip, {
    content: tooltip,
    placement: tooltipPlacement
  }, /*#__PURE__*/React.createElement("span", {
    ref: composeRefs(ref, containerRef),
    onClick: handleShow,
    className: dropdownWrapperWithTooltipStyles,
    "data-testid": dataTestId
  }, icon && renderIcon(), renderLabel(), /*#__PURE__*/React.createElement(ink.exports, null), hasArrow && renderArrows(isOpen, arrowType)));

  const renderDropdown = () => /*#__PURE__*/React.createElement("span", {
    ref: composeRefs(ref, containerRef),
    onClick: handleShow,
    className: dropdownStyles,
    "data-testid": dataTestId
  }, custom && custom, icon && renderIcon(), label && renderLabel(), !hasInput && !custom && /*#__PURE__*/React.createElement(ink.exports, null), hasArrow && renderArrows(isOpen, arrowType));

  const renderDropdownWithButton = () => /*#__PURE__*/React.createElement("span", {
    className: dropdownWrapperStyles,
    onClick: handleOnClick
  }, linkComponent && linkComponent( /*#__PURE__*/React.createElement(react.exports.Fragment, null, icon && renderIcon(), label && renderLabel(), /*#__PURE__*/React.createElement(ink.exports, null))), /*#__PURE__*/React.createElement("span", {
    className: dropdownWrapperIconStyles,
    ref: composeRefs(ref, containerRef),
    onClick: handleShow,
    "data-testid": dataTestId
  }, hasArrow && renderArrows(isOpen, arrowType), /*#__PURE__*/React.createElement(ink.exports, null)));

  const renderDropdownBody = () => /*#__PURE__*/React.createElement("div", {
    className: dropdownBodySizeStyles,
    ref: dropdownRef,
    style: style
  }, /*#__PURE__*/React.createElement("div", {
    className: dropdownBodyStyles
  }, children));

  const renderIcon = () => /*#__PURE__*/React.createElement(Icon, {
    icon: icon
  });

  const renderLabel = () => /*#__PURE__*/React.createElement("span", {
    className: dropdownLabelStyles
  }, label);

  const renderArrows = (isOpen, arrowType) => arrowType === 'caret' ? isOpen ? /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-caret-up"
  }) : /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-caret-down"
  }) : /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-ellipsis-v"
  });

  react.exports.useEffect(() => {
    document.addEventListener('mousedown', handleClose);
    document.addEventListener('scroll', throttle(handleClose, 500));
    document.addEventListener('resize', debounce(handleResize, 100));
    emitter.on(CLOSE_DROPDOWN, makeClose);
    return () => {
      document.removeEventListener('mousedown', handleClose);
      document.removeEventListener('scroll', handleClose);
      document.removeEventListener('resize', handleResize);
      emitter.off(CLOSE_DROPDOWN, makeClose);
    };
  }, []);
  react.exports.useEffect(() => {
    if (containerRef.current && dropdownRef.current) {
      handlePosition();
    }
  }, [isOpen]);
  return /*#__PURE__*/React.createElement(react.exports.Fragment, null, tooltip.length > 0 ? renderDropdownWithTooltip() : button ? renderDropdownWithButton() : renderDropdown(), isOpen && renderDropdownBody());
});
Dropdown.displayName = 'Dropdown';
Dropdown.propTypes = {
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  icon: propTypes.exports.string,
  tooltip: propTypes.exports.string,
  tooltipPlacement: propTypes.exports.string,
  label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),
  offset: propTypes.exports.number,
  size: propTypes.exports.oneOf(['mini', 'small', 'medium', 'big', 'large', 'huge', 'extra-huge', 'auto', 'fixed']),
  hasArrow: propTypes.exports.bool,
  arrowType: propTypes.exports.oneOf(['caret', 'dots']),
  alignment: propTypes.exports.oneOf(['center', 'spaced', 'end']),
  dropdownPlacement: propTypes.exports.oneOf(['left', 'right']),
  button: propTypes.exports.bool,
  handleOnClick: propTypes.exports.func,
  handleOnOpen: propTypes.exports.func,
  handleOnClose: propTypes.exports.func,
  linkComponent: propTypes.exports.func,
  renderAsSmaller: propTypes.exports.bool,
  hasInput: propTypes.exports.bool,
  hasFullInputStyle: propTypes.exports.bool,
  asPlaceholder: propTypes.exports.bool,
  inModalName: propTypes.exports.string,
  custom: propTypes.exports.instanceOf(Object),
  isOpenDisabled: propTypes.exports.bool,
  isOnlyIcon: propTypes.exports.bool,
  ['data-testid']: propTypes.exports.string
};
Dropdown.defaultProps = {
  className: '',
  tooltip: '',
  tooltipPlacement: '',
  linkComponent: null,
  size: 'medium',
  arrowType: 'caret',
  alignment: 'center',
  dropdownPlacement: 'left',
  offset: 5,
  icon: null,
  label: null,
  custom: null,
  hasArrow: true,
  renderAsSmaller: false,
  hasInput: false,
  hasFullInputStyle: false,
  asPlaceholder: false,
  inModal: false,
  button: false,
  isOpenDisabled: false,
  isOnlyIcon: false,
  handleOnClick: () => null,
  handleOnOpen: () => null,
  handleOnClose: () => null,
  ['data-testid']: 'trigger-dropdown'
};

var styles$B = {"text--truncate":"Error-module_text--truncate__cmNlG","error":"Error-module_error__oTprb"};

/**
 * Form input error - stateless presentational component
 * @param {object} props - props
 * @param {string} props.error - error message
 * @param {string|array} props.className
 * @return {object} An object of children element
 */

const Error$1 = ({
  error,
  className
}) => {
  const errorStyles = useStyles({
    [styles$B.error]: true
  }, className);
  return error ? /*#__PURE__*/React.createElement("span", {
    className: errorStyles
  }, error) : null;
};

Error$1.displayName = 'Error';
Error$1.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  error: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object])
};
Error$1.defaultProps = {
  className: '',
  error: ''
};

var styles$A = {"text--truncate":"Message-module_text--truncate__RWs0W","message":"Message-module_message__UaN2I"};

/**
 * Message - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children element
 * @param {string|array} props.className - list of custom class names out of component
 * @param {string} props.title - title
 * @param {string} props.message - message
 * @param {string} props.url - image/video url
 * @param {number} props.height - height of image/video
 * @param {number} props.titleLevel - title font size
 * @param {number} props.messageLevel - message font size
 * @param {bool} props.video - component with wideo
 * @param {string} props.multimediaPosition - image/video position before or after content, default `before`
 * @param {bool} props.bold - message title is bold
 * @param {bool} props.withoutMargin - message title without bottom margin
 * @return {object} An object of children element
 */

const Message = ({
  children,
  className,
  title,
  message,
  url,
  height,
  titleLevel,
  messageLevel,
  video,
  multimediaPosition,
  bold,
  withoutMargin
}) => {
  const elementClasses = useStyles({
    [styles$A['message']]: true
  }, className);
  /**
   * Render multimedia
   * @type {function}
   */

  const renderMultimedia = () => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Spacer, {
    space: "small"
  }), video ? /*#__PURE__*/React.createElement(react.exports.Fragment, null, video, /*#__PURE__*/React.createElement(Spacer, {
    space: "small"
  })) : /*#__PURE__*/React.createElement(Image$1, {
    height: height,
    size: "auto",
    src: url
  }));

  return /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }, url && multimediaPosition === 'before' && renderMultimedia(), title && /*#__PURE__*/React.createElement(Heading, {
    align: "center",
    bold: bold,
    level: titleLevel,
    margin: withoutMargin ? 'none' : ''
  }, title), message && /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement(Spacer, {
    space: "tiny"
  }), /*#__PURE__*/React.createElement(Heading, {
    align: "center",
    level: messageLevel
  }, message)), url && multimediaPosition === 'after' && renderMultimedia(), children);
};

Message.displayName = 'Message';
Message.propTypes = {
  bold: propTypes.exports.bool,
  children: propTypes.exports.node,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  height: propTypes.exports.number,
  video: propTypes.exports.node,
  message: propTypes.exports.string,
  messageLevel: propTypes.exports.number,
  multimediaPosition: propTypes.exports.oneOf(['before', 'after']),
  title: propTypes.exports.string,
  titleLevel: propTypes.exports.number,
  url: propTypes.exports.string,
  withoutMargin: propTypes.exports.bool
};
Message.defaultProps = {
  className: '',
  bold: false,
  children: null,
  height: 220,
  video: null,
  message: undefined,
  messageLevel: 3,
  multimediaPosition: 'before',
  title: undefined,
  titleLevel: 1,
  url: undefined,
  withoutMargin: false
};

var styles$z = {"text--truncate":"Overflow-module_text--truncate__gxBOP","overflow":"Overflow-module_overflow__KDqwd"};

/**
 * Overflow - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - childrens
 * @param {string|array} props.className - list of class names
 * @return {object} An object of children element
 */

const Overflow = ({
  children,
  className
}) => {
  const elementClasses = useStyles({
    [styles$z['overflow']]: true
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }, children);
};

Overflow.displayName = 'Overflow';
Overflow.propTypes = {
  children: propTypes.exports.node,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array])
};
Overflow.defaultProps = {
  children: null,
  className: ''
};

var styles$y = {"text--truncate":"Loader-module_text--truncate__EvM0o","loader":"Loader-module_loader__Ukoov","loader__spinner":"Loader-module_loader__spinner__cp5N7","loader__spinner--inner":"Loader-module_loader__spinner--inner__1jgqz","spin":"Loader-module_spin__HfHqf","dash":"Loader-module_dash__6cly-","loader__triangle":"Loader-module_loader__triangle__A47-U","move-triangle":"Loader-module_move-triangle__B8vUY","loader__square":"Loader-module_loader__square__kePmA","move-square":"Loader-module_move-square__52oi0","loader__circle":"Loader-module_loader__circle__yJvMH","move-circle":"Loader-module_move-circle__UPbLZ","loader__circle2":"Loader-module_loader__circle2__brpSM","move-circle-2":"Loader-module_move-circle-2__L8pHb","container":"Loader-module_container__FieQ6","main":"Loader-module_main__rju3o","one":"Loader-module_one__84UfA","load-one":"Loader-module_load-one__hmMU-","two":"Loader-module_two__blOBv","load-two":"Loader-module_load-two__ru3Ib","three":"Loader-module_three__iX5OZ","load-three":"Loader-module_load-three__eFTKC","forth":"Loader-module_forth__xUCuH","load-forth":"Loader-module_load-forth__j17oz"};

const renderDefaultLoader = ({
  dataTestId
}) => /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement("div", {
  className: styles$y.container,
  "data-testid": dataTestId ?? 'loader-default'
}, /*#__PURE__*/React.createElement("div", {
  className: styles$y.main
}, /*#__PURE__*/React.createElement("div", {
  className: styles$y.one
}), /*#__PURE__*/React.createElement("div", {
  className: styles$y.two
}), /*#__PURE__*/React.createElement("div", {
  className: styles$y.three
}), /*#__PURE__*/React.createElement("div", {
  className: styles$y.forth
}))));

const renderShapesLoader = ({
  dataTestId
}) => /*#__PURE__*/React.createElement("div", {
  className: styles$y.loader,
  "data-testid": dataTestId ?? 'loader-shapes'
}, /*#__PURE__*/React.createElement("svg", {
  className: styles$y.loader__circle,
  width: "8px",
  height: "8px",
  viewBox: "0 0 22 22",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/React.createElement("circle", {
  cx: "11",
  cy: "11",
  r: "11"
})), /*#__PURE__*/React.createElement("svg", {
  className: styles$y.loader__circle2,
  width: "8px",
  height: "8px",
  viewBox: "0 0 22 22",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/React.createElement("circle", {
  cx: "11",
  cy: "11",
  r: "11"
})), /*#__PURE__*/React.createElement("svg", {
  className: styles$y.loader__triangle,
  width: "13px",
  height: "13px",
  viewBox: "0 0 40 45",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/React.createElement("path", {
  d: "M31.673,18.327,6.673,25,0,0Z",
  transform: "translate(15.836 39.929) rotate(-120)"
})), /*#__PURE__*/React.createElement("svg", {
  className: styles$y.loader__square,
  width: "7px",
  height: "7px",
  viewBox: "0 0 10 10",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/React.createElement("rect", {
  width: "15",
  height: "15"
})), /*#__PURE__*/React.createElement("div", {
  className: styles$y.loader__spinner
}, /*#__PURE__*/React.createElement("div", {
  className: styles$y[`loader__spinner--inner`]
}, /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: "36",
  width: "36"
}, /*#__PURE__*/React.createElement("circle", {
  cx: "50%",
  cy: "50%",
  r: "40%",
  fill: "rgba(0,0,0,0)",
  stroke: "#28C7B8",
  strokeLinecap: "round"
})))));
/**
 * Loader - stateless presentational component
 * @param {object} props - props
 * @param {string} props.variant - loader variant
 * @return {object} An object of children element
 */


const Loader = ({
  variant,
  ['data-testid']: dataTestId
}) => {
  const loader = {
    default: renderDefaultLoader({
      dataTestId
    }),
    shapes: renderShapesLoader({
      dataTestId
    })
  };
  return loader[variant];
};

Loader.displayName = 'Loader';
Loader.propTypes = {
  variant: propTypes.exports.oneOf(['default', 'shapes']),
  ['data-testid']: propTypes.exports.string
};
Loader.defaultProps = {
  variant: 'default',
  ['data-testid']: null
};

const emitCloseDropdown = (...args) => emitter.emit(CLOSE_DROPDOWN, ...args);

var styles$x = {"text--truncate":"DropdownSelect-module_text--truncate__-qi-s","search-container":"DropdownSelect-module_search-container__6FcCx","form-field__dropdown--has-error":"DropdownSelect-module_form-field__dropdown--has-error__DHUwj","form-field__label":"DropdownSelect-module_form-field__label__qmn8J","form-field__label--has-error":"DropdownSelect-module_form-field__label--has-error__usSjI","form-field__label--has-label":"DropdownSelect-module_form-field__label--has-label__u5dBY","form-field__label--disabled":"DropdownSelect-module_form-field__label--disabled__PyISX"};

/**
 * DropdownSelect - stateless presentational component
 * @param {object} props - props
 * @param {string} props.value - field value
 * @param {func} props.onChange - on Change handler
 * @param {string} props.label - label
 * @param {object} props.errors - element errors list
 * @param {object} props.touched - element touched list
 * @param {string} props.label - label
 * @param {array} props.options - list of options
 * @param {func} props.handleOnSearchChange - on search input change handler
 * @param {string} props.searchPlaceholder - search placeholder
 * @param {bool} props.inModal - position in modal
 * @param {bool} props.isLoading - list loading spinner
 * @param {bool} props.isEmptyList - display empty list
 * @param {bool} props.liveChanges - search by entering characters
 * @param {bool} props.optionalContent
 * @param {func} props.dropdownLabel
 * @param {func} props.className - wrapper custom styles
 * @param {func} props.customValue - allow use custom value which is not in options
 * @param {func} props.formikKey - name on formik 'nasted' keys
 * @param {bool} props.alwaysShowLabel - always show label on top
 * @param {bool} props.isOpenDisabled - when its true dropdown can't be open, default: false
 * @param {string} props.alwaysShowLabel - always show label on top
 * @param {string} props.searchInOptions - alow user to search item in options list
 * @param {string} props.i18n - object of translations
 * @return {object} An object of children element
 */

const DropdownSelect = ({
  value,
  onChange,
  errors,
  touched,
  label,
  options,
  handleOnSearchChange,
  inModalName,
  isLoading,
  isEmptyList,
  hasDescription,
  overflowStyle,
  emphasisedOptions,
  liveChanges,
  optionalContent,
  dropdownLabel,
  className,
  customValue,
  formikKey,
  alwaysShowLabel,
  isOpenDisabled,
  searchInOptions,
  i18n
}) => {
  const hasLabel = value || alwaysShowLabel;
  const labelStyles = useStyles({
    [styles$x['form-field__label']]: true,
    [styles$x['form-field__label--has-error']]: errors[formikKey] || touched[formikKey],
    [styles$x['form-field__label--has-label']]: hasLabel,
    [styles$x['form-field__label--disabled']]: isOpenDisabled
  });
  const dropdownStyles = useStyles({
    [styles$x['form-field__dropdown--has-error']]: errors[formikKey] || touched[formikKey]
  });

  const getSelectedItem = () => {
    const currentItem = options.find(({
      value: itemValue
    }) => itemValue === value);

    if (currentItem) {
      return currentItem;
    } else if (customValue && !currentItem) {
      return {
        value,
        label: value
      };
    } else {
      return null;
    }
  };

  const selectedItem = getSelectedItem();
  /**
   * checks if user want to use formik or not
   */

  const handleChange = react.exports.useCallback(value => {
    if (formikKey) {
      onChange(formikKey, value);
    } else {
      onChange(value);
    }

    emitCloseDropdown();
  });
  const dropdownRef = react.exports.useRef(null);
  const containerRef = react.exports.useRef(null);
  /**
   * autosize width for dropdown
   */

  const [dropdownWidth, setDropdownWidth] = react.exports.useState(null);
  react.exports.useEffect(() => {
    const labelWidth = containerRef.current?.clientWidth;
    if (labelWidth) setDropdownWidth(labelWidth);
  }, [containerRef.current]);

  const renderOption = item => hasDescription ? /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement(Button$1, {
    variant: "dropdown-element",
    onClick: () => handleChange(item.value)
  }, /*#__PURE__*/React.createElement(Heading, {
    level: 5
  }, item?.label), /*#__PURE__*/React.createElement(Paragraph, {
    color: "accent-2",
    size: 12
  }, item?.description)), /*#__PURE__*/React.createElement(Divider, null)) : /*#__PURE__*/React.createElement(Button$1, {
    variant: "dropdown-element",
    onClick: () => handleChange(item.value)
  }, item?.label);

  const [searchValue, setSearchValue] = react.exports.useState(null);

  const handleSearchOptionsChange = event => {
    setSearchValue(event?.target.value);
  };
  /**
   * Clear value in search / searcher
   */


  const clearSearchValue = react.exports.useCallback(() => setSearchValue(''), []);

  const renderOptions = () => /*#__PURE__*/React.createElement(react.exports.Fragment, null, emphasisedOptions.map((item, index) => /*#__PURE__*/React.createElement(ListItem, {
    className: "list-item--dropdown",
    key: index
  }, renderOption(item))), !isEmpty(emphasisedOptions) && /*#__PURE__*/React.createElement(Divider, null), options.filter(({
    label
  }) => {
    if (!searchValue) {
      return true;
    }

    const items = label.toLowerCase().match(new RegExp(searchValue.toLowerCase()));
    return items;
  }).map((item, index) => /*#__PURE__*/React.createElement(ListItem, {
    className: "list-item--dropdown",
    key: index
  }, renderOption(item))));

  return /*#__PURE__*/React.createElement("div", {
    className: className,
    ref: containerRef
  }, label && /*#__PURE__*/React.createElement(Label, {
    id: label,
    className: labelStyles
  }, label), /*#__PURE__*/React.createElement(Dropdown, {
    label: dropdownLabel ? dropdownLabel(selectedItem) : selectedItem?.label,
    hasInput: true,
    hasFullInputStyle: true,
    asPlaceholder: !selectedItem?.label,
    size: "fixed",
    alignment: hasLabel ? 'spaced' : 'end',
    inModalName: inModalName,
    ref: dropdownRef,
    isOpenDisabled: isOpenDisabled,
    handleOnClose: clearSearchValue,
    className: dropdownStyles
  }, handleOnSearchChange && /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: styles$x['search-container']
  }, /*#__PURE__*/React.createElement(Searcher$1, {
    setSearchPhrase: handleOnSearchChange,
    i18n: {
      placeholder: i18n.placeholder
    },
    tag: "div",
    protectedSubmit: true,
    liveChanges: liveChanges
  })), /*#__PURE__*/React.createElement(Divider, {
    variant: "dropdown"
  })), searchInOptions && /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: styles$x['search-container']
  }, /*#__PURE__*/React.createElement(Search, {
    onChange: handleSearchOptionsChange,
    i18n: {
      placeholder: i18n.placeholder
    },
    tag: "div",
    autoFocus: true
  })), /*#__PURE__*/React.createElement(Divider, {
    variant: "dropdown"
  })), /*#__PURE__*/React.createElement(Overflow, null, /*#__PURE__*/React.createElement("div", {
    style: {
      minWidth: dropdownWidth,
      ...overflowStyle
    }
  }, /*#__PURE__*/React.createElement(List, null, !isLoading && isEmptyList && isEmpty(options) ? /*#__PURE__*/React.createElement(Message, {
    title: i18n.emptySearchMessageTitle,
    message: i18n.emptySearchMessage,
    url: "https://images.assets-landingi.com/images/search_empty.svg",
    height: 41,
    titleLevel: 5,
    messageLevel: 6
  }) : renderOptions(), isLoading && /*#__PURE__*/React.createElement(Loader, null)), /*#__PURE__*/React.createElement(Spacer, {
    space: "tiny"
  }))), optionalContent), /*#__PURE__*/React.createElement(Error$1, {
    error: errors[formikKey]
  }));
};

DropdownSelect.displayName = 'DropdownSelect';
DropdownSelect.propTypes = {
  value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number]),
  onChange: propTypes.exports.func,
  onBlur: propTypes.exports.func,
  errors: propTypes.exports.objectOf(propTypes.exports.string),
  touched: propTypes.exports.instanceOf(Object),
  label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.element]),
  options: propTypes.exports.arrayOf(propTypes.exports.shape({
    label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.element]).isRequired,
    value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number]).isRequired
  })).isRequired,
  handleOnSearchChange: propTypes.exports.func,
  inModalName: propTypes.exports.string,
  isLoading: propTypes.exports.bool,
  isEmptyList: propTypes.exports.bool,
  hasDescription: propTypes.exports.bool,
  overflowStyle: propTypes.exports.instanceOf(Object),
  emphasisedOptions: propTypes.exports.arrayOf(propTypes.exports.shape({
    label: propTypes.exports.string,
    value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number])
  })),
  liveChanges: propTypes.exports.bool,
  optionalContent: propTypes.exports.node,
  dropdownLabel: propTypes.exports.func,
  className: propTypes.exports.string,
  customValue: propTypes.exports.bool,
  formikKey: propTypes.exports.string,
  alwaysShowLabel: propTypes.exports.bool,
  isOpenDisabled: propTypes.exports.bool,
  searchInOptions: propTypes.exports.bool,
  i18n: propTypes.exports.shape({
    placeholder: propTypes.exports.string,
    emptySearchMessageTitle: propTypes.exports.string,
    emptySearchMessage: propTypes.exports.string
  })
};
DropdownSelect.defaultProps = {
  label: '',
  searchPlaceholder: '',
  inModalName: '',
  errors: {},
  touched: {},
  overflowStyle: {},
  emphasisedOptions: [],
  handleOnSearchChange: null,
  value: null,
  liveChanges: false,
  optionalContent: null,
  dropdownLabel: null,
  className: '',
  customValue: false,
  alwaysShowLabel: false,
  isOpenDisabled: false,
  searchInOptions: false,
  isLoading: false,
  isEmptyList: false,
  hasDescription: false,
  onBlur: () => null,
  onChange: () => null
};

var styles$w = {"text--truncate":"DropdownSelect-module_text--truncate__kHH7C","form-field__dropdown--has-error":"DropdownSelect-module_form-field__dropdown--has-error__3i7He","form-field__label":"DropdownSelect-module_form-field__label__v8f9B","form-field__label--has-error":"DropdownSelect-module_form-field__label--has-error__Xi5nb","form-field__label--has-label":"DropdownSelect-module_form-field__label--has-label__4N-v-","search-container":"DropdownSelect-module_search-container__jZNeq"};

/**
 * Select - stateless presentational component
 * @param {object} props - props
 * @param {string} props.name - field name
 * @param {string} props.value - field value
 * @param {func} props.onChange - on Change handler
 * @param {string} props.label - label
 * @param {object} props.errors - element errors list
 * @param {object} props.touched - element touched list
 * @param {string} props.hasLabel - has label
 * @param {array} props.options - list of options
 * @param {func} props.handleOnSearchChange - on search input change handler
 * @param {string} props.searchPlaceholder - search placeholder
 * @param {bool} props.inModal - position in modal
 * @param {bool} props.isLoading - list loading spinner
 * @param {bool} props.isEmptyList - display empty list
 * @param {bool} props.hasDescription - description
 * @param {object} props.overflowStyle - overflow style
 * @param {array} props.emphasisedOptions - emphasised options
 * @param {bool} props.liveChanges - search by entering characters
 * @param {bool} props.optionalContent
 * @param {bool} props.hasLoadMoreButton - has load more button
 * @param {function} props.loadMoreEvent - load more button event
 * @param {object} props.i18n - object of translations
 * @return {object} An object of children element
 */

const DropdownSelectForm = ({
  name,
  value,
  onChange,
  errors,
  touched,
  label,
  hasLabel,
  options,
  handleOnSearchChange,
  searchPlaceholder,
  inModal,
  isLoading,
  isEmptyList,
  hasDescription,
  overflowStyle,
  emphasisedOptions,
  liveChanges,
  optionalContent,
  hasLoadMoreButton,
  loadMoreEvent,
  i18n
}) => {
  const [inModalPosition, setInModalPosition] = react.exports.useState(false);
  const labelStyles = useStyles({
    [styles$w['form-field__label']]: true,
    [styles$w['form-field__label--has-error']]: errors[name] || touched[name],
    [styles$w['form-field__label--has-value']]: value[name]
  });
  const dropdownStyles = useStyles({
    [styles$w['form-field__dropdown--has-error']]: errors[name] || touched[name]
  });
  const handleChange = react.exports.useCallback((name, item) => {
    emitCloseDropdown();
    onChange(name, item);
  });
  react.exports.useEffect(() => {
    setInModalPosition(inModal);
  }, [inModal]);

  const renderOption = item => hasDescription ? /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement(Button$1, {
    variant: "dropdown-element",
    onClick: () => handleChange(name, item)
  }, /*#__PURE__*/React.createElement(Heading, {
    level: 5
  }, item?.label), /*#__PURE__*/React.createElement(Paragraph, {
    color: "accent-2",
    size: 12
  }, item?.description)), /*#__PURE__*/React.createElement(Divider, null)) : /*#__PURE__*/React.createElement(Button$1, {
    variant: "dropdown-element",
    onClick: () => handleChange(name, item)
  }, item?.label);

  const renderOptions = () => /*#__PURE__*/React.createElement(react.exports.Fragment, null, emphasisedOptions.map((item, index) => /*#__PURE__*/React.createElement(ListItem, {
    className: "list-item--dropdown",
    key: index
  }, renderOption(item))), !isEmpty(emphasisedOptions) && /*#__PURE__*/React.createElement(Divider, null), options.map((item, index) => /*#__PURE__*/React.createElement(ListItem, {
    className: "list-item--dropdown",
    key: index
  }, renderOption(item))));

  const renderLoadMoreButton = () => /*#__PURE__*/React.createElement(Button$1, {
    align: "left",
    variant: "dropdown",
    onClick: loadMoreEvent,
    hasIcon: true,
    fitWidth: true
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-arrow-down"
  }), i18n.loadmore);

  return /*#__PURE__*/React.createElement("div", null, label && hasLabel && /*#__PURE__*/React.createElement(Label, {
    id: name,
    className: labelStyles
  }, label), /*#__PURE__*/React.createElement(Dropdown, {
    hasInput: true,
    hasFullInputStyle: true,
    asPlaceholder: !value[name]?.label,
    size: "fixed",
    alignment: value ? 'spaced' : 'end',
    inModal: inModalPosition,
    className: dropdownStyles
  }, handleOnSearchChange && /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: styles$w['search-container']
  }, /*#__PURE__*/React.createElement(Searcher$1, {
    setSearchPhrase: handleOnSearchChange,
    placeholder: searchPlaceholder,
    tag: "div",
    protectedSubmit: true,
    liveChanges: liveChanges
  })), /*#__PURE__*/React.createElement(Divider, {
    variant: "dropdown"
  })), /*#__PURE__*/React.createElement(Overflow, null, /*#__PURE__*/React.createElement("div", {
    style: overflowStyle
  }, /*#__PURE__*/React.createElement(List, null, !isLoading && isEmptyList && isEmpty(options) ? /*#__PURE__*/React.createElement(Message, {
    title: "message.empty.search.results",
    message: "message.empty.search.results.small",
    url: "https://images.assets-landingi.com/images/search_empty.svg",
    height: 41,
    titleLevel: 5,
    messageLevel: 6
  }) : /*#__PURE__*/React.createElement(react.exports.Fragment, null, renderOptions(), !isLoading && hasLoadMoreButton && renderLoadMoreButton()), isLoading && /*#__PURE__*/React.createElement(Loader, null)), /*#__PURE__*/React.createElement(Spacer, {
    space: "tiny"
  }))), optionalContent), /*#__PURE__*/React.createElement(Error$1, {
    error: errors[name]
  }));
};

DropdownSelectForm.displayName = 'DropdownSelectForm';
DropdownSelectForm.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  name: propTypes.exports.string.isRequired,
  value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object, propTypes.exports.instanceOf(Object), propTypes.exports.number, propTypes.exports.bool]),
  onChange: propTypes.exports.func,
  onBlur: propTypes.exports.func,
  errors: propTypes.exports.objectOf(propTypes.exports.string),
  touched: propTypes.exports.instanceOf(Object),
  id: propTypes.exports.string.isRequired,
  label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.instanceOf(Object)]),
  hasLabel: propTypes.exports.bool,
  placeholder: propTypes.exports.string,
  options: propTypes.exports.arrayOf(propTypes.exports.shape({
    label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.instanceOf(Object)]),
    value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number, propTypes.exports.bool, propTypes.exports.object])
  })).isRequired,
  handleOnSearchChange: propTypes.exports.func,
  searchPlaceholder: propTypes.exports.string,
  inModal: propTypes.exports.bool,
  hasDescription: propTypes.exports.bool,
  overflowStyle: propTypes.exports.instanceOf(Object),
  emphasisedOptions: propTypes.exports.arrayOf(propTypes.exports.shape({
    label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.instanceOf(Object)]),
    value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number, propTypes.exports.bool, propTypes.exports.object])
  })),
  liveChanges: propTypes.exports.bool,
  optionalContent: propTypes.exports.node,
  hasLoadMoreButton: propTypes.exports.bool,
  loadMoreEvent: propTypes.exports.func,
  isLoading: propTypes.exports.bool,
  isEmptyList: propTypes.exports.bool,
  i18n: propTypes.exports.shape({
    loadmore: propTypes.exports.string
  })
};
DropdownSelectForm.defaultProps = {
  className: '',
  label: '',
  placeholder: '',
  onChange: () => null,
  handleOnSearchChange: null,
  onBlur: () => null,
  errors: {},
  touched: {},
  hasLabel: true,
  value: null,
  searchPlaceholder: '',
  inModal: false,
  empty: '',
  img: '',
  isLoading: false,
  isEmptyList: false,
  hasDescription: false,
  overflowStyle: {},
  emphasisedOptions: [],
  liveChanges: false,
  optionalContent: null,
  hasLoadMoreButton: false,
  loadMoreEvent: () => null,
  i18n: {
    loadmore: ''
  }
};

const setLocalStorage = (key, value) => localStorage.setItem(key, value);

/**
 * Filter - stateful presentational component
 * @param {object} props - props
 * @param {array} props.values - values to choose
 * @param {function} props.setValue - parent component filter setter
 * @param {string | object} props.initialValue - initial value
 * @param {string} props.localStorageKey - local storage key, if filter value should be remebered between sessions
 * @param {string} props.customLabel - customLabel custom label component
 * @return {object} An object of children element
 */

const Filter = ({
  values,
  setValue,
  initialValue,
  localStorageKey,
  customLabel,
  ['data-testid']: dataTestId
}) => {
  const findInitialValue = () => {
    const find = values.find(({
      value
    }) => value === initialValue);
    return find.label;
  };

  const [filterLabel, setLabel] = react.exports.useState(findInitialValue());

  const setFilter = (label, value) => {
    setLabel(label);
    setValue(value);
    localStorageKey && setLocalStorage(localStorageKey, value);
    emitCloseDropdown();
  };

  const dropdownLabel = customLabel ? customLabel(filterLabel) : filterLabel;
  return /*#__PURE__*/React.createElement(Dropdown, {
    label: dropdownLabel,
    size: "medium",
    "data-testid": dataTestId
  }, /*#__PURE__*/React.createElement(List, null, values.map(({
    value,
    label
  }) => /*#__PURE__*/React.createElement(ListItem, {
    key: uuid_1(),
    variant: "dropdown"
  }, /*#__PURE__*/React.createElement(Button$1, {
    onClick: () => setFilter(label, value),
    tag: "a",
    variant: "dropdown"
  }, label)))));
};

Filter.displayName = 'SelectFilter';
Filter.propTypes = {
  initialValue: propTypes.exports.string,
  localStorageKey: propTypes.exports.string,
  setValue: propTypes.exports.func,
  values: propTypes.exports.arrayOf(propTypes.exports.shape({
    label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.instanceOf(Object)]),
    value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number])
  })).isRequired,
  customLabel: propTypes.exports.func,
  ['data-testid']: propTypes.exports.string
};
Filter.defaultProps = {
  initialValue: null,
  localStorageKey: null,
  setValue: () => null,
  customLabel: null,
  ['data-testid']: 'filter-component'
};

var styles$v = {"text--truncate":"GalleryImage-module_text--truncate__tHAVu","background":"GalleryImage-module_background__atEfn","image":"GalleryImage-module_image__0fia7"};

/**
 * GalleryImage - stateless presentational component
 * @param {object} props - props
 * @param {string} props.src - src url
 * @param {func} props.onClick - onClick handler function
 * @param {func} props.onDoubleClick - on double click handler function
 * @return {object} An object of children element
 */

const GalleryImage = ({
  src,
  onClick,
  onDoubleClick
}) => /*#__PURE__*/React.createElement("div", {
  className: styles$v.background,
  onClick: onClick,
  onDoubleClick: onDoubleClick,
  "data-testid": "gallery-image"
}, /*#__PURE__*/React.createElement("div", {
  className: styles$v.image,
  style: {
    backgroundImage: `url(${src})`
  }
}));

GalleryImage.displayName = 'GalleryImage';
GalleryImage.propTypes = {
  src: propTypes.exports.string.isRequired,
  onClick: propTypes.exports.func,
  onDoubleClick: propTypes.exports.func
};
GalleryImage.defaultProps = {
  onClick: () => null,
  onDoubleClick: () => null
};

var styles$u = {"text--truncate":"FieldGroup-module_text--truncate__oU0d-","field-group":"FieldGroup-module_field-group__TGqEE","field-group--has-error":"FieldGroup-module_field-group--has-error__8tEhR"};

/**
 * Field Group  - stateless presentational component
 * @param {object} props - props
 * @param {object} props.errors
 * @param {object} props.touched
 * @param {string} props.label
 * @param {string} props.name
 * @param {object} props.children
 * @return {object} An object of children element
 */

const FieldGroup = ({
  errors,
  touched,
  label,
  name,
  children
}) => {
  const labelStyles = useStyles({
    [styles$u['field-group--has-error']]: touched[name]
  });
  return /*#__PURE__*/React.createElement("div", {
    className: styles$u['field-group']
  }, label && /*#__PURE__*/React.createElement(Label, {
    className: labelStyles
  }, label), children, touched[name] && /*#__PURE__*/React.createElement(Error$1, {
    error: errors[name]
  }));
};

FieldGroup.displayName = 'FieldGroup';
FieldGroup.propTypes = {
  children: propTypes.exports.node.isRequired,
  touched: propTypes.exports.object,
  label: propTypes.exports.string,
  name: propTypes.exports.string.isRequired,
  errors: propTypes.exports.object
};
FieldGroup.defaultProps = {
  label: '',
  errors: {},
  touched: {}
};

/**
 * Input - stateless presentational component
 * @param {object} props - props
 * @param {object} props.field - react-formik field properties
 * @param {object} props.form - react-formik form properties
 * @param {string} props.id - id of the element
 * @param {string} props.label - label
 * @param {string} props.placeholder - placeholder
 * @param {string} props.type - type of element `text, number etc`
 * @param {number} props.maxLength - max length of input
 * @param {bool} props.autoFocus - autoFocus
 * @param {string|object} props.tooltip - tooltip
 * @param {string} props.focused - focused, keep label by default on top
 * @param {bool} props.disabled - disabled
 * @param {bool} props.required - required
 * @param {string} props.background - color of background `white, transparent', default: white
 * @param {bool} props.alwaysShowLabel - always show label on top
 * @param {object} props.i18n - object of translation
 * @param {string} props.variant - input variant, default ''
 * @return {object} An object of children element
 */

const Input = ({
  className,
  field: {
    name,
    value,
    onChange,
    onBlur
  },
  form: {
    errors,
    touched
  },
  id,
  i18n,
  type,
  disabled,
  maxLength,
  autoFocus,
  required,
  tooltip,
  focused,
  background,
  alwaysShowLabel,
  variant,
  ['data-testid']: dataTestId
}) => {
  const error = getDeepValue(errors, name);
  const isTouched = getDeepValue(touched, name);
  const wrapperStyles = useStyles({
    [styles$16['form-field']]: true,
    [styles$16['form--has-error']]: error && isTouched
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: wrapperStyles
  }, /*#__PURE__*/React.createElement(Input$1, {
    type: type,
    name: name,
    id: id,
    value: value,
    onChange: onChange,
    onBlur: onBlur,
    i18n: i18n,
    disabled: disabled,
    maxLength: maxLength,
    autoFocus: autoFocus,
    required: required,
    tooltip: tooltip,
    focused: focused,
    background: background,
    alwaysShowLabel: alwaysShowLabel,
    variant: variant,
    "data-testid": dataTestId,
    form: true
  }), i18n?.description && !error && /*#__PURE__*/React.createElement(Paragraph, {
    size: "12",
    color: "color-8"
  }, i18n.description), isTouched && /*#__PURE__*/React.createElement(Error$1, {
    error: error
  }));
};

Input.displayName = 'Input';
Input.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  field: propTypes.exports.shape({
    name: propTypes.exports.string.isRequired,
    value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number]),
    onChange: propTypes.exports.func,
    onBlur: propTypes.exports.func
  }).isRequired,
  form: propTypes.exports.shape({
    errors: propTypes.exports.instanceOf(Object),
    touched: propTypes.exports.instanceOf(Object)
  }).isRequired,
  id: propTypes.exports.string.isRequired,
  label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),
  placeholder: propTypes.exports.string,
  type: propTypes.exports.string,
  disabled: propTypes.exports.bool,
  maxLength: propTypes.exports.number,
  autoFocus: propTypes.exports.bool,
  required: propTypes.exports.bool,
  tooltip: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.instanceOf(Object)]),
  background: propTypes.exports.oneOf(['white', 'transparent']),
  focused: propTypes.exports.string,
  alwaysShowLabel: propTypes.exports.bool,
  i18n: propTypes.exports.shape({
    label: propTypes.exports.string,
    placeholder: propTypes.exports.string,
    description: propTypes.exports.string
  }),
  variant: propTypes.exports.string,
  ['data-testid']: propTypes.exports.string
};
Input.defaultProps = {
  className: '',
  label: '',
  placeholder: '',
  type: 'text',
  disabled: false,
  maxLength: 524288,
  autoFocus: false,
  required: true,
  tooltip: '',
  background: 'white',
  focused: 'false',
  alwaysShowLabel: false,
  i18n: {
    label: null,
    placeholder: null,
    description: null
  },
  variant: '',
  ['data-testid']: 'input-component'
};

var styles$t = {"text--truncate":"Radio-module_text--truncate__Bjb2G","radio":"Radio-module_radio__B6HML","radio__overlay":"Radio-module_radio__overlay__G3gzy"};

/**
 * Radio - stateless presentational component
 * @param {object} props - props
 * @param {object} props.field - react-formik field properties
 * @param {object} props.form - react-formik form properties
 * @param {string} props.id - id of the element
 * @param {string} props.label - label
 * @param {string|array} props.className - list of class names, default: radio
 * @param {string} props.type - type of element `text, number etc`
 * @param {bool} props.disabled - radio button is disabled
 * @return {object} An object of children element
 */

const Radio = ({
  field: {
    name,
    value,
    onChange,
    onBlur
  },
  id,
  label,
  className,
  type,
  disabled
}) => {
  const radioStyles = useStyles({
    [styles$t.radio]: true
  }, className);
  return /*#__PURE__*/React.createElement("label", {
    className: radioStyles
  }, label && /*#__PURE__*/React.createElement("label", {
    htmlFor: id
  }, label), /*#__PURE__*/React.createElement("input", {
    name: name,
    id: id,
    type: type,
    value: id,
    checked: id === value,
    onChange: onChange,
    onBlur: onBlur,
    className: radioStyles,
    disabled: disabled
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$t.radio__overlay
  }));
};

Radio.displayName = 'Radio';
Radio.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  type: propTypes.exports.string,
  field: propTypes.exports.shape({
    name: propTypes.exports.string.isRequired,
    value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.bool]),
    onChange: propTypes.exports.func,
    onBlur: propTypes.exports.func
  }).isRequired,
  form: propTypes.exports.shape({
    errors: propTypes.exports.instanceOf(Object),
    touched: propTypes.exports.instanceOf(Object)
  }),
  id: propTypes.exports.string.isRequired,
  label: propTypes.exports.string,
  disabled: propTypes.exports.bool
};
Radio.defaultProps = {
  className: '',
  type: 'radio',
  label: '',
  disabled: false
};

var styles$s = {"text--truncate":"Checkbox-module_text--truncate__JdbPW","input__checkbox":"Checkbox-module_input__checkbox__aJIGW"};

/**
 * Checkbox - stateless presentational component
 * @param {object} props - props
 * @param {func} props.onChange - onChange handler
 * @param {func} props.className - custom styles
 * @param {func} props.disabled - disable checkbox
 * @param {func} props.formikKey - formik key
 * @return {object} An object of children element
 */

const Checkbox$1 = ({
  onChange,
  className,
  checked,
  disabled,
  formikKey,
  ['data-testid']: dataTestId
}) => {
  const checkboxStyles = useStyles({
    [styles$s.input__checkbox]: true
  }, className);
  return /*#__PURE__*/React.createElement("label", {
    className: checkboxStyles
  }, /*#__PURE__*/React.createElement("input", {
    "data-testid": dataTestId,
    onChange: onChange,
    name: formikKey,
    checked: checked,
    disabled: disabled,
    type: "checkbox"
  }), /*#__PURE__*/React.createElement("div", null));
};

Checkbox$1.displayName = 'Checkbox';
Checkbox$1.propTypes = {
  onChange: propTypes.exports.func.isRequired,
  checked: propTypes.exports.bool.isRequired,
  className: propTypes.exports.string,
  disabled: propTypes.exports.bool,
  formikKey: propTypes.exports.string,
  ['data-testid']: propTypes.exports.string
};
Checkbox$1.defaultProps = {
  className: '',
  disabled: false,
  formikKey: null,
  ['data-testid']: undefined
};

var styles$r = {"text--truncate":"Checkbox-module_text--truncate__TZFGj","checkbox-container":"Checkbox-module_checkbox-container__GaVTZ","checkbox__input":"Checkbox-module_checkbox__input__meFPL","checkbox__input__label":"Checkbox-module_checkbox__input__label__arQxP"};

/**
 * Checkbox - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: ''
 * @param {object} props.field - react-formik field properties
 * @param {object} props.form - react-formik form properties
 * @param {string} props.id - id of the element
 * @param {string} props.label - label, default: ''
 * @param {string} props.type - type of element, default: 'checkbox'
 * @return {object} An object of children element
 */

const Checkbox = ({
  field: {
    name,
    value,
    onChange,
    onBlur
  },
  form: {
    errors,
    touched
    /*setFieldValue  [UNUSED_VARIABLE]*/

  },
  id,
  label,
  className,
  type
}) => {
  const error = getDeepValue(errors, name);
  const isTouched = getDeepValue(touched, name);
  const containerStyles = useStyles({
    [styles$r['checkbox-container']]: true
  }, className);
  const inputStyles = useStyles({
    [styles$r['checkbox__input']]: true
  });
  const labelStyles = useStyles({
    [styles$r['checkbox__label']]: true
  });
  return /*#__PURE__*/React.createElement("div", {
    className: containerStyles
  }, /*#__PURE__*/React.createElement("label", {
    className: inputStyles
  }, /*#__PURE__*/React.createElement("input", {
    name: name,
    checked: value,
    onChange: onChange,
    onBlur: onBlur,
    type: type,
    id: id
  }), /*#__PURE__*/React.createElement("div", null)), label && /*#__PURE__*/React.createElement("label", {
    htmlFor: id,
    className: labelStyles
  }, label, isTouched && /*#__PURE__*/React.createElement(Error$1, {
    error: error
  })));
};

Checkbox.displayName = 'Checkbox';
Checkbox.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  type: propTypes.exports.string,
  field: propTypes.exports.shape({
    name: propTypes.exports.string.isRequired,
    value: propTypes.exports.bool,
    onChange: propTypes.exports.func,
    onBlur: propTypes.exports.func
  }).isRequired,
  form: propTypes.exports.shape({
    errors: propTypes.exports.instanceOf(Object),
    touched: propTypes.exports.instanceOf(Object),
    setFieldValue: propTypes.exports.func
  }).isRequired,
  id: propTypes.exports.string.isRequired,
  label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.objectOf])
};
Checkbox.defaultProps = {
  className: '',
  label: '',
  type: 'checkbox'
};

var styles$q = {"text--truncate":"Toggle-module_text--truncate__8F6Mx","toggle-container":"Toggle-module_toggle-container__TKOUJ","toggle":"Toggle-module_toggle__yQYkY","toggle--checked":"Toggle-module_toggle--checked__k6ksL","toggle--checked-disabled":"Toggle-module_toggle--checked-disabled__u5dql","toggle__checkbox":"Toggle-module_toggle__checkbox__Qy8tI","toggle__button":"Toggle-module_toggle__button__qtF8-","toggle__label":"Toggle-module_toggle__label__gVtDC","toggle--disabled":"Toggle-module_toggle--disabled__3-1zu"};

/**
 * Toggle - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: ''
 * @param {string} props.name - name
 * @param {bool} props.checked - checked
 * @param {string} props.type
 * @param {func} props.onChange - onChange
 * @param {func} props.onBlur - onBlur
 * @param {string} props.id - id
 * @param {string} props.label - label, default: ''
 * @param {bool} props.disabled - disabled, default: false
 * @return {object} An object of children element
 */

const Toggle = ({
  name,
  checked,
  onChange,
  onBlur,
  id,
  label,
  className,
  disabled,
  ['data-testid']: dataTestId
}) => {
  const wrapperStyles = useStyles({
    [styles$q['toggle-container']]: true
  }, className);
  const labelStyles = useStyles({
    [styles$q.toggle]: true,
    [styles$q['toggle--checked']]: checked,
    [styles$q['toggle--checked-disabled']]: checked && disabled,
    [styles$q['toggle--disabled']]: !checked && disabled
  });
  return /*#__PURE__*/React.createElement("div", {
    className: wrapperStyles
  }, /*#__PURE__*/React.createElement("label", {
    className: labelStyles
  }, /*#__PURE__*/React.createElement("input", _extends$6({
    name: name,
    className: styles$q.toggle__checkbox,
    checked: checked,
    onChange: onChange,
    onBlur: onBlur,
    type: "checkbox",
    id: id,
    disabled: disabled
  }, dataTestId ? {
    ['data-testid']: dataTestId
  } : {})), /*#__PURE__*/React.createElement("span", {
    className: styles$q.toggle__button
  })), label && /*#__PURE__*/React.createElement("label", {
    htmlFor: id
  }, /*#__PURE__*/React.createElement(Html, {
    value: label
  })));
};

Toggle.displayName = 'Toggle';
Toggle.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  name: propTypes.exports.string.isRequired,
  checked: propTypes.exports.bool.isRequired,
  onChange: propTypes.exports.func.isRequired,
  onBlur: propTypes.exports.func,
  id: propTypes.exports.string.isRequired,
  label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.objectOf]),
  disabled: propTypes.exports.bool,
  ['data-testid']: propTypes.exports.string
};
Toggle.defaultProps = {
  className: '',
  label: '',
  onBlur: () => null,
  disabled: false,
  ['data-testid']: null
};

/**
 * Formik toggle - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className
 * @param {string} props.type
 * @param {object} props.field
 * @param {object} props.form
 * @param {string} props.id
 * @param {string} props.label
 * @return {object} An object of children element
 */

const FormikToggle = ({
  field: {
    name,
    value,
    onChange,
    onBlur
  },
  form: {
    errors,
    touched
  },
  id,
  label,
  className,
  type
}) => {
  const wrapperStyles = useStyles({
    [styles$q['toggle-container']]: true
  }, className);
  const labelStyles = useStyles({
    [styles$q.toggle]: true,
    [styles$q['toggle--checked']]: value
  });
  return /*#__PURE__*/React.createElement("div", {
    className: wrapperStyles
  }, /*#__PURE__*/React.createElement("label", {
    className: labelStyles
  }, /*#__PURE__*/React.createElement("input", {
    name: name,
    className: styles$q.toggle__checkbox,
    checked: value,
    onChange: onChange,
    onBlur: onBlur,
    type: type,
    id: id
  }), /*#__PURE__*/React.createElement("span", {
    className: styles$q.toggle__button
  })), label && /*#__PURE__*/React.createElement("label", {
    htmlFor: id,
    className: styles$q.toggle__label
  }, label, touched[name] && /*#__PURE__*/React.createElement(Error$1, {
    error: errors[name]
  })));
};

FormikToggle.displayName = 'FormikToggle';
FormikToggle.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  type: propTypes.exports.string,
  field: propTypes.exports.shape({
    name: propTypes.exports.string.isRequired,
    value: propTypes.exports.bool,
    onChange: propTypes.exports.func,
    onBlur: propTypes.exports.func
  }).isRequired,
  form: propTypes.exports.shape({
    errors: propTypes.exports.instanceOf(Object),
    touched: propTypes.exports.instanceOf(Object),
    setFieldValue: propTypes.exports.func
  }).isRequired,
  id: propTypes.exports.string.isRequired,
  label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.objectOf])
};
FormikToggle.defaultProps = {
  className: '',
  type: 'checkbox',
  label: ''
};

var reactAdvancedTimeInput = {exports: {}};

var dist = {};

var __extends = commonjsGlobal$1 && commonjsGlobal$1.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = commonjsGlobal$1 && commonjsGlobal$1.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __rest = commonjsGlobal$1 && commonjsGlobal$1.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var __importDefault = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(dist, "__esModule", {
  value: true
});

var react_1 = __importDefault(react.exports);

var DEFAULT_COLON = ':';
var DEFAULT_VALUE_SHORT = "00" + DEFAULT_COLON + "00";
var DEFAULT_VALUE_FULL = "00" + DEFAULT_COLON + "00" + DEFAULT_COLON + "00";

function isNumber(value) {
  var number = Number(value);
  return !isNaN(number) && String(value) === String(number);
}

dist.isNumber = isNumber;

function formatTimeItem(value) {
  return ((value || '') + "00").substr(0, 2);
}

dist.formatTimeItem = formatTimeItem;

function buildDecimalPlace(oldDecimalBlock, newDecimalBlock, maxDecimalBlock, newCursorBlockPosition) {
  if (!oldDecimalBlock) return {
    newDecimalBlock: newDecimalBlock,
    newCursorBlockPosition: newCursorBlockPosition
  };
  var firstDigitOfMaxDecimalBlock = Number(maxDecimalBlock.toString()[0]);
  var secondDigitOfMaxDecimalBlock = Number(maxDecimalBlock.toString()[1]);
  var firstDigitOfOldDecimalBlock = Number(oldDecimalBlock[0]);
  var secondDigitOfOldDecimalBlock = Number(oldDecimalBlock[1]);
  var firstDigitOfNewDecimalBlock = Number(newDecimalBlock[0]);
  var secondDigitOfNewDecimalBlock = Number(newDecimalBlock[1]);

  if (firstDigitOfNewDecimalBlock > firstDigitOfMaxDecimalBlock) {
    newDecimalBlock = oldDecimalBlock;
    newCursorBlockPosition -= 1;
  } else if (firstDigitOfNewDecimalBlock === firstDigitOfMaxDecimalBlock) {
    if (firstDigitOfOldDecimalBlock === firstDigitOfMaxDecimalBlock && secondDigitOfNewDecimalBlock > secondDigitOfMaxDecimalBlock) {
      newDecimalBlock = "" + firstDigitOfMaxDecimalBlock + secondDigitOfOldDecimalBlock;
      newCursorBlockPosition -= 2;
    } else if (secondDigitOfNewDecimalBlock > secondDigitOfMaxDecimalBlock) {
      newDecimalBlock = maxDecimalBlock.toString();
    }
  }

  return {
    newDecimalBlock: newDecimalBlock,
    newCursorBlockPosition: newCursorBlockPosition
  };
}

function validateTimeAndCursor(showSeconds, value, defaultValue, colon, cursorPosition, maxHours, maxMinutes, maxSeconds) {
  if (showSeconds === void 0) {
    showSeconds = false;
  }

  if (value === void 0) {
    value = '';
  }

  if (defaultValue === void 0) {
    defaultValue = '';
  }

  if (colon === void 0) {
    colon = DEFAULT_COLON;
  }

  if (cursorPosition === void 0) {
    cursorPosition = 0;
  }

  if (maxHours === void 0) {
    maxHours = 23;
  }

  if (maxMinutes === void 0) {
    maxMinutes = 59;
  }

  if (maxSeconds === void 0) {
    maxSeconds = 59;
  }

  var _a = defaultValue.split(colon),
      oldHours = _a[0],
      oldMinutes = _a[1],
      oldSeconds = _a[2];

  var newCursorPosition = Number(cursorPosition);

  var _b = String(value).split(colon),
      newHours = _b[0],
      newMinutes = _b[1],
      newSeconds = _b[2];

  newHours = formatTimeItem(newHours);

  var _c = buildDecimalPlace(oldHours, newHours, maxHours, newCursorPosition),
      newHoursBlock = _c.newDecimalBlock,
      newCursorHoursPosition = _c.newCursorBlockPosition;

  newHours = newHoursBlock;
  newCursorPosition = newCursorHoursPosition;
  newMinutes = formatTimeItem(newMinutes);

  var _d = buildDecimalPlace(oldMinutes, newMinutes, maxMinutes, newCursorPosition),
      newMinutesBlock = _d.newDecimalBlock,
      newCursorMinutesPosition = _d.newCursorBlockPosition;

  newMinutes = newMinutesBlock;
  newCursorPosition = newCursorMinutesPosition;

  if (showSeconds) {
    newSeconds = formatTimeItem(newSeconds);

    var _e = buildDecimalPlace(oldSeconds, newSeconds, maxSeconds, newCursorPosition),
        newSecondsBlock = _e.newDecimalBlock,
        newCursorSecondsPosition = _e.newCursorBlockPosition;

    newSeconds = newSecondsBlock;
    newCursorPosition = newCursorSecondsPosition;
  }

  var validatedValue = showSeconds ? "" + newHours + colon + newMinutes + colon + newSeconds : "" + newHours + colon + newMinutes;
  return [validatedValue, newCursorPosition];
}

dist.validateTimeAndCursor = validateTimeAndCursor;

var TimeInput$1 =
/** @class */
function (_super) {
  __extends(TimeInput, _super);

  function TimeInput(props) {
    var _this = _super.call(this, props) || this;

    var _showSeconds = Boolean(props.showSeconds);

    var _defaultValue = _showSeconds ? DEFAULT_VALUE_FULL : DEFAULT_VALUE_SHORT;

    var _colon = props.colon && props.colon.length === 1 ? props.colon : DEFAULT_COLON;

    var _maxHours = props.maxHours,
        _maxMinutes = props.maxMinutes,
        _maxSeconds = props.maxSeconds;
    var validatedTime = validateTimeAndCursor(_showSeconds, _this.props.value, _defaultValue, _colon, 0, _maxHours, _maxMinutes, _maxSeconds)[0];
    _this.state = {
      value: validatedTime,
      _colon: _colon,
      _showSeconds: _showSeconds,
      _defaultValue: _defaultValue,
      _maxLength: _defaultValue.length,
      _maxHours: _maxHours,
      _maxMinutes: _maxMinutes,
      _maxSeconds: _maxSeconds
    };
    _this.onInputChange = _this.onInputChange.bind(_this);
    return _this;
  }

  TimeInput.prototype.componentDidUpdate = function (prevProps) {
    if (this.props.value !== prevProps.value) {
      var validatedTime = validateTimeAndCursor(this.state._showSeconds, this.props.value, this.state._defaultValue, this.state._colon, 0, this.props.maxHours, this.props.maxMinutes, this.props.maxSeconds)[0];
      this.setState({
        value: validatedTime
      });
    }
  };

  TimeInput.prototype.onInputChange = function (event, callback) {
    var oldValue = this.state.value;
    var inputEl = event.target;
    var inputValue = inputEl.value;
    var position = inputEl.selectionEnd || 0;
    var isTyped = inputValue.length > oldValue.length;
    var cursorCharacter = inputValue[position - 1];
    var addedCharacter = isTyped ? cursorCharacter : null;
    var removedCharacter = isTyped ? null : oldValue[position];
    var replacedSingleCharacter = inputValue.length === oldValue.length ? oldValue[position - 1] : null;
    var colon = this.state._colon;
    var newValue = oldValue;
    var newPosition = position;

    if (addedCharacter !== null) {
      if (position > this.state._maxLength) {
        newPosition = this.state._maxLength;
      } else if ((position === 3 || position === 6) && addedCharacter === colon) {
        newValue = "" + inputValue.substr(0, position - 1) + colon + inputValue.substr(position + 1);
      } else if ((position === 3 || position === 6) && isNumber(addedCharacter)) {
        newValue = "" + inputValue.substr(0, position - 1) + colon + addedCharacter + inputValue.substr(position + 2);
        newPosition = position + 1;
      } else if (isNumber(addedCharacter)) {
        // user typed a number
        newValue = inputValue.substr(0, position - 1) + addedCharacter + inputValue.substr(position + 1);

        if (position === 2 || position === 5) {
          newPosition = position + 1;
        }
      } else {
        // if user typed NOT a number, then keep old value & position
        newPosition = position - 1;
      }
    } else if (replacedSingleCharacter !== null) {
      // user replaced only a single character
      if (isNumber(cursorCharacter)) {
        if (position - 1 === 2 || position - 1 === 5) {
          newValue = "" + inputValue.substr(0, position - 1) + colon + inputValue.substr(position);
        } else {
          newValue = inputValue;
        }
      } else {
        // user replaced a number on some non-number character
        newValue = oldValue;
        newPosition = position - 1;
      }
    } else if (typeof cursorCharacter !== 'undefined' && cursorCharacter !== colon && !isNumber(cursorCharacter)) {
      // set of characters replaced by non-number
      newValue = oldValue;
      newPosition = position - 1;
    } else if (removedCharacter !== null) {
      if ((position === 2 || position === 5) && removedCharacter === colon) {
        newValue = inputValue.substr(0, position - 1) + "0" + colon + inputValue.substr(position);
        newPosition = position - 1;
      } else {
        // user removed a number
        newValue = inputValue.substr(0, position) + "0" + inputValue.substr(position);
      }
    }

    var _a = validateTimeAndCursor(this.state._showSeconds, newValue, oldValue, colon, newPosition, this.props.maxHours, this.props.maxMinutes, this.props.maxSeconds),
        validatedTime = _a[0],
        validatedCursorPosition = _a[1];

    this.setState({
      value: validatedTime
    }, function () {
      inputEl.selectionStart = validatedCursorPosition;
      inputEl.selectionEnd = validatedCursorPosition;
      callback(event, validatedTime);
    });
    event.persist();
  };

  TimeInput.prototype.render = function () {
    var _this = this;

    var value = this.state.value;

    var _a = this.props,
        onChange = _a.onChange,
        onFocus = _a.onFocus,
        onKeyDown = _a.onKeyDown,
        onBlur = _a.onBlur,
        style = _a.style,
        showSeconds = _a.showSeconds,
        input = _a.input,
        inputRef = _a.inputRef;
        _a.colon;
        _a.maxHours;
        _a.maxMinutes;
        _a.maxSeconds;
        var props = __rest(_a, ["onChange", "onFocus", "onKeyDown", "onBlur", "style", "showSeconds", "input", "inputRef", "colon", "maxHours", "maxMinutes", "maxSeconds"]);

    var onChangeHandler = function (event) {
      return _this.onInputChange(event, function (e, v) {
        return onChange && onChange(e, v);
      });
    };

    if (input) {
      return react_1.default.cloneElement(input, __assign(__assign({}, props), {
        value: value,
        style: style,
        onChange: onChangeHandler
      }));
    }

    return react_1.default.createElement("input", __assign({
      type: "text"
    }, props, {
      ref: inputRef,
      value: value,
      onChange: onChangeHandler,
      onKeyDown: function (event) {
        return onKeyDown && onKeyDown(event);
      },
      onFocus: function (event) {
        return onFocus && onFocus(event);
      },
      onBlur: function (event) {
        return onBlur && onBlur(event);
      },
      style: __assign({
        width: showSeconds ? 54 : 35
      }, style)
    }));
  };

  TimeInput.defaultProps = {
    showSeconds: false,
    input: null,
    style: {},
    colon: DEFAULT_COLON,
    maxHours: 23,
    maxMinutes: 59,
    maxSeconds: 59
  };
  return TimeInput;
}(react_1.default.Component);

dist.default = TimeInput$1;

(function (module) {
	module.exports = dist;
} (reactAdvancedTimeInput));

var TimeInput = /*@__PURE__*/getDefaultExportFromCjs(reactAdvancedTimeInput.exports);

const TIME_FORMAT_PL = [{
  label: '00:00',
  value: '00:00'
}, {
  label: '00:30',
  value: '00:30'
}, {
  label: '01:00',
  value: '01:00'
}, {
  label: '01:30',
  value: '01:30'
}, {
  label: '02:00',
  value: '02:00'
}, {
  label: '02:30',
  value: '02:30'
}, {
  label: '03:00',
  value: '03:00'
}, {
  label: '03:30',
  value: '03:30'
}, {
  label: '04:00',
  value: '04:00'
}, {
  label: '04:30',
  value: '04:30'
}, {
  label: '05:00',
  value: '05:00'
}, {
  label: '05:30',
  value: '05:30'
}, {
  label: '06:00',
  value: '06:00'
}, {
  label: '06:30',
  value: '06:30'
}, {
  label: '07:00',
  value: '07:00'
}, {
  label: '07:30',
  value: '07:30'
}, {
  label: '08:00',
  value: '08:00'
}, {
  label: '08:30',
  value: '08:30'
}, {
  label: '09:00',
  value: '09:00'
}, {
  label: '09:30',
  value: '09:30'
}, {
  label: '10:00',
  value: '10:00'
}, {
  label: '10:30',
  value: '10:30'
}, {
  label: '11:00',
  value: '11:00'
}, {
  label: '11:30',
  value: '11:30'
}, {
  label: '12:00',
  value: '12:00'
}, {
  label: '12:30',
  value: '12:30'
}, {
  label: '13:00',
  value: '13:00'
}, {
  label: '13:30',
  value: '13:30'
}, {
  label: '14:00',
  value: '14:00'
}, {
  label: '14:30',
  value: '14:30'
}, {
  label: '15:00',
  value: '15:00'
}, {
  label: '15:30',
  value: '15:30'
}, {
  label: '16:00',
  value: '16:00'
}, {
  label: '16:30',
  value: '16:30'
}, {
  label: '17:00',
  value: '17:00'
}, {
  label: '17:30',
  value: '17:30'
}, {
  label: '18:00',
  value: '18:00'
}, {
  label: '18:30',
  value: '18:30'
}, {
  label: '19:00',
  value: '19:00'
}, {
  label: '19:30',
  value: '19:30'
}, {
  label: '20:00',
  value: '20:00'
}, {
  label: '20:30',
  value: '20:30'
}, {
  label: '21:00',
  value: '21:00'
}, {
  label: '21:30',
  value: '21:30'
}, {
  label: '22:00',
  value: '22:00'
}, {
  label: '22:30',
  value: '22:30'
}, {
  label: '23:00',
  value: '23:00'
}, {
  label: '23:30',
  value: '23:30'
}];
const TIME_FORMAT_EN = [{
  label: '12:00',
  value: '00:00'
}, {
  label: '12:30',
  value: '00:30'
}, {
  label: '01:00',
  value: '01:00'
}, {
  label: '01:30',
  value: '01:30'
}, {
  label: '02:00',
  value: '02:00'
}, {
  label: '02:30',
  value: '02:30'
}, {
  label: '03:00',
  value: '03:00'
}, {
  label: '03:30',
  value: '03:30'
}, {
  label: '04:00',
  value: '04:00'
}, {
  label: '04:30',
  value: '04:30'
}, {
  label: '05:00',
  value: '05:00'
}, {
  label: '05:30',
  value: '05:30'
}, {
  label: '06:00',
  value: '06:00'
}, {
  label: '06:30',
  value: '06:30'
}, {
  label: '07:00',
  value: '07:00'
}, {
  label: '07:30',
  value: '07:30'
}, {
  label: '08:00',
  value: '08:00'
}, {
  label: '08:30',
  value: '08:30'
}, {
  label: '09:00',
  value: '09:00'
}, {
  label: '09:30',
  value: '09:30'
}, {
  label: '10:00',
  value: '10:00'
}, {
  label: '10:30',
  value: '10:30'
}, {
  label: '11:00',
  value: '11:00'
}, {
  label: '11:30',
  value: '11:30'
}];
const AM = 'AM';
const PM = 'PM';
const CLOCK_OPTIONS = [{
  value: AM,
  label: AM
}, {
  value: PM,
  label: PM
}];
const MAX_HOUR_PL = 23;
const MAX_HOUR_EN = 12;

/**
 * convert am/pm to 0-23 and vice versa
 */

const processTime = (time, clockType) => {
  if (clockType) {
    const [hours, minutes] = time.split(':');
    const hoursNum = Number(hours);

    if (clockType === AM && hoursNum >= 12) {
      const hh = Number(hoursNum) - 12 === 0 ? '00' : Number(hoursNum) - 12;
      return `${hh}:${minutes}`;
    }

    if (clockType === PM && hoursNum < 12) {
      return `${Number(hoursNum) + 12}:${minutes}`;
    }

    if (clockType === PM && hoursNum === 12) {
      return `12:${minutes}`;
    }

    return time;
  }

  return time;
};
/**
 * Convert string time value in 24 hour format to 12 hour format
 * eg. '23:30' => '11:30'
 * @param {string} time24
 * @returns {string} an string with formated hour
 */

const convertTimeFrom24to12 = time24 => {
  const [sHours, minutes] = time24.match(/([0-9]{1,2}):([0-9]{2})/).slice(1);
  let hours = +sHours % 12 || 12;

  if (hours < 10) {
    hours = `0${hours}`;
  }

  return `${hours}:${minutes}`;
};
/**
 * check if current time is am or pm if clock time is am/pm
 */

const isAmOrPm = (time, isAmPmType) => {
  const [hours] = time.split(':');
  const hoursNum = Number(hours);

  if (isAmPmType && hoursNum >= 12) {
    return PM;
  } else if (isAmPmType && hoursNum < 12) {
    return AM;
  } else {
    return null;
  }
};

var styles$p = {"text--truncate":"TimeSelect-module_text--truncate__73unQ","time-select__label":"TimeSelect-module_time-select__label__25pOX","time-select__label--disabled":"TimeSelect-module_time-select__label--disabled__Ou4QO","time-select__dropdown":"TimeSelect-module_time-select__dropdown__SmdkZ","time-select__clock-type-select":"TimeSelect-module_time-select__clock-type-select__DvkrZ"};

/**
 * TimeSelect - stateless component for selecting time
 * @param {object} props - props
 * @param {object} props.inModalName - class name of modal within time select gonna be render
 * @param {string} props.value - current selected time
 * @param {function} props.onChange - function to change time
 * @param {string} props.formikKey - name on formik 'nested' keys
 * @param {string} props.label - label
 * @param {bool} props.disabled - when it's true, time can't be select, default: false
 * @return {object} An object of children element
 */

const TimeSelect = ({
  inModalName,
  value,
  onChange,
  formikKey,
  label,
  disabled
}) => {
  const isAmPmType = getLanguage !== 'pl';
  const timeSelectLabelClasses = useStyles({
    [styles$p['time-select__label']]: true,
    [styles$p['time-select__label--disabled']]: disabled
  });
  const timeSelectDropdownClasses = useStyles({
    [styles$p['time-select__dropdown']]: true
  });
  const [clockType, setClockType] = react.exports.useState(isAmOrPm(value, isAmPmType));
  /**
   * checks if user want to use formik or not
   */

  const handleTimeChange = react.exports.useCallback((newTime, type = clockType) => {
    if (formikKey) {
      onChange(formikKey, processTime(newTime, type));
    } else {
      onChange(processTime(newTime, type));
    }
  }, [formikKey, clockType]);

  const handleTimeInputChange = (event, newTime) => {
    if (disabled) return;

    if (formikKey) {
      onChange(formikKey, processTime(newTime, clockType));
    } else {
      onChange(processTime(newTime, clockType));
    }
  };

  const handleClockChange = react.exports.useCallback(type => {
    handleTimeChange(value, type);
    setClockType(type);
  });
  /**
   * render label with custom time input
   */

  const renderDropdownLabel = react.exports.useCallback(selectedValue => /*#__PURE__*/React.createElement(build.exports.Row, {
    className: timeSelectLabelClasses,
    vertical: "center"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-time"
  }), /*#__PURE__*/React.createElement(TimeInput, {
    onChange: handleTimeInputChange,
    value: selectedValue?.value,
    maxHours: isAmPmType ? MAX_HOUR_EN : MAX_HOUR_PL
  })), [disabled, value, isAmPmType]);
  return /*#__PURE__*/React.createElement(build.exports.Row, {
    vertical: "end"
  }, /*#__PURE__*/React.createElement(DropdownSelect, {
    className: timeSelectDropdownClasses,
    overflowStyle: {
      maxHeight: 180
    },
    inModalName: inModalName,
    alwaysShowLabel: true,
    label: label,
    dropdownLabel: renderDropdownLabel,
    options: isAmPmType ? TIME_FORMAT_EN : TIME_FORMAT_PL,
    value: isAmPmType ? convertTimeFrom24to12(value) : value,
    onChange: handleTimeChange,
    customValue: true,
    isOpenDisabled: disabled
  }), isAmPmType ? /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement(Spreader, {
    spread: "small"
  }), /*#__PURE__*/React.createElement(DropdownSelect, {
    inModalName: inModalName,
    options: CLOCK_OPTIONS,
    value: clockType,
    onChange: handleClockChange,
    className: styles$p['time-select__clock-type-select'],
    isOpenDisabled: disabled
  })) : null);
};

TimeSelect.displayName = 'TimeSelect';
TimeSelect.propTypes = {
  inModalName: propTypes.exports.string,
  value: propTypes.exports.string,
  label: propTypes.exports.string.isRequired,
  onChange: propTypes.exports.func.isRequired,
  formikKey: propTypes.exports.string,
  disabled: propTypes.exports.bool
};
TimeSelect.defaultProps = {
  inModalName: '',
  value: '12:00',
  formikKey: null,
  disabled: false
};

var styles$o = {"text--truncate":"Indicator-module_text--truncate__5Pong","indicator":"Indicator-module_indicator__FJkLr","indicator__element":"Indicator-module_indicator__element__DxAqG","indicator__element--isAlert":"Indicator-module_indicator__element--isAlert__kbI62"};

/**
 * Indicator - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string|array} props.content - content
 * @param {boolean} props.isAlert
 * @param {string|array} props.className - list of class names
 * @param {function} props.onClick - click handler
 * @return {object} An object of children element
 */

const Indicator = ({
  children,
  className,
  content,
  isAlert,
  onClick
}) => {
  const elementStyles = useStyles({
    [styles$o['indicator']]: true
  }, className);
  const indicatorStyles = useStyles({
    [styles$o['indicator__element']]: true,
    [styles$o['indicator__element--isAlert']]: isAlert
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    className: elementStyles,
    onClick: onClick
  }, /*#__PURE__*/React.createElement("span", {
    className: indicatorStyles
  }, content), children);
};

Indicator.displayName = 'Indicator';
Indicator.propTypes = {
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  content: propTypes.exports.string,
  isAlert: propTypes.exports.bool,
  onClick: propTypes.exports.func
};
Indicator.defaultProps = {
  content: null,
  isAlert: false,
  onClick: () => {}
};

var styles$n = {"text--truncate":"InfinityScroll-module_text--truncate__n1kJI","wrapper":"InfinityScroll-module_wrapper__ozrI7","loading-hide":"InfinityScroll-module_loading-hide__ePeD9"};

/**
 * InfinityScroll - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - content to display
 * @param {func} props.loadMore - callback function, invoked when loader is seen
 * @param {func} props.isLastPage - hide loader
 * @return {object} An object of children element
 */

const InfinityScroll = ({
  className,
  children,
  loadMore,
  isLastPage
}) => {
  const loaderRef = react.exports.useRef(null);
  const [shouldFetch, setShouldFetch] = react.exports.useState(false);

  const handleObserver = entities => {
    const target = entities[0];

    if (target.isIntersecting) {
      setShouldFetch(true);
    }
  };

  react.exports.useEffect(() => {
    const options = {
      root: null,
      rootMargin: '50px',
      threshold: 0.1
    };
    const observer = new IntersectionObserver(handleObserver, options);

    if (loaderRef.current) {
      observer.observe(loaderRef.current);
    }
  }, []);
  react.exports.useEffect(() => {
    if (shouldFetch === true) {
      loadMore();
      setShouldFetch(false);
    }
  }, [shouldFetch]);
  const wrapperStyles = useStyles({
    [styles$n.wrapper]: true
  }, className);
  const loaderStyles = useStyles({
    [styles$n['loading-hide']]: isLastPage
  });
  return /*#__PURE__*/React.createElement("div", {
    className: wrapperStyles
  }, children, /*#__PURE__*/React.createElement("div", {
    className: loaderStyles,
    ref: loaderRef,
    "data-testid": "loader-wrapper"
  }, /*#__PURE__*/React.createElement(Loader, null)));
};

InfinityScroll.displayName = 'InfinityScroll';
InfinityScroll.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.array, propTypes.exports.string]),
  children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.string]).isRequired,
  loadMore: propTypes.exports.func,
  isLastPage: propTypes.exports.bool
};
InfinityScroll.defaultProps = {
  className: '',
  isLastPage: false,
  loadMore: () => null
};

var styles$m = {"text--truncate":"InfoBar-module_text--truncate__JLawy","info-bar":"InfoBar-module_info-bar__FPcOv","info__bar":"InfoBar-module_info__bar__ODCKA","info-bar--box":"InfoBar-module_info-bar--box__U1D6Z","info-bar--alert":"InfoBar-module_info-bar--alert__PpSkW","info-bar--alert-box":"InfoBar-module_info-bar--alert-box__R95Kd","info-bar--warning":"InfoBar-module_info-bar--warning__3FDRp","info-bar--warning-box":"InfoBar-module_info-bar--warning-box__lmtXj","info-bar--info":"InfoBar-module_info-bar--info__3yFXA","info-bar--info-box":"InfoBar-module_info-bar--info-box__sCuxk"};

/**
 * Info Bar - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string|array} props.className - list of custom class names
 * @param {string} props.type - type of info bar `info, success, warning, alert`
 * @return {object} An object of children element
 */

const InfoBar = ({
  children,
  className,
  type
}) => {
  const elementClasses = useStyles({
    [styles$m[`info-bar`]]: true,
    [styles$m[`info-bar--${type}`]]: type
  }, className);
  const boxClasses = useStyles({
    [styles$m[`info-bar--box`]]: true,
    [styles$m[`info-bar--${type}-box`]]: type
  });
  const icon = type === 'warning' ? 'exclamation' : type === 'alert' ? 'exclamation-triangle' : 'info';
  return /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }, /*#__PURE__*/React.createElement("div", {
    className: boxClasses
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: icon
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$m.info__bar
  }, children));
};

InfoBar.displayName = 'InfoBar';
InfoBar.propTypes = {
  children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.string, propTypes.exports.func]).isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  type: propTypes.exports.oneOf(['warning', 'info', 'alert', 'success'])
};
InfoBar.defaultProps = {
  className: '',
  type: 'info'
};

var styles$l = {"text--truncate":"InfoSection-module_text--truncate__bKtmh","info-section":"InfoSection-module_info-section__5GZoz"};

/**
 * Info Section - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: `info-section`
 * @param {string} props.title - title
 * @param {array} props.list - list of items
 * @param {string} props.url - image url
 * @param {string} props.button - button title
 * @param {func} props.onClick - button action
 * @return {object} An object of children element
 */

const InfoSection = ({
  className,
  title,
  list,
  url,
  button,
  image,
  onClick
}) => {
  const renderList = react.exports.useMemo(() => /*#__PURE__*/React.createElement(List, {
    listStyle: "ordered-check"
  }, list.map(item => /*#__PURE__*/React.createElement(ListItem, {
    key: uuid_1(),
    variant: "list"
  }, /*#__PURE__*/React.createElement(Paragraph, {
    size: 18
  }, item)))), []);
  const infoSectionStyles = useStyles({
    [styles$l['info-section']]: true
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: infoSectionStyles
  }, /*#__PURE__*/React.createElement("div", null, image && /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement(Image$1, {
    src: image.src,
    size: image.size
  }), /*#__PURE__*/React.createElement(Spacer, {
    space: "medium"
  })), /*#__PURE__*/React.createElement(Heading, {
    bold: true,
    level: 1
  }, title), renderList, /*#__PURE__*/React.createElement(Spacer, {
    space: "medium"
  }), /*#__PURE__*/React.createElement(Button$1, {
    onClick: onClick,
    size: "large"
  }, button)), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Image$1, {
    size: 526,
    src: url
  })));
};

InfoSection.displayName = 'InfoSection';
InfoSection.propTypes = {
  button: propTypes.exports.string.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  list: propTypes.exports.arrayOf(propTypes.exports.string).isRequired,
  onClick: propTypes.exports.func,
  title: propTypes.exports.string.isRequired,
  url: propTypes.exports.string.isRequired,
  image: propTypes.exports.objectOf({
    src: propTypes.exports.string,
    size: propTypes.exports.number
  })
};
InfoSection.defaultProps = {
  className: '',
  onClick: () => null
};

var scss$1 = {"text--truncate":"StepNumber_text--truncate__2uO2n","step__number":"StepNumber_step__number__2ZNh0","step__number--small":"StepNumber_step__number--small__0KeKl","step__number--medium":"StepNumber_step__number--medium__Sluvf","step__number--completed":"StepNumber_step__number--completed__3sTXT","step__number--current":"StepNumber_step__number--current__HRbyz","step__number--next":"StepNumber_step__number--next__WIuzn","step__number--absolute":"StepNumber_step__number--absolute__wOLRC"};

const cssClass$1 = styles$1b(scss$1); //TODO StepNumber css, test

/**
 * StepNumber - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: 'step__number'
 * @param {number} props.step - step number
 * @param {string} props.variant - step number variant, default 'current'
 * @param {string} props.size - step number size, default 'small'
 * @param {bool} props.absolute - position absolute, default 'false'
 * @return {object} An object of children element
 */

const StepNumber = ({
  className,
  step,
  variant,
  size,
  absolute
}) => {
  const elementClasses = cssClass$1({
    'step__number--absolute': absolute === true,
    'step__number--completed': variant === 'completed',
    'step__number--current': variant === 'current',
    'step__number--medium': size === 'medium',
    'step__number--next': variant === 'next',
    'step__number--small': size === 'small'
  });
  return /*#__PURE__*/React.createElement("span", {
    className: cssClass$1(className, elementClasses)
  }, step);
};

StepNumber.displayName = 'StepNumber';
StepNumber.propTypes = {
  absolute: propTypes.exports.bool,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  size: propTypes.exports.string,
  step: propTypes.exports.number.isRequired,
  variant: propTypes.exports.string
};
StepNumber.defaultProps = {
  className: 'step__number',
  size: 'small',
  variant: 'current',
  absolute: false
};

var styles$k = {"text--truncate":"Instruction-module_text--truncate__lvMG-","instruction":"Instruction-module_instruction__wm01Y","instruction__step":"Instruction-module_instruction__step__ITpVV"};

/**
 * Instruction - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - a list of class names, default: `instruction`
 * @param {array} props.data - steps data
 * @return {object} An object of children element
 */

function Instruction({
  className,
  data
}) {
  const instructionStyles = useStyles({
    [styles$k.instruction]: true
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: instructionStyles
  }, data.map(({
    content
  }, index) => /*#__PURE__*/React.createElement("div", {
    className: styles$k.instruction__step,
    key: uuid_1()
  }, /*#__PURE__*/React.createElement(StepNumber, {
    absolute: true,
    size: "medium",
    step: index + 1
  }), content)));
}

Instruction.displayName = 'Instruction';
Instruction.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  data: propTypes.exports.arrayOf(propTypes.exports.shape({
    content: propTypes.exports.node.isRequired
  })).isRequired
};
Instruction.defaultProps = {
  className: ''
};

var styles$j = {"text--truncate":"Layout-module_text--truncate__pmrR5","layout":"Layout-module_layout__Bjb4T","layout-width--large":"Layout-module_layout-width--large__gR2hp","layout-width--big":"Layout-module_layout-width--big__in1Dp","layout-width--full":"Layout-module_layout-width--full__5jvgz"};

/**
 * Layout - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: layout
 * @param {object} props.children - children
 * @param {string} props.width - width
 * @param {string} props.datatestid - data-testid
 * @return {object} An object of children element
 */

const Layout = ({
  className,
  children,
  width,
  ['data-testid']: dataTestId
}) => {
  const layoutStyles = useStyles({
    [styles$j.layout]: true,
    [styles$j[`layout-width--${width}`]]: width
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: layoutStyles,
    "data-testid": dataTestId
  }, children);
};

Layout.displayName = 'Layout';
Layout.propTypes = {
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  width: propTypes.exports.oneOf(['large', 'big', 'full']),
  ['data-testid']: propTypes.exports.string
};
Layout.defaultProps = {
  className: '',
  width: 'full',
  ['data-testid']: 'layout-component'
};

propTypes.exports.shape({
  content: propTypes.exports.string.isRequired,
  image: propTypes.exports.string.isRequired,
  title: propTypes.exports.string.isRequired
});

const shape$1 = propTypes.exports.shape({
  description: propTypes.exports.string.isRequired,
  variant: propTypes.exports.oneOf(['completed', 'current', 'next']).isRequired
});

propTypes.exports.shape({
  after_values: propTypes.exports.shape({
    next: propTypes.exports.number
  }),
  before_values: propTypes.exports.shape({
    first: propTypes.exports.number,
    prev: propTypes.exports.number
  }),
  values: propTypes.exports.shape({
    after: propTypes.exports.arrayOf(propTypes.exports.number),
    before: propTypes.exports.arrayOf(propTypes.exports.number),
    current: propTypes.exports.arrayOf(propTypes.exports.number)
  })
}).isRequired;

const shape = propTypes.exports.shape({
  range: propTypes.exports.string.isRequired,
  variant: propTypes.exports.oneOf(['success', 'warning', 'alert', 'info']).isRequired
});

const childrenShape = propTypes.exports.shape({
  title: propTypes.exports.string.isRequired,
  url: propTypes.exports.string.isRequired
});
propTypes.exports.shape({
  children: propTypes.exports.arrayOf(childrenShape),
  icon: propTypes.exports.string,
  title: propTypes.exports.string.isRequired
});

var styles$i = {"text--truncate":"Legend-module_text--truncate__YOm-0","container":"Legend-module_container__vuzq3","container--vertical":"Legend-module_container--vertical__GhGwl","container--horizontal":"Legend-module_container--horizontal__EiOA-","legend":"Legend-module_legend__lc2-d"};

/**
 * Legend - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {object[]} props.data - data
 * @param {string} props.alignment - alignment
 * @return {object} An object of children element
 */

const Legend = ({
  className,
  data,
  alignment
}) => {
  const wrapperClasses = useStyles({
    [styles$i['container']]: true,
    [styles$i[`container--${alignment}`]]: alignment
  }, className);

  const elementClasses = variant => // eslint-disable-next-line react-hooks/rules-of-hooks
  useStyles({
    [styles$i['legend']]: true,
    [styles$i[`legend--${variant}`]]: variant
  });

  return /*#__PURE__*/React.createElement("div", {
    className: wrapperClasses
  }, data.map(({
    variant,
    range
  }) => /*#__PURE__*/React.createElement("span", {
    key: uuid_1(),
    className: elementClasses(variant)
  }, /*#__PURE__*/React.createElement(ColorLine, {
    variant: variant,
    alignment: "horizontal"
  }), range)));
};

Legend.displayName = 'Legend';
Legend.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  alignment: propTypes.exports.oneOf(['vertical', 'horizontal']),
  data: propTypes.exports.arrayOf(shape).isRequired
};
Legend.defaultProps = {
  className: '',
  alignment: 'vertical'
};

var styles$h = {"text--truncate":"LimitQuantity-module_text--truncate__C01PI","limit-quantity--limit":"LimitQuantity-module_limit-quantity--limit__t-C5S"};

/**
 * Limit Quantity - stateless presentational component
 * @param {object} props - props
 * @param {number} props.limit - limit to display
 * @param {string} props.quantity - quantity to display
 * @return {object} An object of children element
 */

const LimitQuantity = ({
  limit,
  quantity
}) => /*#__PURE__*/React.createElement("div", {
  className: styles$h[`limit-quantity`]
}, /*#__PURE__*/React.createElement("span", null, formatNumeric(quantity), /*#__PURE__*/React.createElement("span", {
  className: styles$h[`limit-quantity--limit`]
}, limit === -1 ? /*#__PURE__*/React.createElement("span", null, " / \u221E") : ` / ${formatNumeric(limit)}`)));

LimitQuantity.displayName = 'LimitQuantity';
LimitQuantity.propTypes = {
  limit: propTypes.exports.number.isRequired,
  quantity: propTypes.exports.number.isRequired
};

var styles$g = {"text--truncate":"LimitSmall-module_text--truncate__Cb5GJ","result__dropdown":"LimitSmall-module_result__dropdown__Ty0-8","padding__none":"LimitSmall-module_padding__none__dtANx","padding__small":"LimitSmall-module_padding__small__f2z0N","padding__medium":"LimitSmall-module_padding__medium__FVGLJ"};

/**
 * Limit Small - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {string} props.padding - top padding size, default 'none'
 * @param {number} props.limit - limit to display
 * @param {string} props.quantity - quantity to display
 * @param {string} props.limitText - limit type info
 * @return {object} An object of children element
 */

const LimitSmall = ({
  className,
  padding,
  limit,
  quantity,
  limitText
}) => {
  const limitSmallStyles = useStyles({
    [styles$g['result__dropdown']]: true,
    [styles$g[`padding__${padding}`]]: padding
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: limitSmallStyles
  }, /*#__PURE__*/React.createElement("span", null, limitText), /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("b", null, formatNumeric(quantity)), limit === -1 ? /*#__PURE__*/React.createElement("span", null, " / \u221E") : ` / ${formatNumeric(limit)}`));
};

LimitSmall.displayName = 'LimitSmall';
LimitSmall.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  limit: propTypes.exports.number.isRequired,
  limitText: propTypes.exports.string.isRequired,
  padding: propTypes.exports.oneOf(['none', 'small', 'medium']),
  quantity: propTypes.exports.number.isRequired
};
LimitSmall.defaultProps = {
  className: '',
  padding: 'none'
};

var reactTextMask = {exports: {}};

(function (module, exports) {
	!function (e, t) {
	  module.exports = t(react.exports) ;
	}(commonjsGlobal$1, function (e) {
	  return function (e) {
	    function t(n) {
	      if (r[n]) return r[n].exports;
	      var o = r[n] = {
	        exports: {},
	        id: n,
	        loaded: !1
	      };
	      return e[n].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports;
	    }

	    var r = {};
	    return t.m = e, t.c = r, t.p = "", t(0);
	  }([function (e, t, r) {

	    function n(e) {
	      return e && e.__esModule ? e : {
	        default: e
	      };
	    }

	    function o(e, t) {
	      var r = {};

	      for (var n in e) t.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(e, n) && (r[n] = e[n]);

	      return r;
	    }

	    function i(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }

	    function a(e, t) {
	      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	      return !t || "object" != typeof t && "function" != typeof t ? e : t;
	    }

	    function u(e, t) {
	      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
	      e.prototype = Object.create(t && t.prototype, {
	        constructor: {
	          value: e,
	          enumerable: !1,
	          writable: !0,
	          configurable: !0
	        }
	      }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
	    }

	    Object.defineProperty(t, "__esModule", {
	      value: !0
	    }), t.conformToMask = void 0;

	    var s = Object.assign || function (e) {
	      for (var t = 1; t < arguments.length; t++) {
	        var r = arguments[t];

	        for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
	      }

	      return e;
	    },
	        l = function () {
	      function e(e, t) {
	        for (var r = 0; r < t.length; r++) {
	          var n = t[r];
	          n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
	        }
	      }

	      return function (t, r, n) {
	        return r && e(t.prototype, r), n && e(t, n), t;
	      };
	    }(),
	        f = r(3);

	    Object.defineProperty(t, "conformToMask", {
	      enumerable: !0,
	      get: function () {
	        return n(f).default;
	      }
	    });

	    var c = r(11),
	        p = n(c),
	        d = r(9),
	        h = n(d),
	        v = r(5),
	        y = n(v),
	        m = r(2),
	        b = function (e) {
	      function t() {
	        var e;
	        i(this, t);

	        for (var r = arguments.length, n = Array(r), o = 0; o < r; o++) n[o] = arguments[o];

	        var u = a(this, (e = t.__proto__ || Object.getPrototypeOf(t)).call.apply(e, [this].concat(n)));
	        return u.setRef = u.setRef.bind(u), u.onBlur = u.onBlur.bind(u), u.onChange = u.onChange.bind(u), u;
	      }

	      return u(t, e), l(t, [{
	        key: "setRef",
	        value: function (e) {
	          this.inputElement = e;
	        }
	      }, {
	        key: "initTextMask",
	        value: function () {
	          var e = this.props,
	              t = this.props.value;
	          this.textMaskInputElement = (0, y.default)(s({
	            inputElement: this.inputElement
	          }, e)), this.textMaskInputElement.update(t);
	        }
	      }, {
	        key: "componentDidMount",
	        value: function () {
	          this.initTextMask();
	        }
	      }, {
	        key: "componentDidUpdate",
	        value: function (e) {
	          var t = this.props,
	              r = t.value,
	              n = t.pipe,
	              o = t.mask,
	              i = t.guide,
	              a = t.placeholderChar,
	              u = t.showMask,
	              s = {
	            guide: i,
	            placeholderChar: a,
	            showMask: u
	          },
	              l = "function" == typeof n && "function" == typeof e.pipe ? n.toString() !== e.pipe.toString() : (0, m.isNil)(n) && !(0, m.isNil)(e.pipe) || !(0, m.isNil)(n) && (0, m.isNil)(e.pipe),
	              f = o.toString() !== e.mask.toString(),
	              c = Object.keys(s).some(function (t) {
	            return s[t] !== e[t];
	          }) || f || l,
	              p = r !== this.inputElement.value;
	          (p || c) && this.initTextMask();
	        }
	      }, {
	        key: "render",
	        value: function e() {
	          var t = this.props,
	              e = t.render,
	              r = o(t, ["render"]);
	          return delete r.mask, delete r.guide, delete r.pipe, delete r.placeholderChar, delete r.keepCharPositions, delete r.value, delete r.onBlur, delete r.onChange, delete r.showMask, e(this.setRef, s({
	            onBlur: this.onBlur,
	            onChange: this.onChange,
	            defaultValue: this.props.value
	          }, r));
	        }
	      }, {
	        key: "onChange",
	        value: function (e) {
	          this.textMaskInputElement.update(), "function" == typeof this.props.onChange && this.props.onChange(e);
	        }
	      }, {
	        key: "onBlur",
	        value: function (e) {
	          "function" == typeof this.props.onBlur && this.props.onBlur(e);
	        }
	      }]), t;
	    }(p.default.PureComponent);

	    t.default = b, b.propTypes = {
	      mask: h.default.oneOfType([h.default.array, h.default.func, h.default.bool, h.default.shape({
	        mask: h.default.oneOfType([h.default.array, h.default.func]),
	        pipe: h.default.func
	      })]).isRequired,
	      guide: h.default.bool,
	      value: h.default.oneOfType([h.default.string, h.default.number]),
	      pipe: h.default.func,
	      placeholderChar: h.default.string,
	      keepCharPositions: h.default.bool,
	      showMask: h.default.bool
	    }, b.defaultProps = {
	      render: function (e, t) {
	        return p.default.createElement("input", s({
	          ref: e
	        }, t));
	      }
	    };
	  }, function (e, t) {

	    Object.defineProperty(t, "__esModule", {
	      value: !0
	    }), t.placeholderChar = "_", t.strFunction = "function";
	  }, function (e, t, r) {

	    function n() {
	      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f,
	          t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : l.placeholderChar;
	      if (!o(e)) throw new Error("Text-mask:convertMaskToPlaceholder; The mask property must be an array.");
	      if (e.indexOf(t) !== -1) throw new Error("Placeholder character must not be used as part of the mask. Please specify a character that is not present in your mask as your placeholder character.\n\n" + ("The placeholder character that was received is: " + JSON.stringify(t) + "\n\n") + ("The mask that was received is: " + JSON.stringify(e)));
	      return e.map(function (e) {
	        return e instanceof RegExp ? t : e;
	      }).join("");
	    }

	    function o(e) {
	      return Array.isArray && Array.isArray(e) || e instanceof Array;
	    }

	    function i(e) {
	      return "string" == typeof e || e instanceof String;
	    }

	    function a(e) {
	      return "number" == typeof e && void 0 === e.length && !isNaN(e);
	    }

	    function u(e) {
	      return "undefined" == typeof e || null === e;
	    }

	    function s(e) {
	      for (var t = [], r = void 0; r = e.indexOf(c), r !== -1;) t.push(r), e.splice(r, 1);

	      return {
	        maskWithoutCaretTraps: e,
	        indexes: t
	      };
	    }

	    Object.defineProperty(t, "__esModule", {
	      value: !0
	    }), t.convertMaskToPlaceholder = n, t.isArray = o, t.isString = i, t.isNumber = a, t.isNil = u, t.processCaretTraps = s;
	    var l = r(1),
	        f = [],
	        c = "[]";
	  }, function (e, t, r) {

	    function n() {
	      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : s,
	          t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : u,
	          r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};

	      if (!(0, i.isArray)(t)) {
	        if (("undefined" == typeof t ? "undefined" : o(t)) !== a.strFunction) throw new Error("Text-mask:conformToMask; The mask property must be an array.");
	        t = t(e, r), t = (0, i.processCaretTraps)(t).maskWithoutCaretTraps;
	      }

	      var n = r.guide,
	          l = void 0 === n || n,
	          f = r.previousConformedValue,
	          c = void 0 === f ? s : f,
	          p = r.placeholderChar,
	          d = void 0 === p ? a.placeholderChar : p,
	          h = r.placeholder,
	          v = void 0 === h ? (0, i.convertMaskToPlaceholder)(t, d) : h,
	          y = r.currentCaretPosition,
	          m = r.keepCharPositions,
	          b = l === !1 && void 0 !== c,
	          g = e.length,
	          k = c.length,
	          C = v.length,
	          O = t.length,
	          T = g - k,
	          P = T > 0,
	          x = y + (P ? -T : 0),
	          w = x + Math.abs(T);

	      if (m === !0 && !P) {
	        for (var S = s, _ = x; _ < w; _++) v[_] === d && (S += d);

	        e = e.slice(0, x) + S + e.slice(x, g);
	      }

	      for (var M = e.split(s).map(function (e, t) {
	        return {
	          char: e,
	          isNew: t >= x && t < w
	        };
	      }), j = g - 1; j >= 0; j--) {
	        var E = M[j].char;

	        if (E !== d) {
	          var R = j >= x && k === O;
	          E === v[R ? j - T : j] && M.splice(j, 1);
	        }
	      }

	      var V = s,
	          N = !1;

	      e: for (var A = 0; A < C; A++) {
	        var B = v[A];

	        if (B === d) {
	          if (M.length > 0) for (; M.length > 0;) {
	            var I = M.shift(),
	                F = I.char,
	                q = I.isNew;

	            if (F === d && b !== !0) {
	              V += d;
	              continue e;
	            }

	            if (t[A].test(F)) {
	              if (m === !0 && q !== !1 && c !== s && l !== !1 && P) {
	                for (var D = M.length, L = null, W = 0; W < D; W++) {
	                  var J = M[W];
	                  if (J.char !== d && J.isNew === !1) break;

	                  if (J.char === d) {
	                    L = W;
	                    break;
	                  }
	                }

	                null !== L ? (V += F, M.splice(L, 1)) : A--;
	              } else V += F;

	              continue e;
	            }

	            N = !0;
	          }
	          b === !1 && (V += v.substr(A, C));
	          break;
	        }

	        V += B;
	      }

	      if (b && P === !1) {
	        for (var U = null, H = 0; H < V.length; H++) v[H] === d && (U = H);

	        V = null !== U ? V.substr(0, U + 1) : s;
	      }

	      return {
	        conformedValue: V,
	        meta: {
	          someCharsRejected: N
	        }
	      };
	    }

	    Object.defineProperty(t, "__esModule", {
	      value: !0
	    });
	    var o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
	      return typeof e;
	    } : function (e) {
	      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
	    };
	    t.default = n;
	    var i = r(2),
	        a = r(1),
	        u = [],
	        s = "";
	  }, function (e, t) {

	    function r(e) {
	      var t = e.previousConformedValue,
	          r = void 0 === t ? o : t,
	          i = e.previousPlaceholder,
	          a = void 0 === i ? o : i,
	          u = e.currentCaretPosition,
	          s = void 0 === u ? 0 : u,
	          l = e.conformedValue,
	          f = e.rawValue,
	          c = e.placeholderChar,
	          p = e.placeholder,
	          d = e.indexesOfPipedChars,
	          h = void 0 === d ? n : d,
	          v = e.caretTrapIndexes,
	          y = void 0 === v ? n : v;
	      if (0 === s || !f.length) return 0;
	      var m = f.length,
	          b = r.length,
	          g = p.length,
	          k = l.length,
	          C = m - b,
	          O = C > 0,
	          T = 0 === b,
	          P = C > 1 && !O && !T;
	      if (P) return s;

	      var x = O && (r === l || l === p),
	          w = 0,
	          S = void 0,
	          _ = void 0;

	      if (x) w = s - C;else {
	        var M = l.toLowerCase(),
	            j = f.toLowerCase(),
	            E = j.substr(0, s).split(o),
	            R = E.filter(function (e) {
	          return M.indexOf(e) !== -1;
	        });
	        _ = R[R.length - 1];
	        var V = a.substr(0, R.length).split(o).filter(function (e) {
	          return e !== c;
	        }).length,
	            N = p.substr(0, R.length).split(o).filter(function (e) {
	          return e !== c;
	        }).length,
	            A = N !== V,
	            B = void 0 !== a[R.length - 1] && void 0 !== p[R.length - 2] && a[R.length - 1] !== c && a[R.length - 1] !== p[R.length - 1] && a[R.length - 1] === p[R.length - 2];
	        !O && (A || B) && V > 0 && p.indexOf(_) > -1 && void 0 !== f[s] && (S = !0, _ = f[s]);

	        for (var I = h.map(function (e) {
	          return M[e];
	        }), F = I.filter(function (e) {
	          return e === _;
	        }).length, q = R.filter(function (e) {
	          return e === _;
	        }).length, D = p.substr(0, p.indexOf(c)).split(o).filter(function (e, t) {
	          return e === _ && f[t] !== e;
	        }).length, L = D + q + F + (S ? 1 : 0), W = 0, J = 0; J < k; J++) {
	          var U = M[J];
	          if (w = J + 1, U === _ && W++, W >= L) break;
	        }
	      }

	      if (O) {
	        for (var H = w, Y = w; Y <= g; Y++) if (p[Y] === c && (H = Y), p[Y] === c || y.indexOf(Y) !== -1 || Y === g) return H;
	      } else if (S) {
	        for (var z = w - 1; z >= 0; z--) if (l[z] === _ || y.indexOf(z) !== -1 || 0 === z) return z;
	      } else for (var G = w; G >= 0; G--) if (p[G - 1] === c || y.indexOf(G) !== -1 || 0 === G) return G;
	    }

	    Object.defineProperty(t, "__esModule", {
	      value: !0
	    }), t.default = r;
	    var n = [],
	        o = "";
	  }, function (e, t, r) {

	    function n(e) {
	      return e && e.__esModule ? e : {
	        default: e
	      };
	    }

	    function o(e) {
	      var t = {
	        previousConformedValue: void 0,
	        previousPlaceholder: void 0
	      };
	      return {
	        state: t,
	        update: function (r) {
	          var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e,
	              o = n.inputElement,
	              l = n.mask,
	              c = n.guide,
	              y = n.pipe,
	              b = n.placeholderChar,
	              g = void 0 === b ? h.placeholderChar : b,
	              k = n.keepCharPositions,
	              C = void 0 !== k && k,
	              O = n.showMask,
	              T = void 0 !== O && O;

	          if ("undefined" == typeof r && (r = o.value), r !== t.previousConformedValue) {
	            ("undefined" == typeof l ? "undefined" : s(l)) === m && void 0 !== l.pipe && void 0 !== l.mask && (y = l.pipe, l = l.mask);
	            var P = void 0,
	                x = void 0;

	            if (l instanceof Array && (P = (0, d.convertMaskToPlaceholder)(l, g)), l !== !1) {
	              var w = a(r),
	                  S = o.selectionEnd,
	                  _ = t.previousConformedValue,
	                  M = t.previousPlaceholder,
	                  j = void 0;

	              if (("undefined" == typeof l ? "undefined" : s(l)) === h.strFunction) {
	                if (x = l(w, {
	                  currentCaretPosition: S,
	                  previousConformedValue: _,
	                  placeholderChar: g
	                }), x === !1) return;
	                var E = (0, d.processCaretTraps)(x),
	                    R = E.maskWithoutCaretTraps,
	                    V = E.indexes;
	                x = R, j = V, P = (0, d.convertMaskToPlaceholder)(x, g);
	              } else x = l;

	              var N = {
	                previousConformedValue: _,
	                guide: c,
	                placeholderChar: g,
	                pipe: y,
	                placeholder: P,
	                currentCaretPosition: S,
	                keepCharPositions: C
	              },
	                  A = (0, p.default)(w, x, N),
	                  B = A.conformedValue,
	                  I = ("undefined" == typeof y ? "undefined" : s(y)) === h.strFunction,
	                  F = {};
	              I && (F = y(B, u({
	                rawValue: w
	              }, N)), F === !1 ? F = {
	                value: _,
	                rejected: !0
	              } : (0, d.isString)(F) && (F = {
	                value: F
	              }));
	              var q = I ? F.value : B,
	                  D = (0, f.default)({
	                previousConformedValue: _,
	                previousPlaceholder: M,
	                conformedValue: q,
	                placeholder: P,
	                rawValue: w,
	                currentCaretPosition: S,
	                placeholderChar: g,
	                indexesOfPipedChars: F.indexesOfPipedChars,
	                caretTrapIndexes: j
	              }),
	                  L = q === P && 0 === D,
	                  W = T ? P : v,
	                  J = L ? W : q;
	              t.previousConformedValue = J, t.previousPlaceholder = P, o.value !== J && (o.value = J, i(o, D));
	            }
	          }
	        }
	      };
	    }

	    function i(e, t) {
	      document.activeElement === e && (b ? g(function () {
	        return e.setSelectionRange(t, t, y);
	      }, 0) : e.setSelectionRange(t, t, y));
	    }

	    function a(e) {
	      if ((0, d.isString)(e)) return e;
	      if ((0, d.isNumber)(e)) return String(e);
	      if (void 0 === e || null === e) return v;
	      throw new Error("The 'value' provided to Text Mask needs to be a string or a number. The value received was:\n\n " + JSON.stringify(e));
	    }

	    Object.defineProperty(t, "__esModule", {
	      value: !0
	    });

	    var u = Object.assign || function (e) {
	      for (var t = 1; t < arguments.length; t++) {
	        var r = arguments[t];

	        for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
	      }

	      return e;
	    },
	        s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
	      return typeof e;
	    } : function (e) {
	      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
	    };

	    t.default = o;
	    var l = r(4),
	        f = n(l),
	        c = r(3),
	        p = n(c),
	        d = r(2),
	        h = r(1),
	        v = "",
	        y = "none",
	        m = "object",
	        b = "undefined" != typeof navigator && /Android/i.test(navigator.userAgent),
	        g = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : setTimeout;
	  }, function (e, t) {

	    function r(e) {
	      return function () {
	        return e;
	      };
	    }

	    var n = function () {};

	    n.thatReturns = r, n.thatReturnsFalse = r(!1), n.thatReturnsTrue = r(!0), n.thatReturnsNull = r(null), n.thatReturnsThis = function () {
	      return this;
	    }, n.thatReturnsArgument = function (e) {
	      return e;
	    }, e.exports = n;
	  }, function (e, t, r) {

	    function n(e, t, r, n, i, a, u, s) {
	      if (!e) {
	        var l;
	        if (void 0 === t) l = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
	          var f = [r, n, i, a, u, s],
	              c = 0;
	          l = new Error(t.replace(/%s/g, function () {
	            return f[c++];
	          })), l.name = "Invariant Violation";
	        }
	        throw l.framesToPop = 1, l;
	      }
	    }

	    e.exports = n;
	  }, function (e, t, r) {

	    var n = r(6),
	        o = r(7),
	        i = r(10);

	    e.exports = function () {
	      function e(e, t, r, n, a, u) {
	        u !== i && o(!1, "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
	      }

	      function t() {
	        return e;
	      }

	      e.isRequired = e;
	      var r = {
	        array: e,
	        bool: e,
	        func: e,
	        number: e,
	        object: e,
	        string: e,
	        symbol: e,
	        any: e,
	        arrayOf: t,
	        element: e,
	        instanceOf: t,
	        node: e,
	        objectOf: t,
	        oneOf: t,
	        oneOfType: t,
	        shape: t,
	        exact: t
	      };
	      return r.checkPropTypes = n, r.PropTypes = r, r;
	    };
	  }, function (e, t, r) {

	    e.exports = r(8)();
	  }, function (e, t) {

	    var r = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
	    e.exports = r;
	  }, function (t, r) {
	    t.exports = e;
	  }]);
	});
} (reactTextMask));

var MaskedInputComponent = /*@__PURE__*/getDefaultExportFromCjs(reactTextMask.exports);

/**
 * Masked Input - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: input
 * @param {function} props.onChange - click handler
 * @param {function} props.onKeyDown - key down handler
 * @param {function} props.onBlur - blur handler
 * @param {string} props.type - type
 * @param {string|object} props.placeholder - placeholder
 * @param {string} props.name - name
 * @param {boolean} props.disabled - disabled
 * @param {boolean} props.readonly - readonly
 * @param {string} props.label - label
 * @param {bool} props.autoFocus - autoFocus
 * @param {string} props.mask - mask applied to input
 * @param {number} props.maxLength - max length of input
 * @param {object} props.field - formik field
 * @param {bool}  props.guide - if it is true underscores will be displayed to represent mask format
 * @param {string} props.focused - focused, keep label by default on top
 * @param {string|number} props.value - value
 * @param {object} props.i18n - translations
 * @return {object} An object of children element
 */

const MaskedInput = ({
  className,
  onChange,
  onKeyDown,
  onBlur,
  type,
  name,
  disabled,
  readonly,
  value,
  autoFocus,
  maxLength,
  mask,
  guide,
  focused,
  i18n: {
    placeholder,
    label
  }
}) => {
  const elementClasses = useStyles({
    [styles$16.input__wrapper]: true,
    [styles$16['input__wrapper--focused']]: focused === 'true'
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }, /*#__PURE__*/React.createElement(MaskedInputComponent, {
    mask: mask,
    className: styles$16.input,
    onBlur: onBlur,
    onChange: onChange,
    onKeyDown: onKeyDown,
    type: type,
    placeholder: placeholder || label,
    name: name,
    id: name,
    defaultValue: value,
    readOnly: disabled ? readonly : undefined,
    disabled: !disabled ? undefined : disabled,
    autoFocus: autoFocus,
    maxLength: maxLength,
    required: true,
    guide: guide,
    focused: focused,
    "data-testid": "masked-input"
  }), /*#__PURE__*/React.createElement("span", {
    className: styles$16.highlight
  }), /*#__PURE__*/React.createElement("span", {
    className: styles$16.bar
  }), label && /*#__PURE__*/React.createElement(Label, {
    id: name,
    className: styles$16.input__label
  }, label));
};

MaskedInput.displayName = 'Masked';
MaskedInput.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  onChange: propTypes.exports.func,
  onKeyDown: propTypes.exports.func,
  onBlur: propTypes.exports.func,
  type: propTypes.exports.string,
  placeholder: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),
  name: propTypes.exports.string,
  disabled: propTypes.exports.bool,
  readonly: propTypes.exports.bool,
  label: propTypes.exports.string,
  value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number]),
  autoFocus: propTypes.exports.bool,
  maxLength: propTypes.exports.number,
  mask: propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.instanceOf(RegExp)])),
  guide: propTypes.exports.bool,
  focused: propTypes.exports.string,
  i18n: propTypes.exports.shape({
    placeholder: propTypes.exports.string,
    label: propTypes.exports.string
  })
};
MaskedInput.defaultProps = {
  className: '',
  onChange: () => null,
  onKeyDown: () => null,
  onBlur: () => null,
  type: 'text',
  placeholder: '',
  name: null,
  disabled: false,
  readonly: false,
  label: null,
  value: null,
  autoFocus: false,
  maxLength: 524288,
  mask: [],
  guide: false,
  focused: 'false',
  i18n: {
    placeholder: '',
    label: ''
  }
};

/**
 * Masked Input - stateless presentational component
 * @param {object} props - props
 * @param {object} props.field - react-formik field properties
 * @param {object} props.form - react-formik form properties
 * @param {string} props.id - id of the element
 * @param {string} props.label - label
 * @param {string} props.placeholder - placeholder
 * @param {string} props.type - type of element `text, number etc`
 * @param {bool} props.translate - if label should be translated by intl
 * @param {number} props.maxLength - maxLength
 * @param {disabled} props.disabled - disabled
 * @param {array} props.mask - mask applied to input
 * @param {bool} props.guide - if it is true underscores will be displayed to represent mask format
 * @param {string} props.focused - focused, keep label by default on top
 * @param {object} props.i18n - translations
 * @return {object} An object of children element
 */

const Masked = ({
  field,
  form,
  id,
  type,
  disabled,
  translate,
  maxLength,
  mask,
  guide,
  focused,
  i18n
}) => {
  const {
    name,
    value,
    onChange,
    onBlur
  } = field;
  const {
    errors,
    touched
  } = form;
  const errorClass = errors[name] && touched[name] ? 'form--has-error' : '';
  return /*#__PURE__*/React.createElement("div", {
    className: `form-field ${errorClass}`
  }, /*#__PURE__*/React.createElement(MaskedInput, {
    field: field,
    mask: mask,
    type: type,
    name: name,
    id: id,
    value: value,
    onChange: onChange,
    onBlur: onBlur,
    i18n: i18n,
    disabled: disabled,
    translate: translate,
    maxLength: maxLength,
    guide: guide,
    focused: focused
  }), touched[name] && /*#__PURE__*/React.createElement(Error$1, {
    error: errors[name]
  }));
};

Masked.displayName = 'Masked';
Masked.propTypes = {
  field: propTypes.exports.shape({
    name: propTypes.exports.string.isRequired,
    value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number]),
    onChange: propTypes.exports.func,
    onBlur: propTypes.exports.func
  }).isRequired,
  form: propTypes.exports.shape({
    errors: propTypes.exports.instanceOf(Object),
    touched: propTypes.exports.instanceOf(Object)
  }).isRequired,
  id: propTypes.exports.string.isRequired,
  label: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.object]),
  placeholder: propTypes.exports.string,
  type: propTypes.exports.string,
  disabled: propTypes.exports.bool,
  translate: propTypes.exports.bool,
  maxLength: propTypes.exports.number,
  mask: propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.instanceOf(RegExp)])),
  guide: propTypes.exports.bool,
  focused: propTypes.exports.string,
  i18n: propTypes.exports.shape({
    placeholder: propTypes.exports.string,
    label: propTypes.exports.string
  })
};
Masked.defaultProps = {
  label: '',
  placeholder: '',
  type: 'text',
  maxLength: 524288,
  mask: [],
  disabled: false,
  translate: true,
  guide: false,
  focused: 'false',
  i18n: {
    placeholder: '',
    label: ''
  }
};

/**
 * Modal Header - stateless presentational component
 * @param {object} props
 * @param {object} props.title
 * @param {string} props.align - alignment
 * @return {object} An object of children element
 */

const ModalHeader = ({
  title,
  align
}) => {
  return /*#__PURE__*/React.createElement(Heading, {
    level: 2,
    align: align
  }, title);
};

ModalHeader.displayName = 'ModalHeader';
ModalHeader.propTypes = {
  title: propTypes.exports.string.isRequired,
  align: propTypes.exports.oneOf(['left', 'center', 'right'])
};
ModalHeader.defaultProps = {
  align: 'left'
};

var styles$f = {"text--truncate":"Modal-module_text--truncate__RQn4E","dialog":"Modal-module_dialog__4344p","modal":"Modal-module_modal__yNG-7","modal__header":"Modal-module_modal__header__22qVU","modal__header--close-only":"Modal-module_modal__header--close-only__EpZqa","modal__component":"Modal-module_modal__component__BF4TF","modal__component--child":"Modal-module_modal__component--child__3Y1EE","modal__body":"Modal-module_modal__body__K3X3J","modal__body--has-footer":"Modal-module_modal__body--has-footer__ey5v9","modal__body--no-padding":"Modal-module_modal__body--no-padding__NTl2q","modal__footer-divider":"Modal-module_modal__footer-divider__tQkAd","modal__footer":"Modal-module_modal__footer__-z-ze","modal__footer--align-right":"Modal-module_modal__footer--align-right__dr5oC","modal__footer--align-center":"Modal-module_modal__footer--align-center__1V4gX","modal__footer--align-left":"Modal-module_modal__footer--align-left__UUj1c","modal--fullscreen":"Modal-module_modal--fullscreen__bZVpl","modal--small":"Modal-module_modal--small__Obt8i","modal--medium":"Modal-module_modal--medium__-ZcX5","modal--big":"Modal-module_modal--big__bZ7RV","modal--huge-responsive":"Modal-module_modal--huge-responsive__m4dVy","modal--topbar":"Modal-module_modal--topbar__ITy4f","modal--page":"Modal-module_modal--page__C0n6v","modal--center":"Modal-module_modal--center__2wE-S"};

/**
 * Modal Footer - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string} props.align - alignment
 * @return {object} An object of children element
 */

const ModalFooter = ({
  children,
  align
}) => {
  const elementClasses = useStyles({
    [styles$f['modal__footer']]: true,
    [styles$f['modal__footer--align-right']]: align === 'right',
    [styles$f['modal__footer--align-center']]: align === 'center',
    [styles$f['modal__footer--align-left']]: align === 'left'
  });
  return /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }, children);
};

ModalFooter.displayName = 'ModalFooter';
ModalFooter.propTypes = {
  align: propTypes.exports.oneOf(['left', 'center', 'right']),
  children: propTypes.exports.node.isRequired
};
ModalFooter.defaultProps = {
  align: 'right'
};

/**
 * Modal - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string|array} props.className - list of class names, default: modal
 * @param {function} props.onClick - onClick handler
 * @param {function} props.onAction - onAction click handler
 * @param {boolean} props.isActive - active state
 * @param {boolean} props.isClosable - close state
 * @param {boolean} props.isButtonDisabled - is action button in footer disabled
 * @param {boolean} props.isButtonLoading - is action button in footer has loading state
 * @param {boolean} props.isMarkAsSpamVisible - is "mark as spam" button visible
 * @param {object} props.image - image in header
 * @param {boolean} props.hasFooter - has footer
 * @param {boolean} props.hasHeaderDivider - has header divider
 * @param {boolean} props.hasFooterDivider - has footer divider
 * @param {string} props.actionVariant - button action variant
 * @param {bool} props.isLoading - is loading
 * @param {string} props.actionIcon - footer action button icon
 * @param {object} props.overflowStyle - overflowStyle
 * @param {bool} props.isCentered - makes text in modal centered
 * @param {bool} props.isEditable - isEditable
 * @param {func} props.onEdit - onEdit
 * @param {bool} props.hasCustomButton - secondary button
 * @param {func} props.onClickCustomButton - secondary button with custom callback
 * @param {bool} props.isCustomButtonDisabled - is cunstom button in footer disabled
 * @param {func} props.onMarkAsSpam - handle "mark as spam" click
 * @param {bool} props.isPage - is page
 * @param {string} props.size - modal size, one of: small(default, 780px), medium(880px), big(1080px), fullscreen
 * @param {string} props.i18n - objest of translations
 * @param {bool} props.isComponent - component instead of title
 * @param {object} props.component - component
 * @param {bool} props.isSubmit - modal button is submit type
 * @param {string} props.isBodyPadding - modal body padding
 * @param {string} props.headingAlign - align text in title, default: left
 * @param {string} props.footerAlign - modal footer alignment, default: right
 * @return {object} An object of children element
 */

const Modal = /*#__PURE__*/react.exports.forwardRef(({
  children,
  className,
  onClick,
  onAction,
  isActive,
  isClosable,
  isButtonDisabled,
  isButtonLoading,
  isMarkAsSpamVisible,
  image,
  hasFooter,
  hasHeaderDivider,
  hasFooterDivider,
  actionVariant,
  isLoading,
  actionIcon,
  overflowStyle,
  isCentered,
  isEditable,
  onEdit,
  hasCustomButton,
  onClickCustomButton,
  isCustomButtonDisabled,
  onMarkAsSpam,
  size,
  isPage,
  disableOverflow,
  i18n,
  isComponent,
  component,
  isSubmit,
  isBodyPadding,
  headingAlign,
  footerAlign
}, ref) => {
  const headerStyles = useStyles({
    [styles$f.modal__header]: true,
    [styles$f['modal__header--close-only']]: !i18n.title && !image
  });

  const renderTitle = () => /*#__PURE__*/React.createElement("div", {
    className: headerStyles
  }, headingAlign === 'center' && /*#__PURE__*/React.createElement(Spreader, null), i18n.title && /*#__PURE__*/React.createElement(ModalHeader, {
    title: i18n.title,
    align: headingAlign
  }), image && /*#__PURE__*/React.createElement(Image$1, {
    src: image,
    size: "auto",
    height: 20
  }), /*#__PURE__*/React.createElement("div", null, isMarkAsSpamVisible && /*#__PURE__*/React.createElement(Button$1, {
    variant: "transparent",
    onClick: onMarkAsSpam
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-block"
  }), i18n.markSpam), isEditable && /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement(Button$1, {
    variant: "icon",
    onClick: onEdit
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-create"
  }))), (isMarkAsSpamVisible || isEditable) && /*#__PURE__*/React.createElement(Spreader, {
    spread: "tiny"
  }), isClosable && /*#__PURE__*/React.createElement(Close, {
    onClick: onClick
  })));

  const renderComponent = () => /*#__PURE__*/React.createElement("div", {
    className: styles$f.modal__component
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$f['modal__component--child']
  }, component), isClosable && /*#__PURE__*/React.createElement(Close, {
    onClick: onClick
  }));

  const modalStyles = useStyles({
    [styles$f['modal']]: true,
    [styles$f['modal--huge-responsive']]: size === 'huge-responsive',
    [styles$f['modal--fullscreen']]: size === 'fullscreen',
    [styles$f['modal--big']]: size === 'big',
    [styles$f['modal--medium']]: size === 'medium',
    [styles$f['modal--small']]: size === 'small',
    [styles$f['modal--center']]: isCentered,
    [styles$f['modal--page']]: isPage
  }, className);
  const bodyStyles = useStyles({
    [styles$f['modal__body']]: true,
    [styles$f['modal__body--has-footer']]: hasFooter,
    [styles$f['modal__body--no-padding']]: isBodyPadding === 'none'
  });
  const handleCloseOnEscape = react.exports.useCallback(({
    key
  }) => {
    if (key === 'Escape' && isClosable && isActive) {
      onClick();
    }
  }, [onClick, isClosable, isActive]);
  react.exports.useEffect(() => {
    if (size === 'fullscreen') {
      document.addEventListener('keydown', handleCloseOnEscape);
    }

    return () => document.removeEventListener('keydown', handleCloseOnEscape);
  }, [handleCloseOnEscape, size]);
  return /*#__PURE__*/React.createElement(react.exports.Fragment, null, isActive && /*#__PURE__*/React.createElement("div", {
    className: styles$f.dialog
  }, /*#__PURE__*/React.createElement("div", {
    className: modalStyles,
    ref: ref
  }, isLoading ? /*#__PURE__*/React.createElement("div", {
    className: styles$f.modal__body
  }, /*#__PURE__*/React.createElement(Loader, null)) : /*#__PURE__*/React.createElement(react.exports.Fragment, null, (isClosable || i18n.title || image || isEditable) && (!isComponent ? renderTitle() : renderComponent()), hasHeaderDivider && /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement(Spacer, {
    space: "small"
  }), /*#__PURE__*/React.createElement(Divider, null)), /*#__PURE__*/React.createElement("div", {
    className: bodyStyles
  }, disableOverflow ? children : /*#__PURE__*/React.createElement("div", {
    style: overflowStyle
  }, children)), hasFooterDivider && /*#__PURE__*/React.createElement("div", {
    className: styles$f['modal__footer-divider']
  }, /*#__PURE__*/React.createElement(Divider, null)), hasFooter && /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement(Spacer, {
    space: "small"
  }), /*#__PURE__*/React.createElement(ModalFooter, {
    align: footerAlign
  }, hasCustomButton ? /*#__PURE__*/React.createElement(Button$1, {
    variant: "secondary",
    size: "medium",
    onClick: onClickCustomButton,
    isDisabled: isCustomButtonDisabled
  }, i18n.cancel) : /*#__PURE__*/React.createElement(Button$1, {
    variant: "secondary",
    size: "medium",
    onClick: onClick
  }, i18n.cancel), /*#__PURE__*/React.createElement(Button$1, {
    type: isSubmit ? 'submit' : 'button',
    variant: actionVariant,
    size: "medium",
    onClick: onAction,
    isDisabled: isButtonDisabled,
    isLoading: isButtonLoading,
    hasIcon: !!actionIcon
  }, actionIcon && /*#__PURE__*/React.createElement(Icon, {
    icon: actionIcon
  }), i18n.action)))))), isActive && size !== 'fullscreen' && /*#__PURE__*/React.createElement(Backdrop, {
    onClick: onClick
  }));
});
Modal.displayName = 'Modal';
Modal.propTypes = {
  children: propTypes.exports.node,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  onClick: propTypes.exports.func,
  onAction: propTypes.exports.func,
  isActive: propTypes.exports.bool.isRequired,
  isClosable: propTypes.exports.bool,
  isButtonDisabled: propTypes.exports.bool,
  isButtonLoading: propTypes.exports.bool,
  image: propTypes.exports.string,
  hasFooter: propTypes.exports.bool,
  hasHeaderDivider: propTypes.exports.bool,
  hasFooterDivider: propTypes.exports.bool,
  actionVariant: propTypes.exports.string,
  isLoading: propTypes.exports.bool,
  actionIcon: propTypes.exports.string,
  overflowStyle: propTypes.exports.instanceOf(Object),
  isCentered: propTypes.exports.bool,
  onEdit: propTypes.exports.func,
  onMarkAsSpam: propTypes.exports.func,
  isEditable: propTypes.exports.bool,
  hasCustomButton: propTypes.exports.bool,
  isCustomButtonDisabled: propTypes.exports.bool,
  isMarkAsSpamVisible: propTypes.exports.bool,
  size: propTypes.exports.oneOf(['small', 'medium', 'big', 'fullscreen', 'huge-responsive']),
  isPage: propTypes.exports.bool,
  i18n: propTypes.exports.shape({
    title: propTypes.exports.string,
    action: propTypes.exports.string,
    cancel: propTypes.exports.string,
    markSpam: propTypes.exports.string
  }),
  isComponent: propTypes.exports.bool,
  component: propTypes.exports.node,
  isSubmit: propTypes.exports.bool,
  onClickCustomButton: propTypes.exports.func,
  disableOverflow: propTypes.exports.bool,
  isBodyPadding: propTypes.exports.string,
  headingAlign: propTypes.exports.oneOf(['right', 'center', 'left']),
  footerAlign: propTypes.exports.oneOf(['right', 'center', 'left'])
};
Modal.defaultProps = {
  className: '',
  children: null,
  isClosable: true,
  isButtonDisabled: false,
  isButtonLoading: false,
  onClick: () => null,
  onAction: () => null,
  image: '',
  hasFooter: false,
  hasHeaderDivider: false,
  hasFooterDivider: false,
  isLoading: false,
  actionVariant: 'primary',
  actionIcon: null,
  overflowStyle: {
    maxHeight: '80vh',
    overflowY: 'auto',
    overflowX: 'hidden'
  },
  isCentered: false,
  isEditable: false,
  hasCustomButton: false,
  isCustomButtonDisabled: false,
  isMarkAsSpamVisible: false,
  size: null,
  isPage: false,
  i18n: propTypes.exports.shape({
    title: null,
    action: null,
    cancel: null,
    markSpam: null
  }),
  onEdit: () => null,
  isComponent: false,
  component: null,
  isSubmit: false,
  onClickCustomButton: null,
  disableOverflow: false,
  isBodyPadding: '',
  headingAlign: 'left',
  footerAlign: 'right'
};

/**
 * Months array - contains array of month objects with code and translation key
 */
const monthsArray = [{
  code: '00',
  name: 'month.january'
}, {
  code: '01',
  name: 'month.february'
}, {
  code: '02',
  name: 'month.march'
}, {
  code: '03',
  name: 'month.april'
}, {
  code: '04',
  name: 'month.may'
}, {
  code: '05',
  name: 'month.june'
}, {
  code: '06',
  name: 'month.july'
}, {
  code: '07',
  name: 'month.august'
}, {
  code: '08',
  name: 'month.september'
}, {
  code: '09',
  name: 'month.october'
}, {
  code: '10',
  name: 'month.november'
}, {
  code: '11',
  name: 'month.december'
}];
/**
 * Check if value is between start and end month
 * @function handleRangeMarker
 * @param {string} monthID
 * @param {string} endMonth
 * @param {string} startMonth
 * @return {bool} Returns bool
 */

const handleRangeMarker = (monthID, endMonth, startMonth) => {
  const handleMarkerWithBiggerStartMonth = () => endMonth <= monthID && startMonth >= monthID,
        handleMarkerWithBiggerEndMonth = () => startMonth <= monthID && endMonth >= monthID,
        handleMarkerWithEqualStartEndMonth = () => monthID === startMonth;

  switch (true) {
    case startMonth === null || endMonth === null:
      return null;

    case startMonth > endMonth:
      return handleMarkerWithBiggerStartMonth();

    case startMonth < endMonth:
      return handleMarkerWithBiggerEndMonth();

    case startMonth === endMonth:
      return handleMarkerWithEqualStartEndMonth();

    default:
      return false;
  }
};
/**
 * Parse date object to monthID eg. 2021-03-20 => 202103
 * @function parseDateToMonthID
 * @param {date} date
 * @return {string} Returns string
 */

const parseDateToMonthID = date => `${date.getFullYear()}${monthsArray[date.getMonth()].code}`;
/**
 * Parse monthID to date object eg. 202103 => 2021-03-01
 * @function parseDateToMonthID
 * @param {string} monthID
 * @return {date} Returns date object
 */

const transformMonthToDate = monthID => new Date(`${monthID}`.substring(0, 4), `${monthID}`.substring(4, 6));

var styles$e = {"text--truncate":"MonthRangePicker-module_text--truncate__rBMIY","grid-container":"MonthRangePicker-module_grid-container__dzia-","button_month":"MonthRangePicker-module_button_month__Ys-tE","button_month--name":"MonthRangePicker-module_button_month--name__jYEN5","button_month--marker":"MonthRangePicker-module_button_month--marker__-kzfH","button_month--not-selecting":"MonthRangePicker-module_button_month--not-selecting__i1PT-","button_month--selecting":"MonthRangePicker-module_button_month--selecting__E0Rwp","button_month--first":"MonthRangePicker-module_button_month--first__84QSw","button_month--last":"MonthRangePicker-module_button_month--last__ecaUQ","button_month--selected":"MonthRangePicker-module_button_month--selected__5-s3b","button_month--disabled":"MonthRangePicker-module_button_month--disabled__ho943","year":"MonthRangePicker-module_year__xoKC-","year-container":"MonthRangePicker-module_year-container__kJjjf","month-range-picker":"MonthRangePicker-module_month-range-picker__eMp0J"};

/**
 * MonthRangePicker - stateful component
 * @param {object} props - props
 * @param {func} props.onChange - called on date confirm
 * @param {date} props.minDate - minimal date
 * @param {date} props.maxDate - maximal date
 * @param {func} props.i18nHandler - callback function to translate keys
 * @return {object} An object of children element
 */

const MonthRangePicker = ({
  onChange,
  minDate,
  maxDate,
  i18nHandler
}) => {
  const minimalDate = parseDateToMonthID(minDate),
        maximalDate = parseDateToMonthID(maxDate),
        [isSelecting, setSelecting] = react.exports.useState(false),
        [startMonth, setStartMonth] = react.exports.useState(null),
        [endMonth, setEndMonth] = react.exports.useState(null),
        [year, setYear] = react.exports.useState(2021),
        [confirmedEndMonth, setConfirmedEndMonth] = react.exports.useState(null);
  react.exports.useEffect(() => {
    if (confirmedEndMonth) {
      onChange({
        endDate: endOfMonth(confirmedEndMonth > startMonth ? transformMonthToDate(confirmedEndMonth) : transformMonthToDate(startMonth)),
        startDate: startOfMonth(confirmedEndMonth > startMonth ? transformMonthToDate(startMonth) : transformMonthToDate(confirmedEndMonth))
      });
    }
  }, [confirmedEndMonth]);

  const handleSelect = monthID => {
    if (isSelecting) {
      setSelecting(false);
      setConfirmedEndMonth(monthID);
      setEndMonth(null);
    } else {
      setSelecting(true);
      setStartMonth(monthID);
      setConfirmedEndMonth(null);
    }
  };

  const handleHover = monthID => {
    isSelecting && setEndMonth(monthID);
  };

  const constructMonthID = monthIndex => {
    return parseInt(`${year}${monthIndex}`);
  };

  const renderMonths = () => monthsArray.map(({
    code,
    name
  }) => {
    const monthID = constructMonthID(code); // eslint-disable-next-line react-hooks/rules-of-hooks

    const buttonClasses = useStyles({
      [styles$e['button_month']]: true,
      [styles$e['button_month--not-selecting']]: !isSelecting,
      [styles$e['button_month--selecting']]: handleRangeMarker(monthID, endMonth, startMonth),
      [styles$e['button_month--selected']]: handleRangeMarker(monthID, confirmedEndMonth, startMonth),
      [styles$e['button_month--disabled']]: monthID < minimalDate || monthID > maximalDate,
      [styles$e['button_month--first']]: handleFirstMarker(monthID),
      [styles$e['button_month--last']]: handleLastMarker(monthID)
    });
    return /*#__PURE__*/React.createElement("button", {
      "data-testid": `button-${name}`,
      className: buttonClasses,
      key: name,
      onClick: () => handleSelect(monthID),
      onMouseOver: () => handleHover(monthID),
      type: "button"
    }, /*#__PURE__*/React.createElement("span", {
      className: styles$e['button_month--marker']
    }), /*#__PURE__*/React.createElement("span", {
      className: styles$e['button_month--name']
    }, i18nHandler(name)));
  });

  const handleFirstMarker = monthID => {
    const currentEndMonth = confirmedEndMonth || endMonth;

    if (!startMonth) {
      return false;
    }

    if (!currentEndMonth) {
      return startMonth === monthID;
    }

    return currentEndMonth > startMonth ? startMonth === monthID : currentEndMonth === monthID;
  };

  const handleLastMarker = monthID => {
    const currentEndMonth = confirmedEndMonth || endMonth;
    return currentEndMonth < startMonth ? startMonth === monthID : currentEndMonth === monthID;
  };

  return /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement("div", {
    "data-testid": "month-range-picker",
    className: styles$e['year-container']
  }, /*#__PURE__*/React.createElement(Button$1, {
    onClick: react.exports.useCallback(() => setYear(year - 1), [year]),
    size: "tiny",
    variant: "icon"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-arrow-left"
  })), /*#__PURE__*/React.createElement("span", {
    className: styles$e['year']
  }, year), /*#__PURE__*/React.createElement(Button$1, {
    onClick: react.exports.useCallback(() => setYear(year + 1), [year]),
    size: "tiny",
    variant: "icon"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-arrow-right"
  }))), /*#__PURE__*/React.createElement(Spacer, {
    space: "tiny"
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$e['grid-container']
  }, renderMonths()));
};

MonthRangePicker.propTypes = {
  onChange: propTypes.exports.func.isRequired,
  minDate: propTypes.exports.instanceOf(Date).isRequired,
  maxDate: propTypes.exports.instanceOf(Date).isRequired,
  i18nHandler: propTypes.exports.func.isRequired
};

/**
 * Picker - stateful presentational component
 * @param {object} props - props
 * @param {func} props.onChange - called on date confirm
 * @param {date} props.minDate - minimal date
 * @param {date} props.maxDate - maximal date
 * @param {date} props.i18n - object of translations
 * @param {func} props.i18nHandler - callback function to translate keys
 * @return {object} An object of children element
 */

const Picker = ({
  minDate,
  maxDate,
  onChange,
  i18n,
  i18nHandler
}) => {
  const [range, setRange] = react.exports.useState(null);
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "layoutMonthRangePicker",
    className: styles$e['month-range-picker']
  }, /*#__PURE__*/React.createElement(Spacer, {
    space: "tiny"
  }), /*#__PURE__*/React.createElement(MonthRangePicker, {
    maxDate: maxDate,
    minDate: minDate,
    onChange: setRange,
    i18nHandler: i18nHandler
  }), /*#__PURE__*/React.createElement(Spacer, {
    space: "tiny"
  }), /*#__PURE__*/React.createElement(Button$1, {
    onClick: react.exports.useCallback(() => onChange(range), [range]),
    size: "tiny"
  }, i18n.apply));
};

Picker.displayName = 'Month Picker Layout Wrapper';
Picker.propTypes = {
  minDate: propTypes.exports.instanceOf(Date).isRequired,
  maxDate: propTypes.exports.instanceOf(Date).isRequired,
  onChange: propTypes.exports.func,
  i18n: propTypes.exports.shape({
    apply: propTypes.exports.string
  }),
  i18nHandler: propTypes.exports.func.isRequired
};
Picker.defaultProps = {
  onChange: () => null,
  i18n: {}
};

var styles$d = {"text--truncate":"OverflowTooltip-module_text--truncate__y3rfN","overflow-tooltip":"OverflowTooltip-module_overflow-tooltip__2NtuG"};

/**
 * OverflowTooltip - stateless presentational component
 * @param {string} props.content - content to overflow
 * @param {string} props.placement - tooltip placement
 * @param {number} props.length - max content length to overflow if it is exceeded
 * @param {object} props.children - children
 * @param {string|array} props.className - list of class names out of component
 * @return {object} An object of children element
 */

const OverflowTooltip = ({
  content,
  placement,
  length,
  children,
  className
}) => {
  const elementClasses = useStyles({
    [styles$d['overflow-tooltip']]: true
  }, className);

  if (content?.length > length) {
    return children ? /*#__PURE__*/React.createElement("div", {
      "data-testid": "overflow-tooltip",
      className: elementClasses
    }, /*#__PURE__*/React.createElement("div", null, `${content.slice(0, length).trim()}...`), /*#__PURE__*/React.createElement(Tooltip, {
      content: content,
      placement: placement
    }, children)) : /*#__PURE__*/React.createElement("div", {
      "data-testid": "overflow-tooltip",
      className: elementClasses
    }, /*#__PURE__*/React.createElement(Tooltip, {
      content: content,
      placement: placement
    }, /*#__PURE__*/React.createElement("div", null, `${content.slice(0, length).trim()}...`)));
  }

  return /*#__PURE__*/React.createElement("div", null, content);
};

OverflowTooltip.displayName = 'OverflowTooltip';
OverflowTooltip.propTypes = {
  children: propTypes.exports.node,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  content: propTypes.exports.string.isRequired,
  length: propTypes.exports.number,
  placement: propTypes.exports.string
};
OverflowTooltip.defaultProps = {
  children: null,
  className: '',
  length: 20,
  placement: 'right'
};

var styles$c = {"text--truncate":"ProgressBar-module_text--truncate__6JuFs","bar":"ProgressBar-module_bar__-Hy4j","bar__background":"ProgressBar-module_bar__background__BnH5Z","bar__fulfillment":"ProgressBar-module_bar__fulfillment__JKEcA","fill":"ProgressBar-module_fill__MAyGB","bar__fulfillment--bordered":"ProgressBar-module_bar__fulfillment--bordered__rwwW7","bar__fulfillment--no-animation":"ProgressBar-module_bar__fulfillment--no-animation__ldkwq","bar--success":"ProgressBar-module_bar--success__JHy8w","bar--warning":"ProgressBar-module_bar--warning__9DBaw","bar--alert":"ProgressBar-module_bar--alert__OOCR3","bar--progress":"ProgressBar-module_bar--progress__iUDM4","bar--brand":"ProgressBar-module_bar--brand__XxZ0d","bar__border--white":"ProgressBar-module_bar__border--white__t-gmt","bar__border--grey":"ProgressBar-module_bar__border--grey__8LQrR","container":"ProgressBar-module_container__dkF5C","container--bordered":"ProgressBar-module_container--bordered__jdIqc","max-result":"ProgressBar-module_max-result__uVdqv","limit-exceeded__info":"ProgressBar-module_limit-exceeded__info__WKoNi"};

/**
 * Progress Bar - stateless presentational component
 * @param {object} props - props
 * @param {number} props.size
 * @param {number} props.limit - limit to display
 * @param {string} props.variant - variant
 * @param {string} props.quantity - quantity to display
 * @param {bool} props.limitExceededInfo - TODO add translation
 * @param {bool} props.showColorNumber - should show limit as an ColoroNumber, deafult: false
 * @param {string} props.border
 * @param {number} props.withoutAnimation
 * @return {object} An object of children element
 */

const ProgressBar = ({
  size,
  limit,
  variant,
  quantity,
  limitExceededInfo,
  showColorNumber,
  border,
  withoutAnimation
}) => {
  const containerStyles = useStyles({
    [styles$c['container']]: true,
    [styles$c['container--bordered']]: border
  });
  const backgroundStyles = useStyles({
    [styles$c['bar']]: true,
    [styles$c['bar__background']]: true,
    [styles$c[`bar--${variant}`]]: true,
    [styles$c[`bar__border--${border}`]]: border
  });
  const fulfillmentStyles = useStyles({
    [styles$c['bar']]: true,
    [styles$c['bar__fulfillment']]: true,
    [styles$c[`bar--${variant}`]]: true,
    [styles$c['bar__fulfillment--bordered']]: border,
    [styles$c['bar__fulfillment--no-animation']]: withoutAnimation
  });
  return /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: containerStyles
  }, /*#__PURE__*/React.createElement("span", {
    "data-testid": "background",
    className: backgroundStyles
  }), /*#__PURE__*/React.createElement("span", {
    "data-testid": "fulfillment",
    className: fulfillmentStyles,
    style: {
      width: `${quantity / limit * 100}%`
    }
  })), limitExceededInfo && /*#__PURE__*/React.createElement("span", {
    className: styles$c['limit-exceeded__info']
  }, "limitExceededInfo"), showColorNumber && /*#__PURE__*/React.createElement("span", {
    "data-testid": "color-number",
    className: styles$c['max-result']
  }, /*#__PURE__*/React.createElement(ColorNumber, {
    variant: variant,
    size: size
  }, quantity), "/", limit));
};

ProgressBar.displayName = 'ProgressBar';
ProgressBar.propTypes = {
  variant: propTypes.exports.oneOf(['success', 'warning', 'alert', 'progress', 'brand']).isRequired,
  quantity: propTypes.exports.number.isRequired,
  limit: propTypes.exports.number,
  size: propTypes.exports.number,
  border: propTypes.exports.oneOf(['white', 'grey']),
  //TODO: add translation or put translation in prop
  limitExceededInfo: propTypes.exports.bool,
  showColorNumber: propTypes.exports.bool,
  withoutAnimation: propTypes.exports.bool
};
ProgressBar.defaultProps = {
  limit: 100,
  size: 32,
  limitExceededInfo: false,
  showColorNumber: false,
  border: null,
  withoutAnimation: false
};

var styles$b = {"text--truncate":"Section-module_text--truncate__D1keY","section-space--medium":"Section-module_section-space--medium__22v4A","section-space--huge":"Section-module_section-space--huge__eFB-D","layout-width--full":"Section-module_layout-width--full__9lki5","section-bg--default":"Section-module_section-bg--default__w2eqd","section-bg--white":"Section-module_section-bg--white__SrgWf"};

/**
 * Section - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: section
 * @param {object} props.children - children
 * @param {string} props.space - Space
 * @param {string} props.width - width
 * @param {string} props.background - style
 * @return {object} An object of children element
 */

const Section = ({
  className,
  children,
  space,
  width,
  background
}) => {
  const elementClasses = useStyles({
    [styles$b['section']]: true,
    [styles$b[`section-space--${space}`]]: space,
    [styles$b[`layout-width--${width}`]]: width,
    [styles$b[`section-bg--${background}`]]: background
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }, children);
};

Section.displayName = 'Section';
Section.propTypes = {
  background: propTypes.exports.string,
  children: propTypes.exports.node.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  space: propTypes.exports.string,
  width: propTypes.exports.string
};
Section.defaultProps = {
  className: '',
  background: 'default',
  space: 'medium',
  width: 'full'
};

var styles$a = {"text--truncate":"SectionTile-module_text--truncate__g-4h6","section__tile":"SectionTile-module_section__tile__W8CpJ","section__pointer-area":"SectionTile-module_section__pointer-area__U7-5A"};

/**
 * SectionTile - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - children
 * @param {string} props.thumbnailUrl - thumbnail url
 * @param {function} props.onClick - onClick
 * @param {function} props.onDoubleClick - onDoubleClick
 * @param {boolean} props.isActive - onDoubleClick
 * @return {object} An object of children element
 */

const SectionTile = ({
  children,
  thumbnailUrl,
  onClick,
  onDoubleClick,
  isActive
}) => /*#__PURE__*/React.createElement(BoxOutline, {
  className: styles$a['section__tile'],
  isSelected: isActive,
  padding: "none"
}, /*#__PURE__*/React.createElement("div", {
  style: {
    background: `url(${thumbnailUrl}) center top no-repeat`
  },
  className: styles$a['section__pointer-area'],
  onClick: onClick,
  onDoubleClick: onDoubleClick
}), children);

SectionTile.displayName = 'SectionTile';
SectionTile.propTypes = {
  children: propTypes.exports.node.isRequired,
  thumbnailUrl: propTypes.exports.string,
  onClick: propTypes.exports.func,
  onDoubleClick: propTypes.exports.func,
  isActive: propTypes.exports.bool
};
SectionTile.defaultProps = {
  thumbnailUrl: '',
  isActive: false,
  onClick: () => null,
  onDoubleClick: () => null
};

/**
 * Select option - stateless presentational component
 * @param {object} props - props
 * @param {string} props.className - list of class names, default: select__option
 * @param {string|number} props.value - click handler
 * @param {string} props.label
 * @return {object} An object of children element
 */

const Option = ({
  className,
  value,
  label
}) => /*#__PURE__*/React.createElement("option", {
  className: className,
  value: value
}, label);

Option.displayName = 'select.option';
Option.propTypes = {
  className: propTypes.exports.string,
  label: propTypes.exports.string.isRequired,
  value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number]).isRequired
};
Option.defaultProps = {
  className: 'select__option'
};

var styles$9 = {"text--truncate":"Select-module_text--truncate__YhtvE","select":"Select-module_select__U4LyF"};

/**
 * Select - stateless presentational component
 * @param {object} props - props
 * @param {string|number} props.value - value
 * @param {array} props.data - data
 * @param {name} props.name - name
 * @param {function} props.onChange - on change handler
 * @return {object} An object of children element
 */

const Select = ({
  value,
  data,
  name,
  onChange
}) => {
  const selectStyles = useStyles({
    [styles$9['select']]: true
  });
  return /*#__PURE__*/React.createElement("select", {
    className: selectStyles,
    name: name,
    onChange: onChange,
    value: value
  }, data.map(item => /*#__PURE__*/React.createElement(Option, {
    key: uuid_1(),
    label: item.label,
    value: item.value
  })));
};

Select.displayName = 'Select';
Select.propTypes = {
  data: propTypes.exports.arrayOf(propTypes.exports.shape({})).isRequired,
  name: propTypes.exports.string.isRequired,
  onChange: propTypes.exports.func,
  value: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number])
};
Select.defaultProps = {
  onChange: () => null,
  value: undefined
};

var styles$8 = {"text--truncate":"Separator-module_text--truncate__ysiIi","separator":"Separator-module_separator__k9fO-","separator__divider":"Separator-module_separator__divider__UCYek","separator__divider--medium":"Separator-module_separator__divider--medium__Jshvq","separator__divider--color-4":"Separator-module_separator__divider--color-4__m4Hm0"};

/**
 * Separator - stateless presentational component
 * @param {string|array} props.className - list of class names
 * @param {object} props.children - children
 * @param {string} props.size - size
 * @param {string} props.color - color
 * @return {object} An object of children element
 */

const Separator = ({
  className,
  children,
  size,
  color
}) => {
  const elementClasses = useStyles({
    [styles$8['separator__divider']]: true,
    [styles$8[`separator__divider--${size}`]]: size,
    [styles$8[`separator__divider--${color}`]]: color
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    className: styles$8.separator
  }, /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }), /*#__PURE__*/React.createElement(Spreader, {
    spread: "tiny"
  }), children, /*#__PURE__*/React.createElement(Spreader, {
    spread: "tiny"
  }), /*#__PURE__*/React.createElement("div", {
    className: elementClasses
  }));
};

Separator.displayName = 'Separator';
Separator.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  children: propTypes.exports.node.isRequired,
  size: propTypes.exports.oneOf(['medium']),
  color: propTypes.exports.string
};
Separator.defaultProps = {
  className: '',
  size: 'medium',
  color: 'color-4'
};

var styles$7 = {"text--truncate":"ShowMore-module_text--truncate__ATIex","container":"ShowMore-module_container__bQevu","button":"ShowMore-module_button__K8v-1"};

/**
 * Show more/less - stateful presentational component
 * @param {object} props
 * @param {number} props.height
 * @param {object} props.children
 * @param {object} props.i18n
 * @return {object} An object of children element
 */

const ShowMore = ({
  height,
  children,
  i18n
}) => {
  const isOpen = useIsOpen(false);
  const [sectionHeight, setSectionHeight] = react.exports.useState(height);
  const [isButtonDisplay, setButtonDisplay] = react.exports.useState(false);
  const content = react.exports.useRef(null);
  react.exports.useLayoutEffect(() => {
    const offsetHeight = content.current.offsetHeight;
    content.current.offsetHeight > height ? setButtonDisplay(true) : setButtonDisplay(false);
    sectionHeight > offsetHeight ? isOpen.setValue(false) : isOpen.setValue(true);
    return () => {
      isOpen.setValue(false);
    };
  }, []);
  const handleOnClick = react.exports.useCallback(event => {
    event.preventDefault();
    isOpen.toggleOneElement();
    const offsetHeight = isOpen.value ? undefined : height;
    setSectionHeight(offsetHeight);
  });
  return /*#__PURE__*/React.createElement(react.exports.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      maxHeight: sectionHeight
    },
    className: styles$7.container
  }, /*#__PURE__*/React.createElement("div", {
    ref: content
  }, children)), isButtonDisplay && /*#__PURE__*/React.createElement("button", {
    "data-testid": "show-more",
    type: "button",
    onClick: handleOnClick,
    className: styles$7.button
  }, isOpen.value ? `${i18n.more}` : `${i18n.less}`));
};

ShowMore.displayName = 'ShowMore';
ShowMore.propTypes = {
  height: propTypes.exports.number,
  children: propTypes.exports.instanceOf(Object).isRequired,
  i18n: propTypes.exports.shape({
    less: propTypes.exports.string,
    more: propTypes.exports.string
  })
};
ShowMore.defaultProps = {
  height: 100,
  i18n: {}
};

var styles$6 = {"text--truncate":"ShowPassword-module_text--truncate__TaTch","showpassword":"ShowPassword-module_showpassword__Hguii"};

/**
 * ShowPassword - stateful presentational component
 * @param {object} props - props
 * @param {string|array} props.className
 * @param {bool} props.setHidden
 * @param {bool} props.hasLabel
 * @param {object} props.i18n
 * @return {object} An object of children element
 */

const ShowPassword = ({
  className,
  setHidden,
  hasLabel,
  i18n
}) => {
  const [icon, setIcon] = react.exports.useState('icon-eye-close');
  const [label, setLabel] = react.exports.useState('');
  /**
   * HandleIconSet - set the icon state
   */

  const handleIconSet = react.exports.useCallback(() => {
    if (icon === 'icon-eye-close') {
      setIcon('icon-eye-open');
      setHidden('text');
      setLabel(i18n.hide);
    } else {
      setIcon('icon-eye-close');
      setHidden('password');
      setLabel(i18n.show);
    }
  });
  const showPasswordStyles = useStyles({
    [styles$6.showpassword]: true
  }, className);
  return /*#__PURE__*/React.createElement("span", {
    className: showPasswordStyles,
    onClick: handleIconSet,
    "data-testid": "show-pasword"
  }, hasLabel ? /*#__PURE__*/React.createElement(Button$1, {
    hasIcon: true,
    size: "tiny",
    variant: "switcher-brand"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: icon,
    "data-testid": icon
  }), label) : /*#__PURE__*/React.createElement(Button$1, {
    variant: "icon"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: icon
  })));
};

ShowPassword.displayName = 'ShowPassword';
ShowPassword.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  hasLabel: propTypes.exports.bool,
  setHidden: propTypes.exports.func,
  i18n: propTypes.exports.shape({
    show: propTypes.exports.string,
    hide: propTypes.exports.string
  })
};
ShowPassword.defaultProps = {
  className: '',
  hasLabel: false,
  setHidden: () => null,
  i18n: {
    show: 'word.show',
    hide: 'word.hide'
  }
};

var styles$5 = {"text--truncate":"Skeleton-module_text--truncate__lv5HU","sidebarSkeleton":"Skeleton-module_sidebarSkeleton__H9wq6","item":"Skeleton-module_item__OUvJl","line":"Skeleton-module_line__8roAA","circle":"Skeleton-module_circle__o-WgD","shine-circle-sidebar":"Skeleton-module_shine-circle-sidebar__KPSeD","shine-lines-sidebar":"Skeleton-module_shine-lines-sidebar__JaZgk","drawerSkeleton":"Skeleton-module_drawerSkeleton__HTsiz","shine-circle":"Skeleton-module_shine-circle__zq3Zu","shine-lines":"Skeleton-module_shine-lines__JMxXv","tableSkeleton":"Skeleton-module_tableSkeleton__UzoG3","skeleton":"Skeleton-module_skeleton__-VV98"};

/**
 * Skeleton sidebar - stateless presentational component
 * @return {object} An object of children element
 */

function SkeletonSidebar() {
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "skeleton-sidebar",
    className: styles$5.sidebarSkeleton
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$5.item
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$5.circle
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$5.item
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$5.circle
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$5.item
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$5.circle
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$5.item
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$5.circle
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$5.item
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$5.circle
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  })));
}
/**
 * Skeleton drawer - stateless presentational component
 * @return {object} An object of children element
 */

function SkeletonDrawer() {
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "skeleton-drawer",
    className: styles$5.drawerSkeleton
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$5.item
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: styles$5.circle
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$5.item
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: styles$5.circle
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$5.item
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: styles$5.circle
  })), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  }), /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  })));
}
/**
 * Skeleton line - stateless presentational component
 * @return {object} An object of children element
 */

function SkeletonLine() {
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "skeleton-line",
    className: styles$5.skeleton
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$5.line
  }));
}
/**
 * Skeleton circle - stateless presentational component
 * @return {object} An object of children element
 */

function SkeletonCircle() {
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "skeleton-circle",
    className: styles$5.skeleton
  }, /*#__PURE__*/React.createElement("div", {
    className: styles$5.circle
  }));
}

var styles$4 = {"text--truncate":"StatsBadge-module_text--truncate__ydbo1","container":"StatsBadge-module_container__3tDFd","container--green":"StatsBadge-module_container--green__JmoBE","container--yellow":"StatsBadge-module_container--yellow__KEcry","container--pink":"StatsBadge-module_container--pink__heuJQ","container--description":"StatsBadge-module_container--description__yHvu5"};

/**
 * StatsBadge - stateless presentational component
 * @param {object} props
 * @param {string} props.color
 * @param {number} props.quantity
 * @param {string} props.description
 * @return {object} An object of children element
 */

const StatsBadge = ({
  className,
  color,
  quantity,
  description
}) => {
  const badgeStyles = useStyles({
    [styles$4['container']]: true,
    [styles$4[`container--${color}`]]: color
  }, className);
  const descriptionStyles = useStyles({
    [styles$4['container--description']]: true
  });
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "badge",
    className: badgeStyles
  }, /*#__PURE__*/React.createElement("div", {
    className: descriptionStyles
  }, /*#__PURE__*/React.createElement(Heading, {
    level: 2,
    margin: "none"
  }, quantity), /*#__PURE__*/React.createElement(Heading, {
    level: 5
  }, description)));
};

StatsBadge.displayName = 'StatsBadge';
StatsBadge.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  color: propTypes.exports.oneOf(['green', 'yellow', 'pink']),
  description: propTypes.exports.string.isRequired,
  quantity: propTypes.exports.number
};
StatsBadge.defaultProps = {
  className: '',
  color: 'green',
  quantity: 0
};

var styles$3 = {"text--truncate":"StatusIcon-module_text--truncate__4quJy","status-icon":"StatusIcon-module_status-icon__oIfDB","status-icon--active":"StatusIcon-module_status-icon--active__PRS--","status-icon--inactive":"StatusIcon-module_status-icon--inactive__vFgPc","status-icon--tiny":"StatusIcon-module_status-icon--tiny__8R1SP","status-icon--medium":"StatusIcon-module_status-icon--medium__qhct9"};

/**
 * Status Icon - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names
 * @param {string} props.variant - variant of statusIcon active, inactive
 * @param {string} props.size - variant of statusIcon tiny, medium
 */

const StatusIcon = ({
  className,
  variant,
  size
}) => {
  const statusIconStyles = useStyles({
    [styles$3['status-icon']]: true,
    [styles$3[`status-icon--${variant}`]]: variant,
    [styles$3[`status-icon--${size}`]]: size
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "status-icon",
    className: statusIconStyles
  }, variant === 'active' ? /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-ok"
  }) : /*#__PURE__*/React.createElement(Icon, {
    icon: "icon-remove"
  }));
};

StatusIcon.displayName = 'StatusIcon';
StatusIcon.propTypes = {
  className: propTypes.exports.string,
  size: propTypes.exports.oneOf(['tiny', 'medium']),
  variant: propTypes.exports.oneOf(['active', 'inactive'])
};
StatusIcon.defaultProps = {
  className: '',
  size: 'medium',
  variant: 'active'
};

var styles$2 = {"text--truncate":"Steps-module_text--truncate__rNh-k","container":"Steps-module_container__jjMpY","step":"Steps-module_step__xylai","step__description--completed":"Steps-module_step__description--completed__XNbwC","step__description--current":"Steps-module_step__description--current__ptZm4","step__description--next":"Steps-module_step__description--next__ey808"};

/**
 * Steps - stateless presentational component
 * @param {object} props - props
 * @param {object[]} props.data - data
 * @return {object} An object of children element
 */

const Steps = ({
  data
}) => {
  return /*#__PURE__*/React.createElement("div", {
    className: styles$2.container
  }, data.map((item, index) => {
    const step = index + 1;
    const {
      variant,
      description
    } = item;
    return /*#__PURE__*/React.createElement("div", {
      className: styles$2.step,
      key: uuid_1()
    }, /*#__PURE__*/React.createElement(StepNumber, {
      step: step,
      variant: variant
    }), /*#__PURE__*/React.createElement("span", {
      className: styles$2[`step__description--${variant}`]
    }, description));
  }));
};

Steps.displayName = 'Steps';
Steps.propTypes = {
  data: propTypes.exports.arrayOf(shape$1).isRequired
};

const tabContext = /*#__PURE__*/react.exports.createContext();

var queryString = {};

var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
  try {
    // Try to decode the entire string first
    return decodeURIComponent(components.join(''));
  } catch (err) {// Do nothing
  }

  if (components.length === 1) {
    return components;
  }

  split = split || 1; // Split the array in 2 parts

  var left = components.slice(0, split);
  var right = components.slice(split);
  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
  try {
    return decodeURIComponent(input);
  } catch (err) {
    var tokens = input.match(singleMatcher);

    for (var i = 1; i < tokens.length; i++) {
      input = decodeComponents(tokens, i).join('');
      tokens = input.match(singleMatcher);
    }

    return input;
  }
}

function customDecodeURIComponent(input) {
  // Keep track of all the replacements and prefill the map with the `BOM`
  var replaceMap = {
    '%FE%FF': '\uFFFD\uFFFD',
    '%FF%FE': '\uFFFD\uFFFD'
  };
  var match = multiMatcher.exec(input);

  while (match) {
    try {
      // Decode as big chunks as possible
      replaceMap[match[0]] = decodeURIComponent(match[0]);
    } catch (err) {
      var result = decode(match[0]);

      if (result !== match[0]) {
        replaceMap[match[0]] = result;
      }
    }

    match = multiMatcher.exec(input);
  } // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else


  replaceMap['%C2'] = '\uFFFD';
  var entries = Object.keys(replaceMap);

  for (var i = 0; i < entries.length; i++) {
    // Replace all decoded components
    var key = entries[i];
    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
  }

  return input;
}

var decodeUriComponent = function (encodedURI) {
  if (typeof encodedURI !== 'string') {
    throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
  }

  try {
    encodedURI = encodedURI.replace(/\+/g, ' '); // Try the built in decoder first

    return decodeURIComponent(encodedURI);
  } catch (err) {
    // Fallback to a more advanced decoder
    return customDecodeURIComponent(encodedURI);
  }
};

var splitOnFirst = (string, separator) => {
  if (!(typeof string === 'string' && typeof separator === 'string')) {
    throw new TypeError('Expected the arguments to be of type `string`');
  }

  if (separator === '') {
    return [string];
  }

  const separatorIndex = string.indexOf(separator);

  if (separatorIndex === -1) {
    return [string];
  }

  return [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];
};

var filterObj = function (obj, predicate) {
  var ret = {};
  var keys = Object.keys(obj);
  var isArr = Array.isArray(predicate);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var val = obj[key];

    if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
      ret[key] = val;
    }
  }

  return ret;
};

(function (exports) {

	const strictUriEncode$1 = strictUriEncode;

	const decodeComponent = decodeUriComponent;

	const splitOnFirst$1 = splitOnFirst;

	const filterObject = filterObj;

	const isNullOrUndefined = value => value === null || value === undefined;

	const encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');

	function encoderForArrayFormat(options) {
	  switch (options.arrayFormat) {
	    case 'index':
	      return key => (result, value) => {
	        const index = result.length;

	        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
	          return result;
	        }

	        if (value === null) {
	          return [...result, [encode(key, options), '[', index, ']'].join('')];
	        }

	        return [...result, [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')];
	      };

	    case 'bracket':
	      return key => (result, value) => {
	        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
	          return result;
	        }

	        if (value === null) {
	          return [...result, [encode(key, options), '[]'].join('')];
	        }

	        return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
	      };

	    case 'colon-list-separator':
	      return key => (result, value) => {
	        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
	          return result;
	        }

	        if (value === null) {
	          return [...result, [encode(key, options), ':list='].join('')];
	        }

	        return [...result, [encode(key, options), ':list=', encode(value, options)].join('')];
	      };

	    case 'comma':
	    case 'separator':
	    case 'bracket-separator':
	      {
	        const keyValueSep = options.arrayFormat === 'bracket-separator' ? '[]=' : '=';
	        return key => (result, value) => {
	          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
	            return result;
	          } // Translate null to an empty string so that it doesn't serialize as 'null'


	          value = value === null ? '' : value;

	          if (result.length === 0) {
	            return [[encode(key, options), keyValueSep, encode(value, options)].join('')];
	          }

	          return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
	        };
	      }

	    default:
	      return key => (result, value) => {
	        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
	          return result;
	        }

	        if (value === null) {
	          return [...result, encode(key, options)];
	        }

	        return [...result, [encode(key, options), '=', encode(value, options)].join('')];
	      };
	  }
	}

	function parserForArrayFormat(options) {
	  let result;

	  switch (options.arrayFormat) {
	    case 'index':
	      return (key, value, accumulator) => {
	        result = /\[(\d*)\]$/.exec(key);
	        key = key.replace(/\[\d*\]$/, '');

	        if (!result) {
	          accumulator[key] = value;
	          return;
	        }

	        if (accumulator[key] === undefined) {
	          accumulator[key] = {};
	        }

	        accumulator[key][result[1]] = value;
	      };

	    case 'bracket':
	      return (key, value, accumulator) => {
	        result = /(\[\])$/.exec(key);
	        key = key.replace(/\[\]$/, '');

	        if (!result) {
	          accumulator[key] = value;
	          return;
	        }

	        if (accumulator[key] === undefined) {
	          accumulator[key] = [value];
	          return;
	        }

	        accumulator[key] = [].concat(accumulator[key], value);
	      };

	    case 'colon-list-separator':
	      return (key, value, accumulator) => {
	        result = /(:list)$/.exec(key);
	        key = key.replace(/:list$/, '');

	        if (!result) {
	          accumulator[key] = value;
	          return;
	        }

	        if (accumulator[key] === undefined) {
	          accumulator[key] = [value];
	          return;
	        }

	        accumulator[key] = [].concat(accumulator[key], value);
	      };

	    case 'comma':
	    case 'separator':
	      return (key, value, accumulator) => {
	        const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);
	        const isEncodedArray = typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator);
	        value = isEncodedArray ? decode(value, options) : value;
	        const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
	        accumulator[key] = newValue;
	      };

	    case 'bracket-separator':
	      return (key, value, accumulator) => {
	        const isArray = /(\[\])$/.test(key);
	        key = key.replace(/\[\]$/, '');

	        if (!isArray) {
	          accumulator[key] = value ? decode(value, options) : value;
	          return;
	        }

	        const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map(item => decode(item, options));

	        if (accumulator[key] === undefined) {
	          accumulator[key] = arrayValue;
	          return;
	        }

	        accumulator[key] = [].concat(accumulator[key], arrayValue);
	      };

	    default:
	      return (key, value, accumulator) => {
	        if (accumulator[key] === undefined) {
	          accumulator[key] = value;
	          return;
	        }

	        accumulator[key] = [].concat(accumulator[key], value);
	      };
	  }
	}

	function validateArrayFormatSeparator(value) {
	  if (typeof value !== 'string' || value.length !== 1) {
	    throw new TypeError('arrayFormatSeparator must be single character string');
	  }
	}

	function encode(value, options) {
	  if (options.encode) {
	    return options.strict ? strictUriEncode$1(value) : encodeURIComponent(value);
	  }

	  return value;
	}

	function decode(value, options) {
	  if (options.decode) {
	    return decodeComponent(value);
	  }

	  return value;
	}

	function keysSorter(input) {
	  if (Array.isArray(input)) {
	    return input.sort();
	  }

	  if (typeof input === 'object') {
	    return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map(key => input[key]);
	  }

	  return input;
	}

	function removeHash(input) {
	  const hashStart = input.indexOf('#');

	  if (hashStart !== -1) {
	    input = input.slice(0, hashStart);
	  }

	  return input;
	}

	function getHash(url) {
	  let hash = '';
	  const hashStart = url.indexOf('#');

	  if (hashStart !== -1) {
	    hash = url.slice(hashStart);
	  }

	  return hash;
	}

	function extract(input) {
	  input = removeHash(input);
	  const queryStart = input.indexOf('?');

	  if (queryStart === -1) {
	    return '';
	  }

	  return input.slice(queryStart + 1);
	}

	function parseValue(value, options) {
	  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {
	    value = Number(value);
	  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
	    value = value.toLowerCase() === 'true';
	  }

	  return value;
	}

	function parse(query, options) {
	  options = Object.assign({
	    decode: true,
	    sort: true,
	    arrayFormat: 'none',
	    arrayFormatSeparator: ',',
	    parseNumbers: false,
	    parseBooleans: false
	  }, options);
	  validateArrayFormatSeparator(options.arrayFormatSeparator);
	  const formatter = parserForArrayFormat(options); // Create an object with no prototype

	  const ret = Object.create(null);

	  if (typeof query !== 'string') {
	    return ret;
	  }

	  query = query.trim().replace(/^[?#&]/, '');

	  if (!query) {
	    return ret;
	  }

	  for (const param of query.split('&')) {
	    if (param === '') {
	      continue;
	    }

	    let [key, value] = splitOnFirst$1(options.decode ? param.replace(/\+/g, ' ') : param, '='); // Missing `=` should be `null`:
	    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters

	    value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);
	    formatter(decode(key, options), value, ret);
	  }

	  for (const key of Object.keys(ret)) {
	    const value = ret[key];

	    if (typeof value === 'object' && value !== null) {
	      for (const k of Object.keys(value)) {
	        value[k] = parseValue(value[k], options);
	      }
	    } else {
	      ret[key] = parseValue(value, options);
	    }
	  }

	  if (options.sort === false) {
	    return ret;
	  }

	  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
	    const value = ret[key];

	    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
	      // Sort object keys, not values
	      result[key] = keysSorter(value);
	    } else {
	      result[key] = value;
	    }

	    return result;
	  }, Object.create(null));
	}

	exports.extract = extract;
	exports.parse = parse;

	exports.stringify = (object, options) => {
	  if (!object) {
	    return '';
	  }

	  options = Object.assign({
	    encode: true,
	    strict: true,
	    arrayFormat: 'none',
	    arrayFormatSeparator: ','
	  }, options);
	  validateArrayFormatSeparator(options.arrayFormatSeparator);

	  const shouldFilter = key => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === '';

	  const formatter = encoderForArrayFormat(options);
	  const objectCopy = {};

	  for (const key of Object.keys(object)) {
	    if (!shouldFilter(key)) {
	      objectCopy[key] = object[key];
	    }
	  }

	  const keys = Object.keys(objectCopy);

	  if (options.sort !== false) {
	    keys.sort(options.sort);
	  }

	  return keys.map(key => {
	    const value = object[key];

	    if (value === undefined) {
	      return '';
	    }

	    if (value === null) {
	      return encode(key, options);
	    }

	    if (Array.isArray(value)) {
	      if (value.length === 0 && options.arrayFormat === 'bracket-separator') {
	        return encode(key, options) + '[]';
	      }

	      return value.reduce(formatter(key), []).join('&');
	    }

	    return encode(key, options) + '=' + encode(value, options);
	  }).filter(x => x.length > 0).join('&');
	};

	exports.parseUrl = (url, options) => {
	  options = Object.assign({
	    decode: true
	  }, options);
	  const [url_, hash] = splitOnFirst$1(url, '#');
	  return Object.assign({
	    url: url_.split('?')[0] || '',
	    query: parse(extract(url), options)
	  }, options && options.parseFragmentIdentifier && hash ? {
	    fragmentIdentifier: decode(hash, options)
	  } : {});
	};

	exports.stringifyUrl = (object, options) => {
	  options = Object.assign({
	    encode: true,
	    strict: true,
	    [encodeFragmentIdentifier]: true
	  }, options);
	  const url = removeHash(object.url).split('?')[0] || '';
	  const queryFromUrl = exports.extract(object.url);
	  const parsedQueryFromUrl = exports.parse(queryFromUrl, {
	    sort: false
	  });
	  const query = Object.assign(parsedQueryFromUrl, object.query);
	  let queryString = exports.stringify(query, options);

	  if (queryString) {
	    queryString = `?${queryString}`;
	  }

	  let hash = getHash(object.url);

	  if (object.fragmentIdentifier) {
	    hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
	  }

	  return `${url}${queryString}${hash}`;
	};

	exports.pick = (input, filter, options) => {
	  options = Object.assign({
	    parseFragmentIdentifier: true,
	    [encodeFragmentIdentifier]: false
	  }, options);
	  const {
	    url,
	    query,
	    fragmentIdentifier
	  } = exports.parseUrl(input, options);
	  return exports.stringifyUrl({
	    url,
	    query: filterObject(query, filter),
	    fragmentIdentifier
	  }, options);
	};

	exports.exclude = (input, filter, options) => {
	  const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);
	  return exports.pick(input, exclusionFilter, options);
	};
} (queryString));

const setQueryStringWithoutPageReload = qsValue => {
  const newurl = `${window.location.protocol}//${window.location.host}${window.location.pathname}${qsValue}`;
  window.history.pushState({
    path: newurl
  }, '', newurl);
};

const getQueryStringValue = (key, queryString$1 = window.location.search) => {
  const values = queryString.parse(queryString$1);
  return values[key];
};
const setQueryStringValue = (key, value, queryString$1 = window.location.search) => {
  const values = queryString.parse(queryString$1),
        newQsValue = queryString.stringify({ ...values,
    [key]: value
  });
  setQueryStringWithoutPageReload(`?${newQsValue}`);
};

const useQueryString = (key, initialValue) => {
  const [value, setValue] = react.exports.useState(getQueryStringValue(key) || initialValue),
        onSetValue = react.exports.useCallback(newValue => {
    setValue(newValue);
    setQueryStringValue(key, newValue);
  }, [key]);
  return [value, onSetValue];
};

var styles$1 = {"text--truncate":"Tabs-module_text--truncate__aRRuH","tab":"Tabs-module_tab__LYqhc","tab--active":"Tabs-module_tab--active__EAtDK","tab__list":"Tabs-module_tab__list__SQvrB","tab__panel":"Tabs-module_tab__panel__q267o"};

/**
 * Tab - stateless presentational component
 * @param {object} props - props
 * @param {string} props.name - name
 * @param {string|array} props.className - list of class names, default: `tab`
 * @param {function} props.onClick - onClick handler
 * @param {bool} props.isDisabled - is opening tab disabled
 * @param {object} props.children - children
 * @param {string|array|object} props.restProps - rest of props
 * @return {object} An object of children element
 */

const Tab = ({
  name,
  className,
  onClick,
  isDisabled,
  children,
  ...restProps
}) => {
  const tabContext$1 = react.exports.useContext(tabContext);
  const [, setTabValue] = useQueryString('tab');
  const tabStyles = useStyles({
    [styles$1.tab]: true,
    [styles$1['tab--active']]: tabContext$1.activeTab === name
  }, className);
  /**
   * Handle tab click
   * @type {function}
   */

  const handleClick = react.exports.useCallback(event => {
    setTabValue(name);
    tabContext$1.changeTab(name);
    onClick(event);
  }, []);
  /**
   * Handle disabled tab click
   * invoke only custom handler without opening tab
   * @type {function}
   */

  const handleDisabledTabClick = react.exports.useCallback(event => onClick(event), []);
  return /*#__PURE__*/React.createElement("span", _extends$6({
    className: tabStyles,
    onClick: isDisabled ? handleDisabledTabClick : handleClick,
    "data-testid": "tab-button"
  }, restProps), /*#__PURE__*/React.createElement(Button$1, {
    variant: "tabs"
  }, children));
};

Tab.displayName = 'Tab';
Tab.propTypes = {
  onClick: propTypes.exports.func,
  name: propTypes.exports.string.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.string, propTypes.exports.func]).isRequired,
  isDisabled: propTypes.exports.bool,
  onDisabledClick: propTypes.exports.func
};
Tab.defaultProps = {
  className: '',
  onClick: () => null,
  isDisabled: false
};

/**
 * TabList - stateless presentational component
 * @param {object} props - props
 * @param {string|array} props.className - list of class names, default: `tab__list`
 * @param {object} props.children - children
 * @param {string|array|object} props.restProps - rest of props
 * @return {object} An object of children element
 */

const TabList = ({
  className,
  children,
  ...restProps
}) => {
  const tabListStyles = useStyles({
    [styles$1['tab__list']]: true
  }, className);
  return /*#__PURE__*/React.createElement("div", _extends$6({
    className: tabListStyles
  }, restProps), children);
};

TabList.displayName = 'TabList';
TabList.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.string, propTypes.exports.func]).isRequired
};
TabList.defaultProps = {
  className: ''
};

/**
 * TabPanel - stateless presentational component
 * @param {object} props - props
 * @param {string} props.name - name
 * @param {string|array} props.className - list of class names
 * @param {object} props.children - children
 * @param {string|array|object} props.restProps - rest of props
 * @return {object} An object of children element
 */

const TabPanel = ({
  name,
  className,
  children,
  ...restProps
}) => {
  const tabContext$1 = react.exports.useContext(tabContext);
  const tabPanelStyles = useStyles({
    [styles$1['tab__panel']]: true
  }, className);
  return tabContext$1.activeTab === name && /*#__PURE__*/React.createElement("div", _extends$6({
    className: tabPanelStyles
  }, restProps), children);
};

TabPanel.displayName = 'TabPanel';
TabPanel.propTypes = {
  name: propTypes.exports.string.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.string, propTypes.exports.func]).isRequired
};
TabPanel.defaultProps = {
  className: ''
};

/**
 * Tabs - stateless presentational component
 * @param {object} props - props
 * @param {string} props.initialValue - initial value
 * @param {string|array} props.className - list of class names
 * @param {object} props.children - children
 * @param {string|array|object} props.restProps - rest of props
 * @return {object} An object of children element
 */

const Tabs = ({
  initialValue,
  className,
  children,
  ...restProps
}) => {
  const [activeTab, changeTab] = react.exports.useState(initialValue);
  const tabProviderValue = {
    activeTab,
    changeTab
  };
  const tabsStyles = useStyles({
    [styles$1['tabs__wrapper']]: true
  }, className);
  return /*#__PURE__*/React.createElement(tabContext.Provider, {
    value: tabProviderValue
  }, /*#__PURE__*/React.createElement("div", _extends$6({
    className: tabsStyles
  }, restProps), children));
};

Tabs.displayName = 'Tabs';
Tabs.propTypes = {
  initialValue: propTypes.exports.string.isRequired,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.string, propTypes.exports.func]).isRequired
};
Tabs.defaultProps = {
  className: ''
};

var scss = {"text--truncate":"TextOverflow_text--truncate__iUSHT","overflow":"TextOverflow_overflow__I-yGu"};

/**
 * Exports css classes from SCSS file
 * @return {object} An object of styles
 */

const cssClass = styles$1b(scss); //TODO TextOverflow css, test

/**
 * TextOverflow - stateless presentational component
 * @param {object} props - props
 * @param {object} props.children - childrens
 * @param {string|array} props.className - list of class names, default: overflow
 * @return {object} An object of children element
 */

const TextOverflow = ({
  children,
  className
}) => /*#__PURE__*/React.createElement("div", {
  className: cssClass(className)
}, children);

TextOverflow.displayName = 'TextOverflow';
TextOverflow.propTypes = {
  children: propTypes.exports.node,
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array])
};
TextOverflow.defaultProps = {
  children: null,
  className: 'overflow'
};

var styles = {"text--truncate":"Textarea-module_text--truncate__edMd7","textarea":"Textarea-module_textarea__yE6jp"};

/**
 * Textarea - stateless presentational component
 * @param {string | array} className - list of custom css class from out of component
 * @param {string} name - name
 * @param {string} id - id
 * @param {string} value - value
 * @param {func} onChange - on change callback
 * @param {object} i18n - props with translated string
 * @return {object} An object of children element
 */

const Textarea = ({
  className,
  name,
  id,
  value,
  onChange,
  i18n
}) => {
  const textAreaStyles = useStyles({
    [styles['textarea']]: true
  }, className);
  return /*#__PURE__*/React.createElement("textarea", {
    className: textAreaStyles,
    id: id,
    name: name,
    placeholder: i18n.placeholder,
    onChange: onChange,
    value: value
  });
};

Textarea.displayName = 'Textarea';
Textarea.propTypes = {
  className: propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.array]),
  name: propTypes.exports.string,
  id: propTypes.exports.string,
  value: propTypes.exports.string.isRequired,
  onChange: propTypes.exports.func.isRequired,
  i18n: propTypes.exports.shape({
    placeholder: propTypes.exports.string
  }).isRequired
};
Textarea.defaultProps = {
  className: ''
};

const emitToastToggle = (...args) => emitter.emit(TOGGLE_TOAST, ...args);
const emitTimingToastToggle = (...args) => emitter.emit(TOGGLE_TIMING_TOAST, ...args);

export { Accordion$2 as Accordion, Accordion$1 as Accordion2, Alert, Avatar, Back, Backdrop, Badge, BlockSection, BoxBackground, BoxOutline, Button$1 as Button, ButtonGroup, Card, Check, Checkbox, Checkbox$1 as CheckboxNoFormik, Close, ColorLine, ColorNumber, CustomLink, DateTimePicker, Divider, Dot, Dropdown, DropdownSelect, DropdownSelectForm, Error$1 as Error, FieldGroup, Filter, FormikToggle, GalleryImage, Heading, Headline, Html, Icon, Image$1 as Image, Indicator, InfinityScroll, InfoBar, InfoSection, Input$1 as Input, Input as InputForm, Instruction, Label, Layout, Legend, LimitQuantity as Limit, LimitSmall, List, ListItem, Loader, LongLogo, MaskedInput, Masked as MaskedInputForm, Message, Modal, Picker as MonthRangePicker, Notification, Overflow, OverflowTooltip, Panel, Paragraph, ProgressBar, Radio, Search, Searcher$1 as Searcher, Section, SectionTile, Select, Separator, ShortLogo, ShowMore, ShowPassword, SkeletonCircle, SkeletonDrawer, SkeletonLine, SkeletonSidebar, Spacer, Spinner, Spreader, StatsBadge, StatusIcon, StepNumber, Steps, Tab, TabList, TabPanel, Tabs, TextOverflow, Textarea, TimeSelect, TimingToast, Toast, Toggle, Tooltip, emitCloseDropdown, emitTimingToastToggle, emitToastToggle };
//# sourceMappingURL=index.js.map
